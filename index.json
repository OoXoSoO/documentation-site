[
{
	"uri": "/travelgatex/reference/objects/api/",
	"title": "API",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type API {  code: ID!    error: [Error!]    apiData: APIData    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!):   error([Error!]):   apiData(APIData):   createdAt(DateTime!):   updatedAt(DateTime!):   \nRequire by APIEdge:    \n"
},
{
	"uri": "/hotelx/reference/api-reference/",
	"title": "API Reference",
	"tags": [],
	"description": "",
	"content": " This API reference is organized by graphql operations related to product.\nQuery Operations Mutation Operations Documentation Schema documentation\nSamples  Search, Quote, Book, Cancel and Retrieve bookings  "
},
{
	"uri": "/travelgatex/reference/objects/apiconnection/",
	"title": "APIConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type APIConnection {  edges: [APIEdge]    pageInfo: PageInfo!   }   Fields edges([APIEdge]):   pageInfo(PageInfo!):   \nRequire by GroupCommonData:    GroupData:    ResourceData:    AdminQuery:    OrganizationData:    ProductData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/apidata/",
	"title": "APIData",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type APIData {  id: ID!    code: ID!    groups(    first: Int,     last: Int,     before: String,     after: String,     codes: [String!],     ): GroupConnection    resources(    first: Int,     last: Int,     before: String,     after: String,     codes: [String!],     ): ResourceConnection   }   Fields id(ID!):   code(ID!):   groups(GroupConnection):   resources(ResourceConnection):   \nRequire by API:    \n"
},
{
	"uri": "/travelgatex/reference/objects/apiedge/",
	"title": "APIEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type APIEdge {  cursor: String!    node: API   }   Fields cursor(String!):   node(API):   \nRequire by APIConnection:    \n"
},
{
	"uri": "/travelgatex/reference/objects/access/",
	"title": "Access",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Access {  code: ID!    accessData: AccessData!    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!):   accessData(AccessData!):   error([Error!]): Errors that will lead the service to abort  createdAt(DateTime!): Create date  updatedAt(DateTime!): Update date  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/accessconfigurationinput/",
	"title": "AccessConfigurationInput",
	"tags": [],
	"description": "",
	"content": " The information required to access the supplier\u0026rsquo;s system.\nGraphQL Schema definition type AccessConfigurationInput {  isActive: Boolean!    code: String!    supplier: String!    configuration: ConfigurationInput   }   Fields isActive(Boolean!): Indicates if the access is active.  code(String!): Arbitrary not unique identifier  supplier(String!): Supplier to which this access belongs  configuration(ConfigurationInput): Information required to access the supplier\u0026#39;s system.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/accessconnectuserinput/",
	"title": "AccessConnectUserInput",
	"tags": [],
	"description": "",
	"content": " Connect user input for data access management API\nGraphQL Schema definition type AccessConnectUserInput {  code: String!    isActive: Boolean!    groups: [ConnectUserGroupInput!]   }   Fields code(String!): connect user code  isActive(Boolean!): Indicates if the connect user is active.  groups([ConnectUserGroupInput!]): groups related to this connect user  \n"
},
{
	"uri": "/travelgatex/reference/objects/accessconnection/",
	"title": "AccessConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type AccessConnection {  edges: [AccessEdge]    pageInfo: PageInfo!   }   Fields edges([AccessEdge]):   pageInfo(PageInfo!):   \n"
},
{
	"uri": "/travelgatex/reference/objects/accessdata/",
	"title": "AccessData",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type AccessData {  suppliers: Supplier!    isActive: Boolean!    id: ID!    code: String!    supplier: String!    user: String    password: String    urls: Urls!    parameters: [Parameter!]    markets: [String!]   }   Fields suppliers(Supplier!): code: ID! URL: Url! user: String!  isActive(Boolean!): Indicates if the access is active.  id(ID!): Unique AccessConfiguration identifier  code(String!): Access code.  supplier(String!): supplier for this access.  user(String): User code to connect to supplier.  password(String): Password for the connection.  urls(Urls!): Specific Urls  parameters([Parameter!]): List of parameters for additional information.  markets([String!]): Markets allowed for the access.  \nRequire by Access:    \n"
},
{
	"uri": "/travelgatex/reference/objects/accessedge/",
	"title": "AccessEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type AccessEdge {  cursor: String!    node: Supplier   }   Fields cursor(String!):   node(Supplier):   \nRequire by AccessConnection:    \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/accessfilterinput/",
	"title": "AccessFilterInput",
	"tags": [],
	"description": "",
	"content": " Include OR exclude accesses in this specific search query. If not specified, default accesses will be used. Only one list (includes or excludes) MUST be used.\nGraphQL Schema definition type AccessFilterInput {  includes: [ID!]    excludes: [ID!]   }   Fields includes([ID!]): These Access IDs will overwrite the default configuration. Only the IDs on this list will be used in the search query.  excludes([ID!]): These Access IDs will overwrite the default configuration. The IDs on this list will be excluded from the search query.  \nRequire by FilterInput:  Filter that selects the filter criteria which will be used in this availability. Currently you can only choose the accesses. You must choose one of them, include or exclude, or the other alternative isn\u0026#39;t specified anything. If input both, you will receive a validation error that indicates this error.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/accessinput/",
	"title": "AccessInput",
	"tags": [],
	"description": "",
	"content": " AccessInput overwrites an existent access in our Back Office or creates a new one to be used in this search query only. An access object contains its own code, configuration and settings.\nGraphQL Schema definition type AccessInput {  accessId: ID!    configuration: ConfigurationInput    settings: SettingsBaseInput   }   Fields accessId(ID!): The accessID used to identify the existing access in our Back Office in order to overwrite it. Acts as an identifier in this search. It can either exist or not.  configuration(ConfigurationInput): Information required to access the supplier\u0026#39;s system.  settings(SettingsBaseInput): You can configure an special settings for any access. This level overwrites the search and supplier settings levels.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/accesssupplierinput/",
	"title": "AccessSupplierInput",
	"tags": [],
	"description": "",
	"content": " Supplier input for data access management API\nGraphQL Schema definition type AccessSupplierInput {  code: String!    dll: String!    isActive: Boolean!    groups: [SupplierGroupInput!]   }   Fields code(String!): supplier code  dll(String!): supplier instance  isActive(Boolean!): Indicates if the supplier is active.  groups([SupplierGroupInput!]): groups related to this supplier  \n"
},
{
	"uri": "/hotelx/concepts/accesses-supplier-context/",
	"title": "Accesses, Sellers and Context",
	"tags": [],
	"description": "Learn about Core Entities used in TravelgateX",
	"content": " Access Seller Context Context is the way codes are formed. Every platform can manage its own contexts or reuse existing ones.\nThat is to say, different sellers and buyers can manage same codes context. For example SmyRooms uses SMY contexts.\nContext apply to:\n Hotel Codes Board Codes Room Codes  Thanks to our built in solution you will be able to choose the context that you want to use when requesting an HotelX operation. This context will be used in order to map with other suppliers contexts.\nWe recommend to use the biggest context possible or use your own context, so all supplier mappings can be resolved.\n"
},
{
	"uri": "/travelgatex/reference/objects/addons/",
	"title": "AddOns",
	"tags": [],
	"description": "",
	"content": " Extra information about the option.\nGraphQL Schema definition type AddOns {  distribute: JSON   }   Fields distribute(JSON): Extra information from the distribution layer  \nRequire by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description.  HotelOptionQuote:  Contains information about quote.  \n"
},
{
	"uri": "/travelgatex/reference/objects/adminmutation/",
	"title": "AdminMutation",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type AdminMutation {  createMember( member: CreateMemberInput!, ): Member!    createGroup( group: CreateGroupInput!, ): Group!    updateMember( member: UpdateMemberInput!, ): Member!    updateGroup( group: UpdateGroupInput!, ): Group!    deleteMember( member: [DeleteMemberInput!]!, ): Member!    deleteGroup( group: DeleteGroupInput!, ): Group!   }   Fields createMember(Member!):   createGroup(Group!):   updateMember(Member!):   updateGroup(Group!):   deleteMember(Member!):   deleteGroup(Group!):   \n"
},
{
	"uri": "/travelgatex/reference/objects/adminquery/",
	"title": "AdminQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type AdminQuery {  organizations(    codes: [String!],     first: Int,     last: Int,     before: String,     after: String,     ): OrganizationConnection!    catalog(    codes: [String!],     first: Int,     last: Int,     before: String,     after: String,     ): ProductConnection!    members(    codes: [String!],     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection!    groups(    codes: [String!],     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection!    apis(    codes: [String!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection!    resources(    codes: [String!],     first: Int,     last: Int,     before: String,     after: String,     ): ResourceConnection!    roles(    codes: [String!],     first: Int,     last: Int,     before: String,     after: String,     ): RoleConnection!   }   Fields organizations(OrganizationConnection!):   catalog(ProductConnection!):   members(MemberConnection!):   groups(GroupConnection!):   apis(APIConnection!):   resources(ResourceConnection!):   roles(RoleConnection!):   \n"
},
{
	"uri": "/travelgatex/reference/interfaces/advisemessage/",
	"title": "AdviseMessage",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition interface AdviseMessage {  code: String!    type: String!    description: String!   }   Fields code(String!): TODO: Error code: The following codes can be returned: XXX: XXXXXXXXX XXXXXX  type(String!): TODO: Error type: The following types are valid:  description(String!): Error description  \n"
},
{
	"uri": "/travelgatex/reference/objects/amenity/",
	"title": "Amenity",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Amenity {  code: ID!    AmenityData: AmenityData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!):   AmenityData(AmenityData):   error([Error!]): Errors that will lead the service to abort  createdAt(DateTime!): Create date  updatedAt(DateTime!): Update date  \nRequire by AmenityEdge:  HotelList Edge definition  \n"
},
{
	"uri": "/travelgatex/reference/objects/amenityconnection/",
	"title": "AmenityConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type AmenityConnection {  edges: [AmenityEdge]    pageInfo: PageInfo!   }   Fields edges([AmenityEdge]):   pageInfo(PageInfo!):   \nRequire by HotelData:  Hotel data  \n"
},
{
	"uri": "/travelgatex/reference/objects/amenitydata/",
	"title": "AmenityData",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type AmenityData {  code: ID!    information: Information!    type: ApplicationArea!   }   Fields code(ID!):   information(Information!):   type(ApplicationArea!):   \nRequire by Amenity:    \n"
},
{
	"uri": "/travelgatex/reference/objects/amenityedge/",
	"title": "AmenityEdge",
	"tags": [],
	"description": "",
	"content": " HotelList Edge definition\nGraphQL Schema definition type AmenityEdge {  cursor: String!    node: Amenity   }   Fields cursor(String!):   node(Amenity):   \nRequire by AmenityConnection:    \n"
},
{
	"uri": "/travelgatex/reference/enums/applicationarea/",
	"title": "ApplicationArea",
	"tags": [],
	"description": "",
	"content": " Indicates a place\nGraphQL Schema definition  enum ApplicationArea{   GENERAL,    HOTEL,    ROOM,    SERVICE,   }   Require by MediaData:    AmenityData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/auditdata/",
	"title": "AuditData",
	"tags": [],
	"description": "",
	"content": " Data sent \u0026amp; received in the supplierâ€™s native format.\nGraphQL Schema definition type AuditData {  transactions: [Transactions!]!    timeStamp: DateTime!    processTime: Float!   }   Fields transactions([Transactions!]!): List of transactions data.  timeStamp(DateTime!): TimeStamp  processTime(Float!): Process time in milliseconds (ms)  \nRequire by HotelSearch:  Results of Avail Hotel. Contains all the available options for a given date and itinerary.  Response:    HotelQuote:    HotelBooking:    HotelBookPayload:    HotelCancelPayload:    \n"
},
{
	"uri": "/travelgatex/reference/objects/bed/",
	"title": "Bed",
	"tags": [],
	"description": "",
	"content": " Contains information about a bed.\nGraphQL Schema definition type Bed {  type: String    description: String    count: Int    shared: Boolean   }   Fields type(String): Specifies the bed type.  description(String): Description about the bed.  count(Int): Indicates number of beds in the room.  shared(Boolean): Specifies if the bed is shared or not.  \n"
},
{
	"uri": "/hotelx/howtos/howto-book/",
	"title": "Book",
	"tags": [],
	"description": "",
	"content": "Flow to book\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/bookpaxinput/",
	"title": "BookPaxInput",
	"tags": [],
	"description": "",
	"content": " Input BookPax contains basic information abaout pax suach as name, surname and age.\nGraphQL Schema definition type BookPaxInput {  name: String!    surname: String!    age: Int!   }   Fields name(String!): The guest\u0026#39;s first name  surname(String!): The guest\u0026#39;s last name  age(Int!): The guest\u0026#39;s age  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/bookreferenceinput/",
	"title": "BookReferenceInput",
	"tags": [],
	"description": "",
	"content": " Reference object that contains the client reference and/or supplier reference.\nGraphQL Schema definition type BookReferenceInput {  client: String    supplier: String   }   Fields client(String): The client\u0026#39;s reference  supplier(String): The Supplier\u0026#39;s reference  \nRequire by HotelCancelInput:  Cancellation Criteria.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/bookroominput/",
	"title": "BookRoomInput",
	"tags": [],
	"description": "",
	"content": " Input BookRoom contains list of pax and the room\u0026rsquo;s reference.\nGraphQL Schema definition type BookRoomInput {  occupancyRefId: Int!    paxes: [BookPaxInput!]!   }   Fields occupancyRefId(Int!): The room\u0026#39;s reference in the booking  paxes([BookPaxInput!]!): The list or lists of paxes of the room  \n"
},
{
	"uri": "/travelgatex/reference/enums/bookstatustype/",
	"title": "BookStatusType",
	"tags": [],
	"description": "",
	"content": " Book status\nGraphQL Schema definition  enum BookStatusType{   OK,    KO,    ON_REQUEST,    CANCELLED,    UNKNOWN,   }   Require by HotelBookingDetail:  Contains information about booking.  HotelCancelDetail:  Contains information about cancel  \n"
},
{
	"uri": "/travelgatex/reference/interfaces/bookableoptionsearch/",
	"title": "BookableOptionSearch",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition interface BookableOptionSearch {  supplierCode: String!    accessCode: String!    id: String!   }   Fields supplierCode(String!): Supplier that offers this option.  accessCode(String!): Access code of this option.  id(String!): Indicates the id to be used on Quote as key  \n"
},
{
	"uri": "/travelgatex/reference/objects/booking/",
	"title": "Booking",
	"tags": [],
	"description": "",
	"content": " Returns detailed information about books.\nGraphQL Schema definition type Booking {  hotel( criteria: HotelCriteriaBookingInput!, settings: HotelSettingsInput, ): HotelBooking   }   Fields hotel(HotelBooking): Returns detailed information about books, you can indicated a list of locators or a range date.  \nRequire by Query:    \n"
},
{
	"uri": "/travelgatex/reference/enums/bookingcriteriatype/",
	"title": "BookingCriteriaType",
	"tags": [],
	"description": "",
	"content": " Indicates the type of criteria in the request of the booking list\nGraphQL Schema definition  enum BookingCriteriaType{   DATES,    REFERENCES,   }   Require by HotelCriteriaBookingInput:  Criteria of book contains basic information to find a book or books.  \n"
},
{
	"uri": "/travelgatex/reference/objects/bookinghotel/",
	"title": "BookingHotel",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type BookingHotel {  creationDate: Date    checkIn: Date    checkOut: Date    hotelCode: String    hotelName: String    boardCode: String    occupancies: [Occupancy!]    rooms: [BookingRoom!]   }   Fields creationDate(Date): Creation date of the booking. Format: yyyy-MM-dd  checkIn(Date): Check-in date for the booking. Format: yyyy-MM-dd  checkOut(Date): Check-out date for the booking. Format: yyyy-MM-dd  hotelCode(String): Code of the hotel in the context selected.  hotelName(String): Name of the hotel.  boardCode(String): Code of the board in the context selected.  occupancies([Occupancy!]): List of occupancies of the request.  rooms([BookingRoom!]): List of rooms.  \nRequire by HotelBookingDetail:  Contains information about booking.  \n"
},
{
	"uri": "/travelgatex/reference/objects/bookingroom/",
	"title": "BookingRoom",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type BookingRoom {  occupancyRefId: Int    code: String    description: String    price: Price   }   Fields occupancyRefId(Int): ID reference to the occupancy.  code(String): Indicates the room code.  description(String): Description about the room.  price(Price): Total price for all days.  \n"
},
{
	"uri": "/travelgatex/reference/scalars/boolean/",
	"title": "Boolean",
	"tags": [],
	"description": "",
	"content": " The Boolean scalar type represents true or false.\nGraphQL Schema definition scalar Boolean   Require by HotelSettingsInput:  Settings that you can edit for this avail. Values are loaded by default in our Back Office.  SettingsBaseInput:  Contains the time out and business rules of a supplier or an access.  Room:  Contains the room information of the option returned.  Price:  Price indicates the value of the room/option. Supplements and/or surcharges could be or not included into the price, will be verified with the nodes Supplements/Surcharges.  Priceable:    Markup:  Informs markup applied over supplier price.  Bed:  Contains information about a bed.  Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  Surcharge:  Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.  CancelPolicy:  Contains information about a cancel policy.  HotelData:  Hotel data  PageInfo:    Destination:  Destination type  Mutation:  Mutations are operations that change or update data in the server.  DeltaPriceInput:  Input delta price, indicates price variation permitted by the client  SupplierData:    SupplierGroup:  group related to a supplier  AccessData:    ConnectUser:  data related to a connect user and its groups  ConnectUserGroup:  group related to a connect user  AccessConfigurationInput:  The information required to access the supplier\u0026#39;s system.  AccessConnectUserInput:  Connect user input for data access management API  ConnectUserGroupInput:  group related to a connect user  AccessSupplierInput:  Supplier input for data access management API  SupplierGroupInput:  group related to a supplier  IdAccessConfigurationInput:    Member:    RoleData:     "
},
{
	"uri": "/travelgatex/tutorials/ota-site/",
	"title": "Build An OTA",
	"tags": [],
	"description": "Build Your Own Full Fledged OTA",
	"content": ""
},
{
	"uri": "/travelgatex/reference/objects/businessrules/",
	"title": "BusinessRules",
	"tags": [],
	"description": "",
	"content": " List of business rules to filter the options that you are interested.\nGraphQL Schema definition type BusinessRules {  optionsQuota: Int!    businessRulesType: BusinessRulesType!   }   Fields optionsQuota(Int!): Options quota per avail. Numbers of options wanted by avail.  businessRulesType(BusinessRulesType!): Different business rules to filter the options that you are interested.  \nRequire by DefaultSettings:    \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/businessrulesinput/",
	"title": "BusinessRulesInput",
	"tags": [],
	"description": "",
	"content": " List of business rules to use as filter on the options.\nGraphQL Schema definition type BusinessRulesInput {  optionsQuota: Int    businessRulesType: BusinessRulesType   }   Fields optionsQuota(Int): Options quota per search. Maximum numbers of options to be returned by the search query.  businessRulesType(BusinessRulesType): Different business rules to filter the returned options.  \nRequire by HotelSettingsInput:  Settings that you can edit for this avail. Values are loaded by default in our Back Office.  SettingsBaseInput:  Contains the time out and business rules of a supplier or an access.  \n"
},
{
	"uri": "/travelgatex/reference/enums/businessrulestype/",
	"title": "BusinessRulesType",
	"tags": [],
	"description": "",
	"content": " Business rules type\nGraphQL Schema definition  enum BusinessRulesType{   CHEAPER_AMOUNT,    ROOM_TYPE,   }   Require by BusinessRulesInput:  List of business rules to use as filter on the options.  BusinessRules:  List of business rules to filter the options that you are interested.  DefaultSettingsBusinessRulesInput:  Input delta price, indicates the price variation permitted by the client before failing the booking.  \n"
},
{
	"uri": "/travelgatex/reference/objects/cancelpenalty/",
	"title": "CancelPenalty",
	"tags": [],
	"description": "",
	"content": " Contains information about a cancel penalty.\nGraphQL Schema definition type CancelPenalty {  hoursBefore: Int!    penaltyType: CancelPenaltyType!    currency: Currency!    value: Float!   }   Fields hoursBefore(Int!): Cancellation fees applicable x number of hours before the check in date.  penaltyType(CancelPenaltyType!): Type of penalty. This can be Nights, Percent or Import.  currency(Currency!): Currency used in the cancel policy.  value(Float!): Value of the cancel policy.  \n"
},
{
	"uri": "/travelgatex/reference/enums/cancelpenaltytype/",
	"title": "CancelPenaltyType",
	"tags": [],
	"description": "",
	"content": " Options type\nGraphQL Schema definition  enum CancelPenaltyType{   NIGHTS,    PERCENT,    IMPORT,   }   Require by CancelPenalty:  Contains information about a cancel penalty.  \n"
},
{
	"uri": "/travelgatex/reference/objects/cancelpolicy/",
	"title": "CancelPolicy",
	"tags": [],
	"description": "",
	"content": " Contains information about a cancel policy.\nGraphQL Schema definition type CancelPolicy {  refundable: Boolean!    cancelPenalties: [CancelPenalty!]   }   Fields refundable(Boolean!): Indicates if the option is refundable or not. This information is mandatory.  cancelPenalties([CancelPenalty!]): List of cancel penalties.  \nRequire by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description.  HotelOptionQuote:  Contains information about quote.  HotelBookingDetail:  Contains information about booking.  \n"
},
{
	"uri": "/travelgatex/reference/enums/chargetype/",
	"title": "ChargeType",
	"tags": [],
	"description": "",
	"content": " Charge Type\nGraphQL Schema definition  enum ChargeType{   INCLUDE,    EXCLUDE,   }   Require by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  Surcharge:  Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/configurationinput/",
	"title": "ConfigurationInput",
	"tags": [],
	"description": "",
	"content": " The information and credentials required to access the supplierâ€™s system.\nGraphQL Schema definition type ConfigurationInput {  username: String    password: String    urls: UrlsInput!    parameters: [ParameterInput!]    markets: [String!]    rateRules: [RateRulesType!]   }   Fields username(String): User name for the connection.  password(String): Password for the connection.  urls(UrlsInput!): Url or endpoint for the connection.  parameters([ParameterInput!]): List of parameters with additional required information.  markets([String!]): Source markets allowed for the access.  rateRules([RateRulesType!]): RateRules allowed for the access.  \nRequire by AccessInput:  AccessInput overwrites an existent access in our Back Office or creates a new one to be used in this search query only. An access object contains its own code, configuration and settings.  AccessConfigurationInput:  The information required to access the supplier\u0026#39;s system.  IdAccessConfigurationInput:    \n"
},
{
	"uri": "/travelgatex/reference/objects/connectuser/",
	"title": "ConnectUser",
	"tags": [],
	"description": "",
	"content": " data related to a connect user and its groups\nGraphQL Schema definition type ConnectUser {  code: String!    isActive: Boolean!    connectUserGroups: [ConnectUserGroup!]   }   Fields code(String!): unique connect user of a supplier  isActive(Boolean!): indicates whether a connect user is active  connectUserGroups([ConnectUserGroup!]): connect user\u0026#39;s related data of its groups  \n"
},
{
	"uri": "/travelgatex/reference/objects/connectusergroup/",
	"title": "ConnectUserGroup",
	"tags": [],
	"description": "",
	"content": " group related to a connect user\nGraphQL Schema definition type ConnectUserGroup {  groupCode: String!    isActive: Boolean!   }   Fields groupCode(String!): group code of the group related to this connect user  isActive(Boolean!): Indicates if the connect user is active for its connect user  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/connectusergroupinput/",
	"title": "ConnectUserGroupInput",
	"tags": [],
	"description": "",
	"content": " group related to a connect user\nGraphQL Schema definition type ConnectUserGroupInput {  groupCode: String!    isActive: Boolean!   }   Fields groupCode(String!): group code of the group related to this connect user  isActive(Boolean!): Indicates if the connect user is active for its connect user  \n"
},
{
	"uri": "/travelgatex/reference/objects/contact/",
	"title": "Contact",
	"tags": [],
	"description": "",
	"content": " Contact type\nGraphQL Schema definition type Contact {  email: String    telephone: String    fax: String    web: URI!   }   Fields email(String): Email.  telephone(String): Telephone.  fax(String): Fax.  web(URI!): Web.  \nRequire by HotelData:  Hotel data  \n"
},
{
	"uri": "/travelgatex/reference/scalars/country/",
	"title": "Country",
	"tags": [],
	"description": "",
	"content": " The Country type represents Country values. A good example might be a Passenger Nationality. In queries or mutations, Country fields have to be specified in ISO 3166-1 alpha-2 format with enclosing double quotes \u0026ldquo;ES\u0026rdquo;.\nGraphQL Schema definition scalar Country   Require by HotelCriteriaSearchInput:  Criteria of search contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.  CriteriaSearch:  Criteria of search contains destination, travel dates and the number of pax in each room.  Location:  Location  DefaultSettings:    DefaultSettingsInput:     "
},
{
	"uri": "/travelgatex/reference/inputobjects/creategroupinput/",
	"title": "CreateGroupInput",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type CreateGroupInput {  user: String    code: String!    type: GroupType!    info: String    parent: ID!   }   Fields user(String):   code(String!):   type(GroupType!):   info(String):   parent(ID!):   \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/creatememberinput/",
	"title": "CreateMemberInput",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type CreateMemberInput {  code: String    info: String    type: MemberType!    group: String!    roles: [String!]!    resource: String!   }   Fields code(String):   info(String):   type(MemberType!):   group(String!):   roles([String!]!):   resource(String!):   \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/criteriabookingdatesinput/",
	"title": "CriteriaBookingDatesInput",
	"tags": [],
	"description": "",
	"content": " Criteria by dates\nGraphQL Schema definition type CriteriaBookingDatesInput {  dateType: DateType!    start: Date!    end: Date!   }   Fields dateType(DateType!): Type of date. Can be Arrival or Booking date.  start(Date!): Start date. Format: yyyy-MM-dd.  end(Date!): End date. Format: yyyy-MM-dd.  \nRequire by HotelCriteriaBookingInput:  Criteria of book contains basic information to find a book or books.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/criteriabookingreferencesinput/",
	"title": "CriteriaBookingReferencesInput",
	"tags": [],
	"description": "",
	"content": " Criteria by references\nGraphQL Schema definition type CriteriaBookingReferencesInput {  hotelCode: String!    currency: Currency!    references: [BookReferenceInput!]!   }   Fields hotelCode(String!): The hotel code.  currency(Currency!): The requested currency. The API will convert to this currency if supplier returns a different one.  references([BookReferenceInput!]!): Contains the client reference and/or supplier reference.  \nRequire by HotelCriteriaBookingInput:  Criteria of book contains basic information to find a book or books.  \n"
},
{
	"uri": "/travelgatex/reference/objects/criteriasearch/",
	"title": "CriteriaSearch",
	"tags": [],
	"description": "",
	"content": " Criteria of search contains destination, travel dates and the number of pax in each room.\nGraphQL Schema definition type CriteriaSearch {  checkIn: Date!    checkOut: Date!    hotels: [String!]!    occupancies: [RoomCriteria!]!    language: Language    currency: Currency    nationality: Country    market: String!   }   Fields checkIn(Date!): Check-in date for the booking. Format: yyyy-MM-dd  checkOut(Date!): Check-out, date for the booking. Format: yyyy-MM-dd  hotels([String!]!): Contains the list of hotels\u0026#39;s ID.  occupancies([RoomCriteria!]!): For multi room bookings, this array will contain multiple elements (rooms). For each room you have to specify its own occupancy.  language(Language): Language to be used in request.  currency(Currency): Currency requested if supported by supplier.  nationality(Country): Nationality of the guest (use ISO3166_1_alfa_2).  market(String!): Targeted zone, country or point of sale to be used in request.  \nRequire by HotelSearch:  Results of Avail Hotel. Contains all the available options for a given date and itinerary.  \n"
},
{
	"uri": "/travelgatex/reference/scalars/currency/",
	"title": "Currency",
	"tags": [],
	"description": "",
	"content": " The Currenty type represents Currency values. A good example might be a Rate Price Currency. In queries or mutations, Currency fields have to be specified in ISO 4217 format with enclosing double quotes \u0026ldquo;EUR\u0026rdquo;.\nGraphQL Schema definition scalar Currency   Require by HotelCriteriaSearchInput:  Criteria of search contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.  CriteriaSearch:  Criteria of search contains destination, travel dates and the number of pax in each room.  Price:  Price indicates the value of the room/option. Supplements and/or surcharges could be or not included into the price, will be verified with the nodes Supplements/Surcharges.  Priceable:    Exchange:  Informs about the currency of origin, and the rate applied over result returned by the supplier.  Markup:  Informs markup applied over supplier price.  CancelPenalty:  Contains information about a cancel penalty.  CriteriaBookingReferencesInput:  Criteria by references  DefaultSettings:    DefaultSettingsInput:     "
},
{
	"uri": "/travelgatex/reference/scalars/date/",
	"title": "Date",
	"tags": [],
	"description": "",
	"content": " The Date type represents Date values. A good example might be a Hotel CheckIn Date. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: \u0026ldquo;2017-10-22\u0026rdquo;.\nGraphQL Schema definition scalar Date   Require by HotelCriteriaSearchInput:  Criteria of search contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.  CriteriaSearch:  Criteria of search contains destination, travel dates and the number of pax in each room.  PriceBreakdown:  Information about daily price.  RatePlan:  Information about the rate of the option returned.  Promotion:  Information about room promotions(offers).  Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  CriteriaBookingDatesInput:  Criteria by dates  BookingHotel:     "
},
{
	"uri": "/travelgatex/reference/scalars/datetime/",
	"title": "DateTime",
	"tags": [],
	"description": "",
	"content": " The DateTime type represents DateTime values. A good example might be a transaction TimeSpan. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: \u0026ldquo;2017-10-22T13:57:31.123Z\u0026rdquo;.\nGraphQL Schema definition scalar DateTime   Require by Stat:    AuditData:  Data sent \u0026amp; received in the supplierâ€™s native format.  Transactions:  Supplier transaction  Hotel:  Hotel type  Node:    Media:    Amenity:    Supplier:    Access:    Member:    Group:    API:    Resource:    Role:    Organization:    Product:     "
},
{
	"uri": "/travelgatex/reference/enums/datetype/",
	"title": "DateType",
	"tags": [],
	"description": "",
	"content": " Indicates the type of dates\nGraphQL Schema definition  enum DateType{   ARRIVAL,    BOOKING,   }   Require by CriteriaBookingDatesInput:  Criteria by dates  \n"
},
{
	"uri": "/travelgatex/reference/objects/defaultsettings/",
	"title": "DefaultSettings",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type DefaultSettings {  connectUser: String!    context: String    language: Language!    currency: Currency!    nationality: Country!    market: String!    timeouts: Timeout!    businessRules: BusinessRules!   }   Fields connectUser(String!): This field is got only if the authorization header is of the type JWT. It is used for to change the user that has been set by default in the preload.  context(String): Indicates the context of the I/O codes (hotel, board, room and rates)  language(Language!): Language to be used in request.  currency(Currency!): Currency requested if supported by supplier.  nationality(Country!): Nationality of the guest (use ISO3166_1_alfa_2).  market(String!): Targeted zone, country or point of sale to be used in request.  timeouts(Timeout!): Group of timeouts to be used in the differents services  businessRules(BusinessRules!): Business rules.  \nRequire by Query:    Mutation:  Mutations are operations that change or update data in the server.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/defaultsettingsbusinessrulesinput/",
	"title": "DefaultSettingsBusinessRulesInput",
	"tags": [],
	"description": "",
	"content": " Input delta price, indicates the price variation permitted by the client before failing the booking.\nGraphQL Schema definition type DefaultSettingsBusinessRulesInput {  optionsQuota: Int!    businessRulesType: BusinessRulesType!   }   Fields optionsQuota(Int!): Options quota per avail. Numbers of options wanted by avail.  businessRulesType(BusinessRulesType!): Different business rules to filter the options that you are interested.  \nRequire by DefaultSettingsInput:    \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/defaultsettingsinput/",
	"title": "DefaultSettingsInput",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type DefaultSettingsInput {  groupCode: String!    connectUser: String!    context: String    language: Language!    currency: Currency!    nationality: Country!    market: String!    timeout: TimeoutInput!    businessRules: DefaultSettingsBusinessRulesInput!   }   Fields groupCode(String!): Unique Id  connectUser(String!): This field is got only if the authorization header is of the type JWT. It is used for to change the user that has been set by default in the preload.  context(String): Indicates the context of the I/O codes (hotel, board, room and rates)  language(Language!): Language to be used in request.  currency(Currency!): Currency requested if supported by supplier.  nationality(Country!): Nationality of the guest (use ISO3166_1_alfa_2).  market(String!): Targeted zone, country or point of sale to be used in request.  timeout(TimeoutInput!): Group of timeouts to be used in the differents services  businessRules(DefaultSettingsBusinessRulesInput!): Business rules.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/deletegroupinput/",
	"title": "DeleteGroupInput",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type DeleteGroupInput {  codes: [String!]!   }   Fields codes([String!]!):   \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/deletememberinput/",
	"title": "DeleteMemberInput",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type DeleteMemberInput {  code: ID!    group: ID!   }   Fields code(ID!):   group(ID!):   \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/deltapriceinput/",
	"title": "DeltaPriceInput",
	"tags": [],
	"description": "",
	"content": " Input delta price, indicates price variation permitted by the client\nGraphQL Schema definition type DeltaPriceInput {  amount: Float    percent: Float    applyBoth: Boolean!   }   Fields amount(Float): The amount in the currency returned by the option that will be accepted by the client to be higher than the valuation price.  percent(Float): The percentage accepted by the client to be higher than the valuation price.  applyBoth(Boolean!): Indicates that the range between valuation price and the new price does not exceed the amount and/or porcentage indicated by the client.  \nRequire by HotelBookInput:  Criteria of book.  \n"
},
{
	"uri": "/travelgatex/reference/objects/destination/",
	"title": "Destination",
	"tags": [],
	"description": "",
	"content": " Destination type\nGraphQL Schema definition type Destination {  code: String    name: String    avail: Boolean!   }   Fields code(String): Destination code.  name(String): Destination name.  avail(Boolean!): Indicates if it is allowed in availability.  \nRequire by HotelData:  Hotel data  \n"
},
{
	"uri": "/travelgatex/reference/enums/durationtype/",
	"title": "DurationType",
	"tags": [],
	"description": "",
	"content": " Duration Type\nGraphQL Schema definition  enum DurationType{   RANGE,    OPEN,   }   Require by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  \n"
},
{
	"uri": "/admin/connect/entities/",
	"title": "Entities",
	"tags": [],
	"description": "AdminX Information",
	"content": ""
},
{
	"uri": "/travelgatex/reference/objects/error/",
	"title": "Error",
	"tags": [],
	"description": "",
	"content": " Application errors\nGraphQL Schema definition type Error {  code: String!    type: String!    description: String!   }   Fields code(String!): Error code  type(String!): Error type  description(String!): Error description  \n"
},
{
	"uri": "/travelgatex/reference/objects/exchange/",
	"title": "Exchange",
	"tags": [],
	"description": "",
	"content": " Informs about the currency of origin, and the rate applied over result returned by the supplier.\nGraphQL Schema definition type Exchange {  currency: Currency!    rate: Float!   }   Fields currency(Currency!): Informs about the currency of origin.  rate(Float!): Informs about the rate applied over result.  \nRequire by Price:  Price indicates the value of the room/option. Supplements and/or surcharges could be or not included into the price, will be verified with the nodes Supplements/Surcharges.  Priceable:    Markup:  Informs markup applied over supplier price.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/expiredateinput/",
	"title": "ExpireDateInput",
	"tags": [],
	"description": "",
	"content": " The card expiration date\nGraphQL Schema definition type ExpireDateInput {  month: Int!    year: Int!   }   Fields month(Int!): Month MM  year(Int!): Year yy  \nRequire by PaymentCardInput:  Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/filterinput/",
	"title": "FilterInput",
	"tags": [],
	"description": "",
	"content": " Filter that selects the filter criteria which will be used in this availability. Currently you can only choose the accesses. You must choose one of them, include or exclude, or the other alternative isn\u0026rsquo;t specified anything. If input both, you will receive a validation error that indicates this error.\nGraphQL Schema definition type FilterInput {  access: AccessFilterInput    rateRules: RateRulesFilterInput   }   Fields access(AccessFilterInput): You can specify one of the filters or any of them. In this latter case, all the configurated accesses will be executed.  rateRules(RateRulesFilterInput): If requested, only options with the specified rateRules will be returned  \n"
},
{
	"uri": "/travelgatex/reference/scalars/float/",
	"title": "Float",
	"tags": [],
	"description": "",
	"content": " The Float scalar type represents signed double-precision fractional values as specified by IEEE 754.\nGraphQL Schema definition scalar Float   Require by Stat:    AuditData:  Data sent \u0026amp; received in the supplierâ€™s native format.  Price:  Price indicates the value of the room/option. Supplements and/or surcharges could be or not included into the price, will be verified with the nodes Supplements/Surcharges.  Priceable:    Exchange:  Informs about the currency of origin, and the rate applied over result returned by the supplier.  Markup:  Informs markup applied over supplier price.  Rule:    CancelPenalty:  Contains information about a cancel penalty.  DeltaPriceInput:  Input delta price, indicates price variation permitted by the client   "
},
{
	"uri": "/travelgatex/reference/objects/geocode/",
	"title": "Geocode",
	"tags": [],
	"description": "",
	"content": " Geocode type\nGraphQL Schema definition type Geocode {  latitude: String!    longitude: String!   }   Fields latitude(String!): Latitude  longitude(String!): Longitude  \nRequire by Location:  Location  \n"
},
{
	"uri": "/getting-started/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": "Welcome to TravelgateX! Get familiar with the TravelgateX products and explore their features:\n\t Overview Learn The Basics\n   \t Quickstart Try the API now\n   \t Concepts Understand Concepts\n   \t Playground Embedded GraphQL Client\n    "
},
{
	"uri": "/travelgatex/reference/objects/giataid/",
	"title": "GiataID",
	"tags": [],
	"description": "",
	"content": " Giata System ID.\nGraphQL Schema definition type GiataID {  code: String   }   Fields code(String): Giata url. source: URI! Giata code  \n"
},
{
	"uri": "/travelgatex/reference/objects/group/",
	"title": "Group",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Group {  code: ID!    error: [Error!]    groupData: GroupData    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!):   error([Error!]):   groupData(GroupData):   createdAt(DateTime!):   updatedAt(DateTime!):   \nRequire by GroupEdge:    AdminMutation:    \n"
},
{
	"uri": "/travelgatex/reference/objects/groupaccess/",
	"title": "GroupAccess",
	"tags": [],
	"description": "",
	"content": " Pair of groups and accesses. All accesses returned will belong to all the groups in groupCodes\nGraphQL Schema definition type GroupAccess {  groupCodes: [String!]!    accesses: [Access!]   }   Fields groupCodes([String!]!): group identifiers  accesses([Access!]):   \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/groupaccessinput/",
	"title": "GroupAccessInput",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type GroupAccessInput {  groupCodes: [String!]    accesses: [AccessConfigurationInput!]!   }   Fields groupCodes([String!]): groups identifiers in which the access will be associated  accesses([AccessConfigurationInput!]!): access related data  \n"
},
{
	"uri": "/travelgatex/reference/interfaces/groupcommondata/",
	"title": "GroupCommonData",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition interface GroupCommonData {  id: ID!    code: ID!    members(    codes: [String!],     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [String!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection   }   Fields id(ID!):   code(ID!):   members(MemberConnection):   apis(APIConnection):   \n"
},
{
	"uri": "/travelgatex/reference/objects/groupconnection/",
	"title": "GroupConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type GroupConnection {  edges: [GroupEdge]    pageInfo: PageInfo!   }   Fields edges([GroupEdge]):   pageInfo(PageInfo!):   \nRequire by MemberData:    APIData:    AdminQuery:    \n"
},
{
	"uri": "/travelgatex/reference/objects/groupdata/",
	"title": "GroupData",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type GroupData {  id: ID!    code: ID!    type: GroupType!    parent: Int!    members(    codes: [String!],     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [String!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection   }   Fields id(ID!):   code(ID!):   type(GroupType!):   parent(Int!):   members(MemberConnection):   apis(APIConnection):   \nRequire by Group:    \n"
},
{
	"uri": "/travelgatex/reference/objects/groupedge/",
	"title": "GroupEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type GroupEdge {  cursor: String!    node: Group   }   Fields cursor(String!):   node(Group):   \nRequire by GroupConnection:    \n"
},
{
	"uri": "/travelgatex/reference/enums/grouptype/",
	"title": "GroupType",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition  enum GroupType{   ROOT,    ORG,    GROUP,    PROFILE,    TEAM,   }   Require by GroupData:    CreateGroupInput:    \n"
},
{
	"uri": "/travelgatex/reference/objects/holder/",
	"title": "Holder",
	"tags": [],
	"description": "",
	"content": " Holder object that contains the pax name and surname.\nGraphQL Schema definition type Holder {  name: String!    surname: String!   }   Fields name(String!): Holder\u0026#39;s name  surname(String!): Holder\u0026#39;s surname  \nRequire by HotelBookingDetail:  Contains information about booking.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/holderinput/",
	"title": "HolderInput",
	"tags": [],
	"description": "",
	"content": " Holder object that contains the pax name and surname.\nGraphQL Schema definition type HolderInput {  name: String!    surname: String!   }   Fields name(String!): The card holder\u0026#39;s name  surname(String!): The card holder\u0026#39;s surname  \nRequire by HotelBookInput:  Criteria of book.  PaymentCardInput:  Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information  \n"
},
{
	"uri": "/travelgatex/reference/objects/hotel/",
	"title": "Hotel",
	"tags": [],
	"description": "",
	"content": " Hotel type\nGraphQL Schema definition type Hotel {  code: ID!    hotelData: HotelData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!): Hotel ID  hotelData(HotelData): Hotel data  error([Error!]): Errors that will lead the service to abort  createdAt(DateTime!): Create date  updatedAt(DateTime!): Update date  \nRequire by HotelEdge:  HotelList Edge definition  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelbookinput/",
	"title": "HotelBookInput",
	"tags": [],
	"description": "",
	"content": " Criteria of book.\nGraphQL Schema definition type HotelBookInput {  optionRefId: String!    language: Language    clientReference: String!    deltaPrice: DeltaPriceInput    paymentCard: PaymentCardInput    remarks: String    holder: HolderInput!    rooms: [BookRoomInput!]!   }   Fields optionRefId(String!): Option ID  language(Language): Language to be used in request.  clientReference(String!): Booking ID in client\u0026#39;s system.  deltaPrice(DeltaPriceInput): Indicates price variation permitted by the client.  paymentCard(PaymentCardInput): If the payment is done by credit card, it\u0026#39;s mandatory to specify the payment type and the credit card information.  remarks(String): Any customer comments for the supplier to consider.  holder(HolderInput!): Holder\u0026#39;s basic information.  rooms([BookRoomInput!]!): Rooms within this option.  \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelbookpayload/",
	"title": "HotelBookPayload",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type HotelBookPayload {  stats( token: String!, ): RequestStats    auditData: AuditData    booking: HotelBookingDetail    errors: [Error!]    warnings: [Warning!]   }   Fields stats(RequestStats): Application stats in string format  auditData(AuditData): Data sent \u0026amp; received in the supplier\u0026#39;s native format.  booking(HotelBookingDetail): Information about booking  errors([Error!]): Errors that will lead the service to abort  warnings([Warning!]): Potentially harmful situations or errors that won\u0026#39;t force the service to abort  \nRequire by Mutation:  Mutations are operations that change or update data in the server.  HotelXMutation:    \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelbooking/",
	"title": "HotelBooking",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type HotelBooking {  stats( token: String!, ): RequestStats    auditData: AuditData    bookings: [HotelBookingDetail!]    errors: [Error!]    warnings: [Warning!]   }   Fields stats(RequestStats): Application stats in string format  auditData(AuditData): Data sent \u0026amp; received in the supplier\u0026#39;s native format.  bookings([HotelBookingDetail!]): Details about booking  errors([Error!]): Errors that will lead the service to abort  warnings([Warning!]): Potentially harmful situations or errors that won\u0026#39;t force the service to abort  \nRequire by HotelXQuery:  A Query is an entry point into the object graph.  Booking:  Returns detailed information about books.  \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelbookingdetail/",
	"title": "HotelBookingDetail",
	"tags": [],
	"description": "",
	"content": " Contains information about booking.\nGraphQL Schema definition type HotelBookingDetail {  reference: Reference!    holder: Holder    hotel: BookingHotel    price: Price    cancelPolicy: CancelPolicy    remarks: String    status: BookStatusType!    payable: String   }   Fields reference(Reference!): Booking ID in the Supplier\u0026#39;s system  holder(Holder): Holder\u0026#39;s name and surname  hotel(BookingHotel): Information about the hotel.  price(Price): Specifies the prices (Gross, Net and Amount) of the option returned.  cancelPolicy(CancelPolicy): Specifies cancel policies of the book returned.  remarks(String): Additional information about the book.  status(BookStatusType!): Booking Status.  payable(String): Payable.  \nRequire by HotelBookPayload:    HotelCancelDetail:  Contains information about cancel  \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelcanceldetail/",
	"title": "HotelCancelDetail",
	"tags": [],
	"description": "",
	"content": " Contains information about cancel\nGraphQL Schema definition type HotelCancelDetail {  reference: Reference    cancelReference: String    status: BookStatusType    price: Price    booking: HotelBookingDetail   }   Fields reference(Reference): Booking ID in the Supplier\u0026#39;s system  cancelReference(String): Cancellation ID in the Supplier\u0026#39;s system  status(BookStatusType): Booking Status.  price(Price): Specifies the prices (Gross, Net and Amount) of the cancellation.  booking(HotelBookingDetail): Information about the booking.  \nRequire by HotelCancelPayload:    \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelcancelinput/",
	"title": "HotelCancelInput",
	"tags": [],
	"description": "",
	"content": " Cancellation Criteria.\nGraphQL Schema definition type HotelCancelInput {  accessCode: String!    language: Language    hotelCode: String!    reference: BookReferenceInput!   }   Fields accessCode(String!): The name of the access to use in the request.  language(Language): The language code.  hotelCode(String!): The hotel code.  reference(BookReferenceInput!): Contains the client reference and/or supplier reference. One of them is mandatory.  \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelcancelpayload/",
	"title": "HotelCancelPayload",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type HotelCancelPayload {  stats( token: String!, ): RequestStats    auditData: AuditData    cancellation: HotelCancelDetail    errors: [Error!]    warnings: [Warning!]   }   Fields stats(RequestStats): Application stats in string format  auditData(AuditData): Data sent \u0026amp; received in the supplier\u0026#39;s native format.  cancellation(HotelCancelDetail): Information about cancel  errors([Error!]): Errors that will lead the service to abort  warnings([Warning!]): Potentially harmful situations or errors that won\u0026#39;t force the service to abort  \nRequire by Mutation:  Mutations are operations that change or update data in the server.  HotelXMutation:    \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelconnection/",
	"title": "HotelConnection",
	"tags": [],
	"description": "",
	"content": " HotelList definition\nGraphQL Schema definition type HotelConnection {  edges: [HotelEdge]    pageInfo: PageInfo!   }   Fields edges([HotelEdge]):   pageInfo(PageInfo!):   \nRequire by HotelXQuery:  A Query is an entry point into the object graph.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelcriteriabookinginput/",
	"title": "HotelCriteriaBookingInput",
	"tags": [],
	"description": "",
	"content": " Criteria of book contains basic information to find a book or books.\nGraphQL Schema definition type HotelCriteriaBookingInput {  accessCode: String!    language: Language    typeSearch: BookingCriteriaType!    references: CriteriaBookingReferencesInput    dates: CriteriaBookingDatesInput   }   Fields accessCode(String!): Name of the access that have to use in the request.  language(Language): The language code.  typeSearch(BookingCriteriaType!): The search type criteria.  references(CriteriaBookingReferencesInput): The references criteria.  dates(CriteriaBookingDatesInput): The dates criteria.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelcriteriaquoteinput/",
	"title": "HotelCriteriaQuoteInput",
	"tags": [],
	"description": "",
	"content": " The quote criteria contains the option reference id, block and language.\nGraphQL Schema definition type HotelCriteriaQuoteInput {  optionRefId: String!    language: Language   }   Fields optionRefId(String!): Identifier of the option chosen in the search.  language(Language): Language to be used in request.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelcriteriasearchinput/",
	"title": "HotelCriteriaSearchInput",
	"tags": [],
	"description": "",
	"content": " Criteria of search contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.\nGraphQL Schema definition type HotelCriteriaSearchInput {  checkIn: Date!    checkOut: Date!    hotels: [String!]!    occupancies: [RoomInput!]!    language: Language    currency: Currency    nationality: Country    market: String   }   Fields checkIn(Date!): Check-in date for the booking. Format: yyyy-MM-dd  checkOut(Date!): Check-out, date for the booking. Format: yyyy-MM-dd  hotels([String!]!): Contains the list of hotels\u0026#39;s ID.  occupancies([RoomInput!]!): For multi room bookings, this array will contain multiple elements (rooms). For each room you have to specify its own occupancy.  language(Language): Language to be used in request.  currency(Currency): Currency requested if supported by supplier.  nationality(Country): Nationality of the guest (use ISO3166_1_alfa_2).  market(String): Targeted zone, country or point of sale to be used in request.  \n"
},
{
	"uri": "/travelgatex/reference/objects/hoteldata/",
	"title": "HotelData",
	"tags": [],
	"description": "",
	"content": " Hotel data\nGraphQL Schema definition type HotelData {  code: ID!    name: String!    categoryCode: String!    exclusiveDeal: Boolean!    medias(    type: ApplicationArea,     first: Int,     last: Int,     before: String,     after: String,     ): MediaConnection    amenities(    language: Language,     first: Int,     last: Int,     before: String,     after: String,     ): AmenityConnection    additionalInformation( language: Language, ): Information!    generalDescription( language: Language, ): Information!    location: Location!    contact: Contact!    destination: Destination!   }   Fields code(ID!): Internal code to perform availability and/or supplier code.  name(String!): Name.  categoryCode(String!): Hotel category (for example number of stars).  exclusiveDeal(Boolean!): Indicates that the Hotel has an Exclusive Deal.  medias(MediaConnection):   amenities(AmenityConnection):   additionalInformation(Information!):   generalDescription(Information!):   location(Location!):   contact(Contact!): Contact information.  destination(Destination!): Destination information.  \nRequire by Hotel:  Hotel type  \n"
},
{
	"uri": "/travelgatex/reference/objects/hoteledge/",
	"title": "HotelEdge",
	"tags": [],
	"description": "",
	"content": " HotelList Edge definition\nGraphQL Schema definition type HotelEdge {  cursor: String!    node: Hotel   }   Fields cursor(String!):   node(Hotel):   \nRequire by HotelConnection:  HotelList definition  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelinput/",
	"title": "HotelInput",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type HotelInput {  codes: [ID!]    language: Language   }   Fields codes([ID!]):   language(Language):   \n"
},
{
	"uri": "/travelgatex/reference/objects/hoteloptionquote/",
	"title": "HotelOptionQuote",
	"tags": [],
	"description": "",
	"content": " Contains information about quote.\nGraphQL Schema definition type HotelOptionQuote {  optionRefId: String!    status: StatusType!    price: Price!    cancelPolicy: CancelPolicy!    remarks: String    surcharges: [Surcharge!]    cardTypes: [String!]    addOns: AddOns   }   Fields optionRefId(String!): Indicates the valuation key  status(StatusType!): The possible values in status in response are Available (OK) or On Request (RQ).  price(Price!): Specifies the prices (Gross, Net and Amount) of the option returned.  cancelPolicy(CancelPolicy!): Specifies cancel policies of the option returned.  remarks(String): Additional information about the option.  surcharges([Surcharge!]): List of surcharges of the option returned.  cardTypes([String!]): List of credit cards  addOns(AddOns): Extra information about the option.  \nRequire by HotelQuote:    \n"
},
{
	"uri": "/travelgatex/reference/objects/hoteloptionsearch/",
	"title": "HotelOptionSearch",
	"tags": [],
	"description": "",
	"content": " An option includes hotel information, meal plan, total price, conditions and room description.\nGraphQL Schema definition type HotelOptionSearch {  supplierCode: String!    accessCode: String!    market: String!    hotelCode: String!    hotelCodeSupplier: String!    hotelName: String    boardCode: String!    boardCodeSupplier: String!    paymentType: PaymentType!    status: StatusType!    occupancies: [Occupancy!]!    rooms: [Room!]!    price: Price!    supplements: [Supplement!]    surcharges: [Surcharge!]    rateRules: [RateRulesType!]    cancelPolicy: CancelPolicy    remarks: String    addOns: AddOns    token: String!    id: String!   }   Fields supplierCode(String!): Supplier that offers this option.  accessCode(String!): Access code of this option.  market(String!): Market of this option.  hotelCode(String!): Code of the hotel in the context selected.  hotelCodeSupplier(String!): Supplier\u0026#39;s hotel code.  hotelName(String): Name of the hotel.  boardCode(String!): Code of the board in the context selected.  boardCodeSupplier(String!): Supplier\u0026#39;s board code.  paymentType(PaymentType!): Indicates the payment type of the option returned. Possible options: Merchant, Direct, Card Booking, Card check in and Mixed.  status(StatusType!): The possible values in status in response are Available (OK) or On Request (RQ).  occupancies([Occupancy!]!): List of occupancies of the request.  rooms([Room!]!): List of rooms of the option returned.  price(Price!): Specifies the prices (Gross, Net and Amount) of the option returned.  supplements([Supplement!]): List of supplements of the option returned.  surcharges([Surcharge!]): List of surcharges of the option returned.  rateRules([RateRulesType!]): Specifies rate rules of the option returned.  cancelPolicy(CancelPolicy): Specifies cancel policies of the option returned.  remarks(String): Additional information about the option.  addOns(AddOns): Extra information about the option.  token(String!): Token for Deep Link  id(String!): Indicates the quote key  \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelquote/",
	"title": "HotelQuote",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type HotelQuote {  stats( token: String!, ): RequestStats    auditData: AuditData    optionQuote: HotelOptionQuote    errors: [Error!]    warnings: [Warning!]   }   Fields stats(RequestStats): Application stats in string format  auditData(AuditData): Data sent \u0026amp; received in the supplier\u0026#39;s native format.  optionQuote(HotelOptionQuote): Information about quote.  errors([Error!]): Errors that will lead the service to abort  warnings([Warning!]): Potentially harmful situations or errors that won\u0026#39;t force the service to abort  \nRequire by HotelXQuery:  A Query is an entry point into the object graph.  Quote:  Returns the total price and cancellation policies of the Option selected in the previous step (Search).  \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelsearch/",
	"title": "HotelSearch",
	"tags": [],
	"description": "",
	"content": " Results of Avail Hotel. Contains all the available options for a given date and itinerary.\nGraphQL Schema definition type HotelSearch {  context: String    stats( token: String!, ): RequestStats    auditData: AuditData    requestCriteria: CriteriaSearch!    options: [HotelOptionSearch!]    errors: [Error!]    warnings: [Warning!]   }   Fields context(String): Indicates the context of the response.  stats(RequestStats): Application stats in string format  auditData(AuditData): Data sent \u0026amp; received in the supplier\u0026#39;s native format.  requestCriteria(CriteriaSearch!): Request Criteria  options([HotelOptionSearch!]): List of options returned according to the request.  errors([Error!]): Errors that will lead the service to abort  warnings([Warning!]): Potentially harmful situations or errors that won\u0026#39;t force the service to abort  \nRequire by HotelXQuery:  A Query is an entry point into the object graph.  Search:  Available options for a given date and itinerary. It does not filter different classes, times or fares. It will always retrieve all results returned by the suppliers. The availability request is very straight forward.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelsettingsinput/",
	"title": "HotelSettingsInput",
	"tags": [],
	"description": "",
	"content": " Settings that you can edit for this avail. Values are loaded by default in our Back Office.\nGraphQL Schema definition type HotelSettingsInput {  context: String    useContext: Boolean    connectUser: String    timeout: Int    auditTransactions: Boolean    businessRules: BusinessRulesInput    suppliers: [SupplierInput!]    plugins: [PluginStepInput!]   }   Fields context(String): Indicates the context of the I/O codes (hotel, board, room and rates)  useContext(Boolean): Indicates if you want use context, or not, by default is true.  connectUser(String): This field is got only if the authorization header is of the type JWT. It is used for to change the user that has been set by default in the preload.  timeout(Int): Milliseconds before the connection is closed.  auditTransactions(Boolean): Returns all the transactions exchanged with the supplier.  businessRules(BusinessRulesInput): Business rules.  suppliers([SupplierInput!]): Array of suppliers. Each one contains its own code, settings and accesses.  plugins([PluginStepInput!]): Array of pluggins to execute.  \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelxmutation/",
	"title": "HotelXMutation",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type HotelXMutation {  book( input: HotelBookInput!, settings: HotelSettingsInput, ): HotelBookPayload    cancel( input: HotelCancelInput!, settings: HotelSettingsInput, ): HotelCancelPayload   }   Fields book(HotelBookPayload): Creates a new hotel booking consisting of an option of 1 or more rooms.  cancel(HotelCancelPayload): Cancels an existing hotel booking consisting of an option of 1 or more rooms.  \nRequire by Mutation:  Mutations are operations that change or update data in the server.  \n"
},
{
	"uri": "/travelgatex/reference/objects/hotelxquery/",
	"title": "HotelXQuery",
	"tags": [],
	"description": "",
	"content": " A Query is an entry point into the object graph.\nGraphQL Schema definition type HotelXQuery {  search(    token: String,     criteria: HotelCriteriaSearchInput,     settings: HotelSettingsInput,     filter: FilterInput,     ): HotelSearch    quote( criteria: HotelCriteriaQuoteInput!, settings: HotelSettingsInput, ): HotelQuote    booking( criteria: HotelCriteriaBookingInput!, settings: HotelSettingsInput, ): HotelBooking    searchStatusService: ServiceStatus!    quoteStatusService: ServiceStatus!    bookStatusService: ServiceStatus!    cancelStatusService: ServiceStatus!    bookingStatusService: ServiceStatus!    hotels(    codes: [String!],     language: String,     first: Int,     last: Int,     before: String,     after: String,     ): HotelConnection!   }   Fields search(HotelSearch): Available options of an hotel for a given date and itinerary. It does not filter different classes, times or fares. It will always retrieve all results returned by the suppliers. The availability request is very straight forward. It only requires the criteria of search (destination, travel dates and the number of pax in each room). But you must preload the other fields in our system by complete the fields absents.  quote(HotelQuote): Returns the total price and cancellation policies of the Option selected in the previous step (Search).  booking(HotelBooking): Returns detailed information about books, you can indicated a list of locators or a range date.  searchStatusService(ServiceStatus!): Returns status of the search service.  quoteStatusService(ServiceStatus!): Returns status of the quote service.  bookStatusService(ServiceStatus!): Returns status of the new booking service.  cancelStatusService(ServiceStatus!): Returns status of the cancellation service.  bookingStatusService(ServiceStatus!): TODO: me no understand... Returns status of the booking service.  hotels(HotelConnection!): Query to obtain Hotels  \nRequire by Query:    \n"
},
{
	"uri": "/admin/account/iam/",
	"title": "IAM",
	"tags": [],
	"description": "AdminX Information",
	"content": ""
},
{
	"uri": "/travelgatex/reference/scalars/id/",
	"title": "ID",
	"tags": [],
	"description": "",
	"content": " The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \u0026quot;4\u0026quot;) or integer (such as 4) input value will be accepted as an ID.\nGraphQL Schema definition scalar ID   Require by AccessInput:  AccessInput overwrites an existent access in our Back Office or creates a new one to be used in this search query only. An access object contains its own code, configuration and settings.  Hotel:  Hotel type  Node:    HotelData:  Hotel data  Media:    Amenity:    AmenityData:    Supplier:    SupplierData:    Access:    AccessData:    IdAccessConfigurationInput:    GroupCommonData:    Member:    MemberData:    Group:    GroupData:    API:    APIData:    Resource:    ResourceData:    Role:    RoleData:    CreateGroupInput:    DeleteMemberInput:    Organization:    OrganizationData:    Product:    ProductData:     "
},
{
	"uri": "/travelgatex/reference/inputobjects/idaccessconfigurationinput/",
	"title": "IdAccessConfigurationInput",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type IdAccessConfigurationInput {  id: ID!    isActive: Boolean!    code: String!    supplier: String!    configuration: ConfigurationInput   }   Fields id(ID!): access unique identifier  isActive(Boolean!): Indicates if the access is active.  code(String!): Arbitrary not unique identifier  supplier(String!): Supplier to which this access belongs  configuration(ConfigurationInput): Information required to access the supplier\u0026#39;s system.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/idgroupaccessinput/",
	"title": "IdGroupAccessInput",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type IdGroupAccessInput {  groupCodes: [String!]    accesses: [IdAccessConfigurationInput!]!   }   Fields groupCodes([String!]): identifier of the groups in which the access will be associated  accesses([IdAccessConfigurationInput!]!):   \n"
},
{
	"uri": "/travelgatex/reference/interfaces/information/",
	"title": "Information",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition interface Information {  description: String!    language: Language!   }   Fields description(String!):   language(Language!):   \nRequire by HotelData:  Hotel data  AmenityData:    \n"
},
{
	"uri": "/travelgatex/reference/scalars/int/",
	"title": "Int",
	"tags": [],
	"description": "",
	"content": " The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\nGraphQL Schema definition scalar Int   Require by PaxInput:  Pax object that contains the pax age.  HotelSettingsInput:  Settings that you can edit for this avail. Values are loaded by default in our Back Office.  BusinessRulesInput:  List of business rules to use as filter on the options.  SettingsBaseInput:  Contains the time out and business rules of a supplier or an access.  Pax:  Specifies the age pax. The range of what is considered an adult, infant or baby is particular to each supplier.  Occupancy:  Information about occupancy.  Room:  Contains the room information of the option returned.  Bed:  Contains information about a bed.  Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  CancelPenalty:  Contains information about a cancel penalty.  BookingRoom:    Timeout:    BusinessRules:  List of business rules to filter the options that you are interested.  ExpireDateInput:  The card expiration date  BookRoomInput:  Input BookRoom contains list of pax and the room\u0026#39;s reference.  BookPaxInput:  Input BookPax contains basic information abaout pax suach as name, surname and age.  TimeoutInput:    DefaultSettingsBusinessRulesInput:  Input delta price, indicates the price variation permitted by the client before failing the booking.  GroupData:     "
},
{
	"uri": "/travelgatex/reference/scalars/json/",
	"title": "JSON",
	"tags": [],
	"description": "",
	"content": " The JSON type makes sure that it is actually valid JSON and returns the value as a parsed JSON object/array instead of a string. In queries or mutations, JSON fields have to be specified with enclosing double quotes. Special characters have to be escaped: \u0026ldquo;{\u0026ldquo;int\u0026rdquo;: 1, \u0026ldquo;string\u0026rdquo;: \u0026ldquo;value\u0026rdquo;}\u0026ldquo;.\nGraphQL Schema definition scalar JSON   Require by AddOns:  Extra information about the option.   "
},
{
	"uri": "/travelgatex/reference/scalars/language/",
	"title": "Language",
	"tags": [],
	"description": "",
	"content": " The Language type represents Language values. A good example might be a Hotel Description Language. In queries or mutations, Language fields have to be specified in ISO 3166-1 alpha-2 format with enclosing double quotes \u0026ldquo;es\u0026rdquo;.\nGraphQL Schema definition scalar Language   Require by HotelCriteriaSearchInput:  Criteria of search contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.  CriteriaSearch:  Criteria of search contains destination, travel dates and the number of pax in each room.  HotelCriteriaQuoteInput:  The quote criteria contains the option reference id, block and language.  HotelCriteriaBookingInput:  Criteria of book contains basic information to find a book or books.  Information:    DefaultSettings:    HotelBookInput:  Criteria of book.  HotelCancelInput:  Cancellation Criteria.  DefaultSettingsInput:    HotelInput:     "
},
{
	"uri": "/travelgatex/reference/objects/location/",
	"title": "Location",
	"tags": [],
	"description": "",
	"content": " Location\nGraphQL Schema definition type Location {  address: String!    city: String!    zipCode: String!    country: Country!    geocode: Geocode!   }   Fields address(String!): Street Address  city(String!): City  zipCode(String!): Zip Code  country(Country!): Country ISO Code  geocode(Geocode!): Geocode  \nRequire by HotelData:  Hotel data  \n"
},
{
	"uri": "/travelgatex/reference/objects/map/",
	"title": "Map",
	"tags": [],
	"description": "",
	"content": " Map codes.\nGraphQL Schema definition type Map {  supplierCode: String!    codes: [String!]   }   Fields supplierCode(String!): Supplier code.  codes([String!]): Equivalences of the supplier for the client code.  \n"
},
{
	"uri": "/travelgatex/reference/objects/mapping/",
	"title": "Mapping",
	"tags": [],
	"description": "",
	"content": " Returns the mapping for a group.\nGraphQL Schema definition type Mapping {  contexts( contextCodes: [String!], supplierCodes: [String!], ): [MappingContext!]   }   Fields contexts([MappingContext!]): Returns the differents group contexts, you can filter by some contexts.  \nRequire by Query:    \n"
},
{
	"uri": "/travelgatex/reference/objects/mappingcontext/",
	"title": "MappingContext",
	"tags": [],
	"description": "",
	"content": " Returns the differents group contexts\nGraphQL Schema definition type MappingContext {  contextCode: String!    hotels( hotelCodes: [String!], ): [MappingEntity!]    rooms( roomCodes: [String!], ): [MappingEntity!]    rates( rateCodes: [String!], ): [MappingEntity!]    boards( BoardCodes: [String!], ): [MappingEntity!]   }   Fields contextCode(String!): Code of the context  hotels([MappingEntity!]): Mapping of hotels. Filter by hotel code.  rooms([MappingEntity!]): Mapping of rooms. Filter by room code.  rates([MappingEntity!]): Mapping of rates. Filter by rate code.  boards([MappingEntity!]): Mapping of boards. Filter by board code.  \n"
},
{
	"uri": "/travelgatex/reference/objects/mappingentity/",
	"title": "MappingEntity",
	"tags": [],
	"description": "",
	"content": " Mapping about client codes with the equivalence per supplier.\nGraphQL Schema definition type MappingEntity {  code: String!    maps: [Map!]   }   Fields code(String!): Client code  maps([Map!]): Supplier code. Filter by supplier.  \n"
},
{
	"uri": "/travelgatex/reference/objects/markup/",
	"title": "Markup",
	"tags": [],
	"description": "",
	"content": " Informs markup applied over supplier price.\nGraphQL Schema definition type Markup {  channel: String!    currency: Currency!    binding: Boolean!    net: Float!    gross: Float    exchange: Exchange!    rules: [Rule!]!   }   Fields channel(String!): channel of markup application.  currency(Currency!): Currency code indicating which currency should be paid. This information is mandatory.  binding(Boolean!): It indicates if the price indicated in the gross must be respected. That is, the customer can not sell the room / option at a price lower than that established by the supplier. This information is mandatory.  net(Float!): Indicates the net price that the customer must pay to the supplier plus the markup. This information is mandatory.  gross(Float): Indicates the retail price that the supplier sells to the customer plus the markup.  exchange(Exchange!): Informs about the currency of origin, and the rate applied over result. This information is mandatory.  rules([Rule!]!): Breakdown of the applied rules for a markup  \n"
},
{
	"uri": "/travelgatex/reference/enums/markupruletype/",
	"title": "MarkupRuleType",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition  enum MarkupRuleType{   PERCENT,    IMPORT,   }   Require by Rule:    \n"
},
{
	"uri": "/travelgatex/reference/objects/media/",
	"title": "Media",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Media {  code: ID!    mediaData: MediaData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!):   mediaData(MediaData):   error([Error!]): Errors that will lead the service to abort  createdAt(DateTime!): Create date  updatedAt(DateTime!): Update date  \nRequire by MediaEdge:  HotelList Edge definition  \n"
},
{
	"uri": "/travelgatex/reference/objects/mediaconnection/",
	"title": "MediaConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type MediaConnection {  edges: [MediaEdge]    pageInfo: PageInfo!   }   Fields edges([MediaEdge]):   pageInfo(PageInfo!):   \nRequire by HotelData:  Hotel data  \n"
},
{
	"uri": "/travelgatex/reference/objects/mediadata/",
	"title": "MediaData",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type MediaData {  type: ApplicationArea!    url: URI!   }   Fields type(ApplicationArea!):   url(URI!):   \nRequire by Media:    \n"
},
{
	"uri": "/travelgatex/reference/objects/mediaedge/",
	"title": "MediaEdge",
	"tags": [],
	"description": "",
	"content": " HotelList Edge definition\nGraphQL Schema definition type MediaEdge {  cursor: String!    node: Media   }   Fields cursor(String!):   node(Media):   \nRequire by MediaConnection:    \n"
},
{
	"uri": "/travelgatex/reference/objects/member/",
	"title": "Member",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Member {  code: ID!    memberData: MemberData    error: [Error!]    isActive: Boolean!    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!):   memberData(MemberData):   error([Error!]):   isActive(Boolean!):   createdAt(DateTime!):   updatedAt(DateTime!):   \nRequire by MemberEdge:    AdminMutation:    OrganizationData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/memberconnection/",
	"title": "MemberConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type MemberConnection {  edges: [MemberEdge]    pageInfo: PageInfo!   }   Fields edges([MemberEdge]):   pageInfo(PageInfo!):   \nRequire by GroupCommonData:    GroupData:    AdminQuery:    OrganizationData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/memberdata/",
	"title": "MemberData",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type MemberData {  id: ID!    code: ID!    roles: String    memberType: String    groups(    first: Int,     last: Int,     before: String,     after: String,     codes: [String!],     ): GroupConnection   }   Fields id(ID!):   code(ID!):   roles(String):   memberType(String):   groups(GroupConnection):   \nRequire by Member:    \n"
},
{
	"uri": "/travelgatex/reference/objects/memberedge/",
	"title": "MemberEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type MemberEdge {  cursor: String!    node: Member   }   Fields cursor(String!):   node(Member):   \nRequire by MemberConnection:    \n"
},
{
	"uri": "/travelgatex/reference/enums/membertype/",
	"title": "MemberType",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition  enum MemberType{   USER,    SERVICE_ACCOUNT,   }   Require by CreateMemberInput:    \n"
},
{
	"uri": "/travelgatex/reference/enums/method/",
	"title": "Method",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition  enum Method{   ADD,    DEL,   }   Require by UpdateMemberInput:    UpdateGroupInput:    \n"
},
{
	"uri": "/travelgatex/reference/schema/mutation/",
	"title": "Mutation",
	"tags": [],
	"description": "",
	"content": " Mutations are operations that change or update data in the server.\nGraphQL Schema definition type Mutation {  hotelX: HotelXMutation    hotelBook( input: HotelBookInput!, settings: HotelSettingsInput, ): HotelBookPayload    hotelCancel( input: HotelCancelInput!, settings: HotelSettingsInput, ): HotelCancelPayload    loadFile( input: String!, ): String!    createDefaultSettings( input: DefaultSettingsInput!, ): DefaultSettings    updateDefaultSettings( input: DefaultSettingsInput!, ): DefaultSettings    deleteDefaultSettings( input: String!, ): Boolean!   }   Fields hotelX(HotelXMutation):   hotelBook(HotelBookPayload): Creates a new hotel booking consisting of an option of 1 or more rooms.  hotelCancel(HotelCancelPayload): Cancels an existing hotel booking consisting of an option of 1 or more rooms.  loadFile(String!): Load mapping files for a group.  createDefaultSettings(DefaultSettings): Creates a defaultSettings for a given group  updateDefaultSettings(DefaultSettings): Updates a defaultSettings for a given group  deleteDefaultSettings(Boolean!): Deletes a defaultSettings for a given group  \n"
},
{
	"uri": "/travelgatex/reference/interfaces/node/",
	"title": "Node",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition interface Node {  code: ID!    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!): ID code  error([Error!]): Errors that will lead the service to abort  createdAt(DateTime!): Create date   updatedAt(DateTime!): Update date  \n"
},
{
	"uri": "/travelgatex/reference/objects/occupancy/",
	"title": "Occupancy",
	"tags": [],
	"description": "",
	"content": " Information about occupancy.\nGraphQL Schema definition type Occupancy {  id: Int!    paxes: [Pax!]!   }   Fields id(Int!): Unique ID room in this option.  paxes([Pax!]!): List of pax of this occupancy.  \n"
},
{
	"uri": "/travelgatex/reference/objects/organization/",
	"title": "Organization",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Organization {  code: ID!    organizationData: OrganizationData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!):   organizationData(OrganizationData):   error([Error!]):   createdAt(DateTime!):   updatedAt(DateTime!):   \nRequire by OrganizationEdge:    \n"
},
{
	"uri": "/travelgatex/reference/objects/organizationconnection/",
	"title": "OrganizationConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type OrganizationConnection {  edges: [OrganizationEdge]    pageInfo: PageInfo!   }   Fields edges([OrganizationEdge]):   pageInfo(PageInfo!):   \nRequire by AdminQuery:    \n"
},
{
	"uri": "/travelgatex/reference/objects/organizationdata/",
	"title": "OrganizationData",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type OrganizationData {  id: ID!    code: ID!    members(    codes: [String!],     first: Int,     last: Int,     before: String,     after: String,     ): MemberConnection    apis(    codes: [String!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    products(    codes: [String!],     first: Int,     last: Int,     before: String,     after: String,     ): ProductConnection    owner: Member!   }   Fields id(ID!):   code(ID!):   members(MemberConnection):   apis(APIConnection):   products(ProductConnection):   owner(Member!):   \nRequire by Organization:    \n"
},
{
	"uri": "/travelgatex/reference/objects/organizationedge/",
	"title": "OrganizationEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type OrganizationEdge {  cursor: String!    node: Organization   }   Fields cursor(String!):   node(Organization):   \nRequire by OrganizationConnection:    \n"
},
{
	"uri": "/admin/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Admin Information",
	"content": "This page shows you how to perform basic hotel book using GraphQL Playground.\n"
},
{
	"uri": "/flightx/overview/",
	"title": "Overview",
	"tags": [],
	"description": "FlightX Information",
	"content": "This page shows you how to perform basic hotel book using GraphQL Playground.\n"
},
{
	"uri": "/getting-started/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Learn The Basics",
	"content": " Become a TravelgateX Partner The first step towards building your next travel API is to become a TravelgateX registered partner.\nAt this moment, please contact us in order to become a partner.\nWe will be publishing a registration website so each developer can register for an account with us. Please bear with us.\nProduct Quick Start Although there\u0026rsquo;s only one endpoint, our GraphQL API models all the products and services we offer. Please navigate to the desired product documentation in order to start building your app.\n HotelX: Next generation hotel search \u0026amp; booking API. ConnectX Flights: Next generation NDC compliant flight search \u0026amp; booking API. Stats: All the requests sent and received, their response times and status codes. Insights: Become a true data-first decision maker by leveraging our rich Insights API. All the requests, all the searches, everything you\u0026rsquo;ve made with us available here. Mappea: Collaborative Hotel Mapping. Use this API to map your sellers or to make that everything you have mapped is accurate.  Documentation Documentation is generated from GraphQL schema.You can use multiple columns and keyboard-based navigation via the Playground\n  Get Engaged You are not alone! The API is designed to be very intuitive and easy to read. Nevertheless, although we strive to keep things simple, some concepts can be confusing and we understand learning a new API can be overwhelming. There are many ways of getting help. The Playground contains the API\u0026rsquo;s documentation. As an alternative you can get help from the community or raise a ticket and our support staff will be delighted to solve any doubts, complaints or suggestions you might have.\nCommunity We use discourse to run our community forum. It\u0026rsquo;s completely free and you can access it here. Please use your own travelgatex.com username and password in order to log in discourse.\nJira Service Desk Our Customer Care Team runs the show using Jira Service Desk. Please raise any questions, complaints, suggestions or any other issues here.\nThe login has been given to you together in the welcome pack. Let us know if you haven\u0026rsquo;t received it or can\u0026rsquo;t find it so we can send it to your email address.\n"
},
{
	"uri": "/hotelx/overview/",
	"title": "Overview",
	"tags": [],
	"description": "HotelX Information",
	"content": " HotelX is the ultimate connectivity solution, it not only connects you to multiple Sellers, but also adds business logic solving most of the problems commonly found in the travel business in an elegant and efficient way.\n Each and every layer discribed in the this figure is explained as follows:\nBusiness Logic We\u0026rsquo;ve added a new layer of business logic in front of the pure transformation API, very fast and totally scalable. It\u0026rsquo;s very flexible, everything can be overridden at the request level, or be left as is. The API is completely written in Go and Redis for performance and scalability. There\u0026rsquo;s also the possibility of writing plugins (in Go) in order to add any logic or add an extra functionality. The main funcionalities of the business logic layer includes, but not limited to:\n Configuration and access management Hotel, Room and Board Mappings Sort \u0026amp; Filter results Add pricing/markups Currency Exchange Plugins Execution  Plugins HotelX introduces a new concept to the industry: Plugins. In a nutshell, a plugin is a piece of code that is executed inside our application. There are a few points in the request lifetime where anyone can develop a plugin. It receives the request or response as an input and outputs the changed request or response. Plugins are a core package in the Go Programming language and more info about it can be found here.\nFor more information and how to write and build plugins please go to: Hotel.\nTransformation The transformation layer takes care of the actual trasformation into the Seller\u0026rsquo;s specific format and back. It generates requests to the supplier in an optimal way, we call it Optimal Connector. The Optimal connector is the result of years of interacting with the Sellers and learning from them and from experience how to send requests to them. Each different supplier has a different logic, and is more efficient in one way. We use this now how to send exactly the request which the supplier will handle more effectively, being that a per hotel list, or destination or anythign that over the time we0ve learned from their responses. The transformation layer keeps each and every Seller integration in an optimal level. If a new version is released, we will update our integration. Our team is constantly monitoring the traffic, both automatically and manually in order to make sure the connectivity just works.\n[Optional] Cache Layer Our cache layer, called Speed does exactly what the name says, it caches results so that we don\u0026rsquo;t knock out the Sellers. From a high level perspective it is just a cache. Our secret sauce is how we expire the cache. We use advanced Machine Learning models to predict how long each cached item will be valid from taking into account a large number of variables set in the request. The cache is hosted in Google\u0026rsquo;s BigTable, a \u0026ldquo;Massively Scalable NoSQL\u0026rdquo; database built with performance and scalability in mind.\nSellers Each and every Seller works in a different way. Most are old, legacy SOAP APIs, very few are RESTful APIs and none of them is GraphQL. We have developed them all, and suffered learned from all of them.\nWe connect seemlessly to more than 600 Sellers.\n"
},
{
	"uri": "/hotelx/plugins/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Plugins workflow execution",
	"content": " Introduction Plugins are custom code, executed in HotelX servers, that add or modify specific features. Partner can develop custom plugins, but in most cases, HotelX offers enough basic plugins to use.\nFlows HotelX query or mutation determine what flow is executed. Plugins can be executed in different flows:\n search quote hotelBook hotelCancel  Steps Step is the minium container where plugins are executed sequentially.\n   Step When is executed     Request After Buyer requests message to HotelX.   Request Access Before send request to Supplier using Access and after Accesses has been calculated.   Response Option After Supplier responds message. For every option returned.   Response Access After all Access options has been responded.   Response Before HotelX responds message to to Buyer.    Plugin Types Plugin types supported by HotelX:\n Pre Step: First execution on every step. Hotel Map: Hotel mapping codes. Board Map: Board mapping codes. Room Map: Room mapping codes. Currency Conversion: Currency rate conversion. Markup: Markups to supplier price. Aggregation: Aggregate multiple supplier options. Post Step: Last execution on every step.  Plugin Context Execution Once message enters on HotelX it flows over different flows and steps. That\u0026rsquo;s why plugins are executed in different contexts.\nContext allows:\n Read objects involved in current query and/or mutations. Read objects available in all HotelX operations.  With context information developers can personalize plugin features, more information about plugin development can be found here.\nPlugin Step Execution HotelX determine the order and plugin types executed for each step.\n    search quote hotelBook hotelCancel     Request Pre Step\nHotel Map\nPost Step Pre Step\nPost Step Pre Step\nPost Step Pre Step Post Step   Request Access Pre Step Post Step Pre Step Post Step Pre Step Post Step Pre Step Post Step   Response Option Pre Step\nHotel Map\nBoard Map\nRoom Map\nCurrency Conversion\nMarkup\nAggregation\nPost Step      Response Access Pre Step\nPost Step Pre Step\nHotel Map\nBoard Map\nRoom Map\nCurrency Conversion\nMarkup\nPost Step Pre Step\nHotel Map\nBoard Map\nRoom Map\nCurrency Conversion\nPost Step Pre Step\nHotel Map\nBoard Map\nRoom Map\nCurrency Conversion\nPost Step   Response Pre Step\nAggregation\nPost Step Pre Step Post Step Pre Step Post Step Pre Step Post Step    "
},
{
	"uri": "/insightsx/overview/",
	"title": "Overview",
	"tags": [],
	"description": "FlightX Information",
	"content": "This page shows you how to perform basic hotel book using GraphQL Playground.\n"
},
{
	"uri": "/mappeax/overview/",
	"title": "Overview",
	"tags": [],
	"description": "FlightX Information",
	"content": "This page shows you how to perform basic hotel book using GraphQL Playground.\n"
},
{
	"uri": "/statsx/overview/",
	"title": "Overview",
	"tags": [],
	"description": "StatsX Information",
	"content": "This page shows you how to perform basic hotel book using GraphQL Playground.\n"
},
{
	"uri": "/travelgatex/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Platform information",
	"content": " This page provides an overview of travelgateX platform. It\u0026rsquo;s used as reference\nGraphQL Gateway ConnectX is the first-in-the-industry travel API completely based in GraphQL. Most travel APIs are old legacy XML Soap APIs. We know that, because we\u0026rsquo;ve integrated too many of them. The problems with that technology are well-known and we won\u0026rsquo;t get into details here. One of the things we really like about GraphQL, is that each client is ultimately responsible over what it wants to be returned. For the full reasoning behind working with GraphQL please click here.\nThe architecture doest not differ from many modern APIs. There\u0026rsquo;s an API Gateway, which takes care of basic stuff like authentication and authorization. It also acts like a shield protecting us from DoS attacks and handles throttling. Analytics takes also an important part in the gateway. Moreover, our Gateway is the only endpoint to access all of our APIs.\nIt is written in NodeJS, fast, stable, secure and fault tolerant load balanced between many datacenters from 4 different cloud providers, namely Microsoft Azure, Google Cloud Platform, Hetzner and TotalUptime.\nUsing the API The two types of allowed operations in TravelgateX GraphQL API are:\n Queries Mutations  For more information about using a GraphQL API click here.\nGraphQL Endpoint One of the great things we love about GraphQL is that there\u0026rsquo;s only one single endpoint. Use this endpoint for all operations you want to perform:\nhttps://api.travelgatex.com Communicate with Server To communicate with the GraphQL server, you\u0026rsquo;ll need an access token with the right scopes. Follow the steps in Security Overview in order to create a token and how use it.\nMaking Requests Because GraphQL operations consist of multiple operations and schemas, we recommend using the Explorer to make GraphQL calls. There are some alternatives to use GraphQL builtin explorer like GraphQL Playground. You can also use cURL or any other HTTP-speaking library.\nAll LIVE traffic MUST enable GZIP compression in the HTTP header Accept-Encoding: gzip  To query GraphQL using cURL, make a POST request with a JSON payload. The payload must contain a string called query:\ncurl -X\\ POST\\ -H \u0026quot;Content-Type: application/json\u0026quot; \\ -H \u0026quot;Authorization: Apikey q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\u0026quot; \\ --data '{\u0026quot;query\u0026quot;:\u0026quot;{searchStatusService{code description}}\u0026quot;}' \\ --compressed \\ https://api.travelgatex.com  View the Graph Using graphql-voyager, we represent our GraphQL API as an interactive graph.\n  Quick navigation on graph Left panel which provides more detailed information about every type \u0026ldquo;Skip Relay\u0026rdquo; option that simplifies graph by removing Relay wrapper classes Ability to choose any type to be a root of the graph   Open in a new tab here\n  Examples We share GraphQL Playgrounds with common scenarios using products. Playgrounds are shared in product reference sections, for example you can use ConnectX Hotel Playground\nIt\u0026rsquo;s important to use the correct Headers. If you want to use test headers, insert \u0026quot;Authorization\u0026quot;:\u0026quot;Apikey q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\u0026quot;\nYou can easily share your Queries with others by clicking on the \u0026ldquo;Share\u0026rdquo; button and sharing the generated link. You can think about GraphQL Bin like Pastebin for your GraphQL queries including the context (endpoint, HTTP headers, open tabs etc).\nConventions TravelgateX follow some conventions about schema definition:\n Relay schema requirements Definition of custom scalar types Token Based Authentication  Relay Implementation TravelgateX uses Relay schema requirements for own Resources. Other resources, like Seller search response, are not modeled with Relay practices.\nRelay helps TravelgateX API in order to standarize:\n Standards for querying paginated collections (\u0026ldquo;Connections\u0026rdquo; and \u0026ldquo;Edges\u0026rdquo;) Identifying objects directly from the root of a query (avoiding long nested queries) Provide mutation input data  "
},
{
	"uri": "/travelgatex/reference/objects/pageinfo/",
	"title": "PageInfo",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type PageInfo {  hasNextPage: Boolean!    hasPreviousPage: Boolean!    startCursor: String!    endCursor: String!   }   Fields hasNextPage(Boolean!):   hasPreviousPage(Boolean!):   startCursor(String!):   endCursor(String!):   \nRequire by HotelConnection:  HotelList definition  MediaConnection:    AmenityConnection:    AccessConnection:    MemberConnection:    GroupConnection:    APIConnection:    ResourceConnection:    RoleConnection:    OrganizationConnection:    ProductConnection:    \n"
},
{
	"uri": "/travelgatex/reference/objects/parameter/",
	"title": "Parameter",
	"tags": [],
	"description": "",
	"content": " Parameters for additional information for the supplier\u0026rsquo;s configuration.\nGraphQL Schema definition type Parameter {  key: String!    value: String!   }   Fields key(String!): Contains the keyword/Id to identify a parameter. This information is mandatory.  value(String!): Contains the parameter values. This information is mandatory.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/parameterinput/",
	"title": "ParameterInput",
	"tags": [],
	"description": "",
	"content": " Parameters for additional information for the supplier\u0026rsquo;s configuration.\nGraphQL Schema definition type ParameterInput {  key: String!    value: String!   }   Fields key(String!): Contains the keyword/Id to identify a parameter.  value(String!): Contains the parameter values.  \n"
},
{
	"uri": "/travelgatex/reference/objects/pax/",
	"title": "Pax",
	"tags": [],
	"description": "",
	"content": " Specifies the age pax. The range of what is considered an adult, infant or baby is particular to each supplier.\nGraphQL Schema definition type Pax {  age: Int!   }   Fields age(Int!): Specifies the age pax.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/paxinput/",
	"title": "PaxInput",
	"tags": [],
	"description": "",
	"content": " Pax object that contains the pax age.\nGraphQL Schema definition type PaxInput {  age: Int!   }   Fields age(Int!): Pax age.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/paymentcardinput/",
	"title": "PaymentCardInput",
	"tags": [],
	"description": "",
	"content": " Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information\nGraphQL Schema definition type PaymentCardInput {  cardType: String!    holder: HolderInput!    number: String!    CVC: String!    expire: ExpireDateInput!   }   Fields cardType(String!): Indicates the card type.  holder(HolderInput!): Contains owner\u0026#39;s name  number(String!): Contains credit card number  CVC(String!): Contains credit card CVC  expire(ExpireDateInput!): Contains credit card expiration date  \nRequire by HotelBookInput:  Criteria of book.  \n"
},
{
	"uri": "/travelgatex/reference/enums/paymenttype/",
	"title": "PaymentType",
	"tags": [],
	"description": "",
	"content": " Options payment type\nGraphQL Schema definition  enum PaymentType{   MERCHANT,    DIRECT,    CARD_BOOKING,    CARD_CHECK_IN,   }   Require by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/pluginstepinput/",
	"title": "PluginStepInput",
	"tags": [],
	"description": "",
	"content": " Plugin to execute.\nGraphQL Schema definition type PluginStepInput {  step: PluginStepType!    plugins: [PluginsInput!]   }   Fields step(PluginStepType!): Indicates where the plugin will be executed.  plugins([PluginsInput!]):   \n"
},
{
	"uri": "/travelgatex/reference/enums/pluginsteptype/",
	"title": "PluginStepType",
	"tags": [],
	"description": "",
	"content": " Plugin Step Type\nGraphQL Schema definition  enum PluginStepType{   AGGREGATE_ACCESS,    AGGREGATE,    MAPPING_ROOM,    MARKUP,   }   Require by PluginStepInput:  Plugin to execute.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/pluginsinput/",
	"title": "PluginsInput",
	"tags": [],
	"description": "",
	"content": " Plugin to execute.\nGraphQL Schema definition type PluginsInput {  name: String!    parameters: [ParameterInput!]   }   Fields name(String!): Name plugin to execute.  parameters([ParameterInput!]): Plugin\u0026#39;s parameters  \n"
},
{
	"uri": "/travelgatex/reference/objects/price/",
	"title": "Price",
	"tags": [],
	"description": "",
	"content": " Price indicates the value of the room/option. Supplements and/or surcharges could be or not included into the price, will be verified with the nodes Supplements/Surcharges.\nGraphQL Schema definition type Price {  currency: Currency!    binding: Boolean!    net: Float!    gross: Float    exchange: Exchange!    markups: [Markup!]   }   Fields currency(Currency!): Currency code indicating which currency should be paid. This information is mandatory.  binding(Boolean!): It indicates if the price indicated in the gross must be respected. That is, the customer can not sell the room / option at a price lower than that established by the supplier. This information is mandatory.  net(Float!): Indicates the net price that the customer must pay to the supplier. This information is mandatory.  gross(Float): Indicates the retail price that the supplier sells to the customer.  exchange(Exchange!): Informs about the currency of origin, and the rate applied over result returned by the supplier. This information is mandatory.  markups([Markup!]): Informs markup applied over supplier price.  \nRequire by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description.  RoomPrice:  Specifies the room price.  PriceBreakdown:  Information about daily price.  Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  Surcharge:  Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.  HotelOptionQuote:  Contains information about quote.  HotelBookingDetail:  Contains information about booking.  BookingRoom:    HotelCancelDetail:  Contains information about cancel  \n"
},
{
	"uri": "/travelgatex/reference/objects/pricebreakdown/",
	"title": "PriceBreakdown",
	"tags": [],
	"description": "",
	"content": " Information about daily price.\nGraphQL Schema definition type PriceBreakdown {  effectiveDate: Date!    expireDate: Date!    price: Price!   }   Fields effectiveDate(Date!): Start date in which the price becomes effective.  expireDate(Date!): Expire date of price.  price(Price!): Specifies the daily price.  \n"
},
{
	"uri": "/travelgatex/reference/enums/pricetype/",
	"title": "PriceType",
	"tags": [],
	"description": "",
	"content": " Price Type\nGraphQL Schema definition  enum PriceType{   GROSS,    NET,    AMOUNT,   }   "
},
{
	"uri": "/travelgatex/reference/interfaces/priceable/",
	"title": "Priceable",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition interface Priceable {  currency: Currency!    binding: Boolean!    net: Float!    gross: Float    exchange: Exchange!   }   Fields currency(Currency!): Specifies the currency.  binding(Boolean!): Is binding.  net(Float!): Specifies the import net.  gross(Float): Specifies the import gross.  exchange(Exchange!): Specifies the exchange.  \n"
},
{
	"uri": "/travelgatex/reference/objects/product/",
	"title": "Product",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Product {  code: ID!    productData: ProductData!    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!):   productData(ProductData!):   error([Error!]):   createdAt(DateTime!):   updatedAt(DateTime!):   \nRequire by ProductEdge:    \n"
},
{
	"uri": "/travelgatex/reference/objects/productconnection/",
	"title": "ProductConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type ProductConnection {  edges: [ProductEdge]    pageInfo: PageInfo!   }   Fields edges([ProductEdge]):   pageInfo(PageInfo!):   \nRequire by AdminQuery:    OrganizationData:    \n"
},
{
	"uri": "/travelgatex/reference/objects/productdata/",
	"title": "ProductData",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type ProductData {  id: ID!    code: ID!    apis(    codes: [String!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection   }   Fields id(ID!):   code(ID!):   apis(APIConnection):   \nRequire by Product:    \n"
},
{
	"uri": "/travelgatex/reference/objects/productedge/",
	"title": "ProductEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type ProductEdge {  cursor: String!    node: Product   }   Fields cursor(String!):   node(Product):   \nRequire by ProductConnection:    \n"
},
{
	"uri": "/travelgatex/reference/objects/promotion/",
	"title": "Promotion",
	"tags": [],
	"description": "",
	"content": " Information about room promotions(offers).\nGraphQL Schema definition type Promotion {  code: String!    name: String    effectiveDate: Date    expireDate: Date   }   Fields code(String!): Specifies the promotion code.  name(String): Specifies the promotion name.  effectiveDate(Date): Promotion effective date.  expireDate(Date): Promotion expire date.  \n"
},
{
	"uri": "/travelgatex/reference/schema/query/",
	"title": "Query",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Query {  hotelX: HotelXQuery    search: Search!    quote: Quote!    booking: Booking    defaultSettings( groupCode: String!, ): DefaultSettings    mapping( groupCode: String!, ): Mapping!   }   Fields hotelX(HotelXQuery):   search(Search!): Available options for a given date and itinerary.  quote(Quote!): Returns the total price and cancellation policies of the Option selected in the previous step (Search).  booking(Booking): Returns detailed information about books.  defaultSettings(DefaultSettings): Reads defaultSettings of the given group  mapping(Mapping!): Returns the mapping for a group, is necessary specify the group.  \n"
},
{
	"uri": "/getting-started/quickstart/",
	"title": "Quickstart",
	"tags": [],
	"description": "Try the API now",
	"content": " Try Now Try the TravelgateX API in a few seconds. Search for a hotel, quote and book and by following the steps below.\nBecome a TravelgateX Partner The first step towards building your next travel API is to become a TravelgateX registered partner.\nAt this moment, please contact us in order to become a partner.\nWe will be publishing a registration website so each developer can register for an account with us. Please bear with us.\nProduct Quick Start Although there\u0026rsquo;s only one endpoint, our GraphQL API models all the products and services we offer. Please navigate to the desired product documentation in order to start building your app.\n ConnectX Hotel: Next generation hotel search \u0026amp; booking API. ConnectX Flights: Next generation NDC compliant flight search \u0026amp; booking API. Stats: All the requests sent and received, their response times and status codes. Insights: Become a true data-first decision maker by leveraging our rich Insights API. All the requests, all the searches, everything you\u0026rsquo;ve made with us available here. Mappea: Collaborative Hotel Mapping. Use this API to map your sellers or to make that everything you have mapped is accurate.  Documentation Documentation is generated from GraphQL schema.You can use multiple columns and keyboard-based navigation via the Playground\n  Get Engaged You are not alone! The API is designed to be very intuitive and easy to read. Nevertheless, although we strive to keep things simple, some concepts can be confusing and we understand learning a new API can be overwhelming. There are many ways of getting help. The Playground contains the API\u0026rsquo;s documentation. As an alternative you can get help from the community or raise a ticket and our support staff will be delighted to solve any doubts, complaints or suggestions you might have.\nCommunity We use discourse to run our community forum. It\u0026rsquo;s completely free and you can access it here. Please use your own travelgatex.com username and password in order to log in discourse.\nJira Service Desk Our Customer Care Team runs the show using Jira Service Desk. Please raise any questions, complaints, suggestions or any other issues here.\nThe login has been given to you together in the welcome pack. Let us know if you haven\u0026rsquo;t received it or can\u0026rsquo;t find it so we can send it to your email address.\n"
},
{
	"uri": "/hotelx/resources/quotas-limits/",
	"title": "Quotas &amp; Limits",
	"tags": [],
	"description": "",
	"content": "ConnectX Hotel limits the maximum rate of requests adn graph deep. Specific policies vary depending on resource availability, user profile, service usage history, and other factors, and are subject to change without notice.\n"
},
{
	"uri": "/travelgatex/reference/objects/quote/",
	"title": "Quote",
	"tags": [],
	"description": "",
	"content": " Returns the total price and cancellation policies of the Option selected in the previous step (Search).\nGraphQL Schema definition type Quote {  hotel( criteria: HotelCriteriaQuoteInput!, settings: HotelSettingsInput, ): HotelQuote   }   Fields hotel(HotelQuote): Returns the total price and cancellation policies of the Option selected in the previous step (Search).  \nRequire by Query:    \n"
},
{
	"uri": "/travelgatex/reference/objects/rateplan/",
	"title": "RatePlan",
	"tags": [],
	"description": "",
	"content": " Information about the rate of the option returned.\nGraphQL Schema definition type RatePlan {  code: String!    name: String    effectiveDate: Date    expireDate: Date   }   Fields code(String!): Specifies the rate code.  name(String): Specifies the rate name.  effectiveDate(Date): Start date in which the rate becomes effective.  expireDate(Date): Expire date of the rate.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/raterulesfilterinput/",
	"title": "RateRulesFilterInput",
	"tags": [],
	"description": "",
	"content": " If requested, only options with the specified rateRules will be returned\nGraphQL Schema definition type RateRulesFilterInput {  includes: [RateRulesType!]    excludes: [RateRulesType!]   }   Fields includes([RateRulesType!]): if includes not nil: only options without rate rules and options with rate rules found in includes will be returned  excludes([RateRulesType!]): if excludes not nil: only options without rate rules and options with rate rules that haven\u0026#39;t been sent in excludes will be returned  \nRequire by FilterInput:  Filter that selects the filter criteria which will be used in this availability. Currently you can only choose the accesses. You must choose one of them, include or exclude, or the other alternative isn\u0026#39;t specified anything. If input both, you will receive a validation error that indicates this error.  \n"
},
{
	"uri": "/travelgatex/reference/enums/raterulestype/",
	"title": "RateRulesType",
	"tags": [],
	"description": "",
	"content": " Rate Rules\nGraphQL Schema definition  enum RateRulesType{   PACKAGE,    OLDER55,    OLDER60,    OLDER65,    CANARY_RESIDENT,    BALEARIC_RESIDENT,    LARGE_FAMILY,    HONEYMOON,    PUBLIC_SERVANT,    UNEMPLOYED,    NORMAL,    NON_REFUNDABLE,   }   "
},
{
	"uri": "/travelgatex/reference/objects/reference/",
	"title": "Reference",
	"tags": [],
	"description": "",
	"content": " Contains reference codes.\nGraphQL Schema definition type Reference {  client: String    supplier: String   }   Fields client(String): Client reference booking  supplier(String): Supplier reference booking  \nRequire by HotelBookingDetail:  Contains information about booking.  HotelCancelDetail:  Contains information about cancel  \n"
},
{
	"uri": "/travelgatex/reference/objects/requeststats/",
	"title": "RequestStats",
	"tags": [],
	"description": "",
	"content": " Contains internal information.\nGraphQL Schema definition type RequestStats {  total: Stat!    validation: Stat!    process: Stat!    Accesses: [StatAccess!]!    External: String!   }   Fields total(Stat!):   validation(Stat!):   process(Stat!):   Accesses([StatAccess!]!):   External(String!):   \nRequire by HotelSearch:  Results of Avail Hotel. Contains all the available options for a given date and itinerary.  Response:    HotelQuote:    HotelBooking:    HotelBookPayload:    HotelCancelPayload:    \n"
},
{
	"uri": "/travelgatex/reference/objects/resort/",
	"title": "Resort",
	"tags": [],
	"description": "",
	"content": " Contains information about the Resort.\nGraphQL Schema definition type Resort {  code: String!    name: String    description: String   }   Fields code(String!): Specifies the resort code.  name(String): Specifies the resort name.  description(String): Specifies the resort description.  \nRequire by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  \n"
},
{
	"uri": "/travelgatex/reference/objects/resource/",
	"title": "Resource",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Resource {  code: ID!    error: [Error!]    resourceData: ResourceData    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!):   error([Error!]):   resourceData(ResourceData):   createdAt(DateTime!):   updatedAt(DateTime!):   \nRequire by ResourceEdge:    \n"
},
{
	"uri": "/travelgatex/reference/objects/resourceconnection/",
	"title": "ResourceConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type ResourceConnection {  edges: [ResourceEdge]    pageInfo: PageInfo!   }   Fields edges([ResourceEdge]):   pageInfo(PageInfo!):   \nRequire by APIData:    RoleData:    AdminQuery:    \n"
},
{
	"uri": "/travelgatex/reference/objects/resourcedata/",
	"title": "ResourceData",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type ResourceData {  id: ID!    code: ID!    apis(    first: Int,     last: Int,     before: String,     after: String,     codes: [String!],     ): APIConnection    roles(    first: Int,     last: Int,     before: String,     after: String,     codes: [String!],     ): RoleConnection   }   Fields id(ID!):   code(ID!):   apis(APIConnection):   roles(RoleConnection):   \nRequire by Resource:    \n"
},
{
	"uri": "/travelgatex/reference/objects/resourceedge/",
	"title": "ResourceEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type ResourceEdge {  cursor: String!    node: Resource   }   Fields cursor(String!):   node(Resource):   \nRequire by ResourceConnection:    \n"
},
{
	"uri": "/travelgatex/reference/interfaces/response/",
	"title": "Response",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition interface Response {  stats( token: String!, ): RequestStats    auditData: AuditData    errors: [Error!]    warnings: [Warning!]   }   Fields stats(RequestStats): Application stats in string format  auditData(AuditData): Data sent \u0026amp; received in the supplierâ€™s original format.  errors([Error!]): Errors that lead the service to stop  warnings([Warning!]): Potentially harmful situations or errors that do not stop the service  \n"
},
{
	"uri": "/travelgatex/reference/objects/role/",
	"title": "Role",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Role {  code: ID!    error: [Error!]    roleData: RoleData    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!):   error([Error!]):   roleData(RoleData):   createdAt(DateTime!):   updatedAt(DateTime!):   \nRequire by RoleEdge:    \n"
},
{
	"uri": "/travelgatex/reference/objects/roleconnection/",
	"title": "RoleConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type RoleConnection {  edges: [RoleEdge]    pageInfo: PageInfo!   }   Fields edges([RoleEdge]):   pageInfo(PageInfo!):   \nRequire by ResourceData:    AdminQuery:    \n"
},
{
	"uri": "/travelgatex/reference/objects/roledata/",
	"title": "RoleData",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type RoleData {  id: ID!    code: ID!    label: String!    isCreate: Boolean!    isRead: Boolean!    isUpdate: Boolean!    isDelete: Boolean!    isEnable: Boolean!    isExecutable: Boolean!    isEspecial: Boolean!    especial: String    resources(    first: Int,     last: Int,     before: String,     after: String,     codes: [String!],     ): ResourceConnection   }   Fields id(ID!):   code(ID!):   label(String!):   isCreate(Boolean!):   isRead(Boolean!):   isUpdate(Boolean!):   isDelete(Boolean!):   isEnable(Boolean!):   isExecutable(Boolean!):   isEspecial(Boolean!):   especial(String):   resources(ResourceConnection):   \nRequire by Role:    \n"
},
{
	"uri": "/travelgatex/reference/objects/roleedge/",
	"title": "RoleEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type RoleEdge {  cursor: String!    node: Role   }   Fields cursor(String!):   node(Role):   \nRequire by RoleConnection:    \n"
},
{
	"uri": "/travelgatex/reference/objects/room/",
	"title": "Room",
	"tags": [],
	"description": "",
	"content": " Contains the room information of the option returned.\nGraphQL Schema definition type Room {  occupancyRefId: Int!    code: String!    description: String    refundable: Boolean    units: Int    roomPrice: RoomPrice!    beds: [Bed!]    ratePlans: [RatePlan!]    promotions: [Promotion!]   }   Fields occupancyRefId(Int!): ID reference to the occupancy.  code(String!): Indicates the room code.  description(String): Description about the room.  refundable(Boolean): Identifies if the room is refundable or not.  units(Int): Number of rooms available with the same type.  roomPrice(RoomPrice!): Specifies the room price.  beds([Bed!]): List of beds.  ratePlans([RatePlan!]): Daily break downs rate plan.  promotions([Promotion!]): Daily break downs promotions.  \n"
},
{
	"uri": "/travelgatex/reference/objects/roomcriteria/",
	"title": "RoomCriteria",
	"tags": [],
	"description": "",
	"content": " Occupancy for a room. It contains a list of pax ages.\nGraphQL Schema definition type RoomCriteria {  paxes: [Pax!]!   }   Fields paxes([Pax!]!): Array of pax ages. The number of items in the array will indicate the pax occupancy.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/roominput/",
	"title": "RoomInput",
	"tags": [],
	"description": "",
	"content": " Occupancy for a room. It contains a list of pax ages.\nGraphQL Schema definition type RoomInput {  paxes: [PaxInput!]!   }   Fields paxes([PaxInput!]!): Array of pax ages. The number of items in the array will indicate the pax occupancy.  \n"
},
{
	"uri": "/travelgatex/reference/objects/roomprice/",
	"title": "RoomPrice",
	"tags": [],
	"description": "",
	"content": " Specifies the room price.\nGraphQL Schema definition type RoomPrice {  price: Price!    breakdown: [PriceBreakdown!]   }   Fields price(Price!): Total price for all days.  breakdown([PriceBreakdown!]): Daily break downs price.  \nRequire by Room:  Contains the room information of the option returned.  \n"
},
{
	"uri": "/travelgatex/reference/objects/rule/",
	"title": "Rule",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Rule {  id: String!    name: String    type: MarkupRuleType!    value: Float!   }   Fields id(String!): rule identifier  name(String): rule name  type(MarkupRuleType!): type of the value  value(Float!): value applied by this rule  \n"
},
{
	"uri": "/travelgatex/data-automation/sftp/",
	"title": "SFTP",
	"tags": [],
	"description": "Secure File Transfer Protocol (SFTP)",
	"content": " Introduction SFTP, or Secure File Transfer Protocol, is a network protocol that provides completely secure access, transfer, and management of data files programmatically. This protocol is used by the largest organizations in Finance, Technology, and Consulting to transfer data such as Personally Identifiable Information (PII) to ensure it remains 100% secure.\nSecurity To ensure the security of your data, we adhere to the highest standards in data security. The advanced security measures we take include:\n Password-based authentication. IP Whitelisting: We whitelist the IP Addresses you will be accessing your SFTP server from to ensure you, and only you, have access. Anomaly Detection: To ensure no loss of data, we detect anomalies in your uploads to the SFTP server and warn you when an upload would significantly change your account. Encryption: Data is encrypted, keeping your information safe and private.  Setup To get your FTP Credential Details raise a customer care request in Jira Service Desk.\n"
},
{
	"uri": "/travelgatex/reference/schema/",
	"title": "Schema",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/travelgatex/reference/objects/search/",
	"title": "Search",
	"tags": [],
	"description": "",
	"content": " Available options for a given date and itinerary. It does not filter different classes, times or fares. It will always retrieve all results returned by the suppliers. The availability request is very straight forward.\nGraphQL Schema definition type Search {  hotel(    token: String,     criteria: HotelCriteriaSearchInput,     settings: HotelSettingsInput,     filter: FilterInput,     ): HotelSearch   }   Fields hotel(HotelSearch): Available options of an hotel for a given date and itinerary. It does not filter different classes, times or fares. It will always retrieve all results returned by the suppliers. The availability request is very straight forward. It only requires the criteria of search (destination, travel dates and the number of pax in each room). But you must preload the other fields in our system by complete the fields absents.  \nRequire by Query:    \n"
},
{
	"uri": "/travelgatex/reference/objects/servicestatus/",
	"title": "ServiceStatus",
	"tags": [],
	"description": "",
	"content": " Indicates the status of the service\nGraphQL Schema definition type ServiceStatus {  code: String    type: String    description: String   }   Fields code(String): Status code  type(String): Status type  description(String): Status description  \nRequire by HotelXQuery:  A Query is an entry point into the object graph.  \n"
},
{
	"uri": "/travelgatex/reference/enums/servicetype/",
	"title": "ServiceType",
	"tags": [],
	"description": "",
	"content": " Service Type\nGraphQL Schema definition  enum ServiceType{   SKI_PASS,   }   "
},
{
	"uri": "/travelgatex/reference/inputobjects/settingsbaseinput/",
	"title": "SettingsBaseInput",
	"tags": [],
	"description": "",
	"content": " Contains the time out and business rules of a supplier or an access.\nGraphQL Schema definition type SettingsBaseInput {  timeout: Int    auditTransactions: Boolean    businessRules: BusinessRulesInput   }   Fields timeout(Int): Milliseconds before the connection is closed.  auditTransactions(Boolean): Specifies if transactions exchanged with the supplier have to be logged or not.  businessRules(BusinessRulesInput): Business rules.  \nRequire by SupplierInput:  Supplier object. Contains its own settings, code and access.  AccessInput:  AccessInput overwrites an existent access in our Back Office or creates a new one to be used in this search query only. An access object contains its own code, configuration and settings.  \n"
},
{
	"uri": "/travelgatex/reference/objects/stat/",
	"title": "Stat",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Stat {  start: DateTime!    end: DateTime!    duration: Float   }   Fields start(DateTime!): Start UTC  end(DateTime!): End UTC  duration(Float): Difference between start and end in miliseconds  \nRequire by RequestStats:  Contains internal information.  StatAccess:    StatTransaction:    \n"
},
{
	"uri": "/travelgatex/reference/objects/stataccess/",
	"title": "StatAccess",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type StatAccess {  name: String!    total: Stat!    staticConfiguration: Stat    transactions: [StatTransaction!]!    external: String!   }   Fields name(String!):   total(Stat!):   staticConfiguration(Stat):   transactions([StatTransaction!]!):   external(String!):   \n"
},
{
	"uri": "/travelgatex/reference/objects/stattransaction/",
	"title": "StatTransaction",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type StatTransaction {  reference: String!    total: Stat!    buildRequest: Stat!    workerCommunication: Stat!    parseResponse: Stat!   }   Fields reference(String!):   total(Stat!):   buildRequest(Stat!):   workerCommunication(Stat!):   parseResponse(Stat!):   \n"
},
{
	"uri": "/travelgatex/reference/enums/statustype/",
	"title": "StatusType",
	"tags": [],
	"description": "",
	"content": " Options status\nGraphQL Schema definition  enum StatusType{   OK,    RQ,   }   Require by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description.  HotelOptionQuote:  Contains information about quote.  \n"
},
{
	"uri": "/travelgatex/reference/scalars/string/",
	"title": "String",
	"tags": [],
	"description": "",
	"content": " The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\nGraphQL Schema definition scalar String   Require by HotelCriteriaSearchInput:  Criteria of search contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.  HotelSettingsInput:  Settings that you can edit for this avail. Values are loaded by default in our Back Office.  SupplierInput:  Supplier object. Contains its own settings, code and access.  ConfigurationInput:  The information and credentials required to access the supplierâ€™s system.  ParameterInput:  Parameters for additional information for the supplier\u0026#39;s configuration.  PluginsInput:  Plugin to execute.  HotelSearch:  Results of Avail Hotel. Contains all the available options for a given date and itinerary.  RequestStats:  Contains internal information.  StatAccess:    StatTransaction:    Transactions:  Supplier transaction  Error:  Application errors  AdviseMessage:    Warning:  Application warnings  CriteriaSearch:  Criteria of search contains destination, travel dates and the number of pax in each room.  HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description.  BookableOptionSearch:    Room:  Contains the room information of the option returned.  Markup:  Informs markup applied over supplier price.  Rule:    Bed:  Contains information about a bed.  RatePlan:  Information about the rate of the option returned.  Promotion:  Information about room promotions(offers).  Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  Resort:  Contains information about the Resort.  Surcharge:  Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.  HotelCriteriaQuoteInput:  The quote criteria contains the option reference id, block and language.  HotelOptionQuote:  Contains information about quote.  HotelCriteriaBookingInput:  Criteria of book contains basic information to find a book or books.  CriteriaBookingReferencesInput:  Criteria by references  BookReferenceInput:  Reference object that contains the client reference and/or supplier reference.  HotelBookingDetail:  Contains information about booking.  Reference:  Contains reference codes.  Holder:  Holder object that contains the pax name and surname.  BookingHotel:    BookingRoom:    ServiceStatus:  Indicates the status of the service  HotelEdge:  HotelList Edge definition  HotelData:  Hotel data  MediaEdge:  HotelList Edge definition  PageInfo:    AmenityEdge:  HotelList Edge definition  Information:    Location:  Location  Geocode:  Geocode type  Contact:  Contact type  Destination:  Destination type  DefaultSettings:    MappingContext:  Returns the differents group contexts  MappingEntity:  Mapping about client codes with the equivalence per supplier.  Map:  Map codes.  Mutation:  Mutations are operations that change or update data in the server.  HotelBookInput:  Criteria of book.  PaymentCardInput:  Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information  HolderInput:  Holder object that contains the pax name and surname.  BookPaxInput:  Input BookPax contains basic information abaout pax suach as name, surname and age.  HotelCancelInput:  Cancellation Criteria.  HotelCancelDetail:  Contains information about cancel  DefaultSettingsInput:    Parameter:  Parameters for additional information for the supplier\u0026#39;s configuration.  SupplierData:    SupplierGroup:  group related to a supplier  AccessData:    AccessEdge:    GiataID:  Giata System ID.  ConnectUser:  data related to a connect user and its groups  ConnectUserGroup:  group related to a connect user  AccessConfigurationInput:  The information required to access the supplier\u0026#39;s system.  AccessConnectUserInput:  Connect user input for data access management API  ConnectUserGroupInput:  group related to a connect user  AccessSupplierInput:  Supplier input for data access management API  SupplierGroupInput:  group related to a supplier  IdAccessConfigurationInput:    MemberEdge:    MemberData:    GroupEdge:    APIEdge:    ResourceEdge:    RoleEdge:    RoleData:    CreateMemberInput:    CreateGroupInput:    UpdateMemberInput:    UpdateGroupInput:    OrganizationEdge:    ProductEdge:     "
},
{
	"uri": "/travelgatex/reference/objects/supplement/",
	"title": "Supplement",
	"tags": [],
	"description": "",
	"content": " Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.\nGraphQL Schema definition type Supplement {  code: String!    name: String    description: String    supplementType: SupplementType!    chargeType: ChargeType!    mandatory: Boolean!    durationType: DurationType    quantity: Int    unit: UnitTimeType    effectiveDate: Date    expireDate: Date    resort: Resort    price: Price   }   Fields code(String!): Specifies the supplement code.  name(String): Specifies the supplement name.  description(String): Specifies the supplement description.  supplementType(SupplementType!): Indicates the supplement type. Possible types: Fee, Ski_pass, Lessons, Meals, Equipment, Ticket, Transfers, Gla, Activity or Null.  chargeType(ChargeType!): Indicates the charge types. We need to know whether the supplements have to be paid when the consumer gets to the hotel or beforehand. Possible charge types: Include or Exclude. when include: this supplement is mandatory and included in the option\u0026#39;s price when exclude: this supplement is not included in the option\u0026#39;s price  mandatory(Boolean!): Indicates if the supplement is mandatory or not. If mandatory, this supplement will be applied to this option if the chargeType is excluded the customer will have to pay it directly at the hotel  durationType(DurationType): Specifies the duration type. Possible duration types: Range (specified dates) or Open. This field is mandatory for PDI.  quantity(Int): Indicates the quantity of field in the element \u0026#34;unit\u0026#34;.  unit(UnitTimeType): Indicates the unit type. Possible unit types: Day or Hour.  effectiveDate(Date): Indicates the effective date of the supplement.  expireDate(Date): Indicates the expire date of the supplement.  resort(Resort): Contains information about the resort  price(Price): Indicates the supplement price.  \n"
},
{
	"uri": "/travelgatex/reference/enums/supplementtype/",
	"title": "SupplementType",
	"tags": [],
	"description": "",
	"content": " Supplement Type\nGraphQL Schema definition  enum SupplementType{   SKI_PASS,    LESSONS,    MEALS,    EQUIPMENT,    TICKET,    TRANSFERS,    GALA,    ACTIVITY,   }   Require by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  \n"
},
{
	"uri": "/travelgatex/reference/objects/supplier/",
	"title": "Supplier",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Supplier {  code: ID!    supplierData: SupplierData!    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!):   supplierData(SupplierData!):   error([Error!]): Errors that will lead the service to abort  createdAt(DateTime!): Create date   updatedAt(DateTime!): Update date  \nRequire by AccessData:    AccessEdge:    \n"
},
{
	"uri": "/travelgatex/reference/objects/supplierdata/",
	"title": "SupplierData",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type SupplierData {  code: String!    isActive: Boolean!    dll: String!    hotelCodes( hotel: ID!, ): ID!    supplierGroups: [SupplierGroup!]   }   Fields code(String!): unique identifier of a supplier  isActive(Boolean!): indicates whether a supplier is active  dll(String!): instance to which this supllier is connected  hotelCodes(ID!): accesses(first: Int, last: Int, before: String, after:String, criterial: criterialInput): AccessConnection  supplierGroups([SupplierGroup!]): supplier\u0026#39;s related data of its groups  \nRequire by Supplier:    \n"
},
{
	"uri": "/travelgatex/reference/objects/suppliergroup/",
	"title": "SupplierGroup",
	"tags": [],
	"description": "",
	"content": " group related to a supplier\nGraphQL Schema definition type SupplierGroup {  groupCode: String!    isActive: Boolean!   }   Fields groupCode(String!): group code of the group related to this supplier  isActive(Boolean!): Indicates if the supplier is active for its supplier  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/suppliergroupinput/",
	"title": "SupplierGroupInput",
	"tags": [],
	"description": "",
	"content": " group related to a supplier\nGraphQL Schema definition type SupplierGroupInput {  groupCode: String!    isActive: Boolean!   }   Fields groupCode(String!): group code of the group related to this supplier  isActive(Boolean!): Indicates if the supplier is active for its supplier  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/supplierinput/",
	"title": "SupplierInput",
	"tags": [],
	"description": "",
	"content": " Supplier object. Contains its own settings, code and access.\nGraphQL Schema definition type SupplierInput {  settings: SettingsBaseInput    code: String!    accesses: [AccessInput!]   }   Fields settings(SettingsBaseInput): You can configure an special settings for any supplier. This level overwrites the avail settings level but not the access settings level.  code(String!): Code that represents a supplier in our system. This information is mandatory.  accesses([AccessInput!]): Array of accesses that can overwrite an existing access information or include a new access for this avail.  \n"
},
{
	"uri": "/travelgatex/reference/objects/surcharge/",
	"title": "Surcharge",
	"tags": [],
	"description": "",
	"content": " Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.\nGraphQL Schema definition type Surcharge {  chargeType: ChargeType!    mandatory: Boolean!    price: Price!    description: String   }   Fields chargeType(ChargeType!): Indicates the charge types. We need to know whether the supplements have to be paid when the consumer gets to the hotel or beforehand. Possible charge types: Include or Exclude. when include: this surcharge is mandatory and included in the option\u0026#39;s price when exclude: this surcharge is not included in the option\u0026#39;s price  mandatory(Boolean!): Indicates if the surcharge is mandatory or not. If mandatory, this surcharge will be applied to this option if the chargeType is excluded the customer will have to pay it directly at the hotel  price(Price!): Indicates the surcharge price.  description(String): Specifies the surcharge description.  \n"
},
{
	"uri": "/travelgatex/reference/objects/timeout/",
	"title": "Timeout",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type Timeout {  search: Int!    quote: Int!    book: Int!   }   Fields search(Int!): Milliseconds before the search connection is closed.  quote(Int!): Milliseconds before the quote connection is closed.  book(Int!): Milliseconds before the book connection is closed.  \nRequire by DefaultSettings:    \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/timeoutinput/",
	"title": "TimeoutInput",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type TimeoutInput {  search: Int!    quote: Int!    book: Int!   }   Fields search(Int!): Milliseconds before the search connection is closed.  quote(Int!): Milliseconds before the quote connection is closed.  book(Int!): Milliseconds before the book connection is closed.  \nRequire by DefaultSettingsInput:    \n"
},
{
	"uri": "/travelgatex/reference/objects/transactions/",
	"title": "Transactions",
	"tags": [],
	"description": "",
	"content": " Supplier transaction\nGraphQL Schema definition type Transactions {  request: String!    response: String!    timeStamp: DateTime!   }   Fields request(String!): Transaction Request.  response(String!): Transaction Response.  timeStamp(DateTime!): Time when the request has been processed.  \n"
},
{
	"uri": "/travelgatex/reference/scalars/uri/",
	"title": "URI",
	"tags": [],
	"description": "",
	"content": " The URI type represents a URI values. A good example mith be an Hotel Image URL. In queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: \u0026ldquo;http:\\www.travelgatex.com\u0026rdquo;.\nGraphQL Schema definition scalar URI   Require by UrlsInput:  Url\u0026#39;s  MediaData:    Contact:  Contact type  Urls:  Url\u0026#39;s   "
},
{
	"uri": "/travelgatex/reference/enums/unittimetype/",
	"title": "UnitTimeType",
	"tags": [],
	"description": "",
	"content": " Unit Time Type\nGraphQL Schema definition  enum UnitTimeType{   DAY,    HOUR,   }   Require by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.  \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/updategroupinput/",
	"title": "UpdateGroupInput",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type UpdateGroupInput {  api: String!    code: String!    info: String    method: Method!   }   Fields api(String!):   code(String!):   info(String):   method(Method!):   \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/updatememberinput/",
	"title": "UpdateMemberInput",
	"tags": [],
	"description": "",
	"content": " GraphQL Schema definition type UpdateMemberInput {  code: String!    info: String    group: String!    roles: [String!]!    resource: String!    method: Method!   }   Fields code(String!):   info(String):   group(String!):   roles([String!]!):   resource(String!):   method(Method!):   \n"
},
{
	"uri": "/travelgatex/reference/objects/urls/",
	"title": "Urls",
	"tags": [],
	"description": "",
	"content": " Url\u0026rsquo;s\nGraphQL Schema definition type Urls {  search: URI!    quote: URI!    book: URI!    generic: URI!   }   Fields search(URI!): Specific Url for Availability method.  quote(URI!): Specific Url for Reservation method.  book(URI!): Specific Url for Valuation method.  generic(URI!): Supplier URL used for multiple methods.  \nRequire by AccessData:    \n"
},
{
	"uri": "/travelgatex/reference/inputobjects/urlsinput/",
	"title": "UrlsInput",
	"tags": [],
	"description": "",
	"content": " Url\u0026rsquo;s\nGraphQL Schema definition type UrlsInput {  search: URI    quote: URI    book: URI    generic: URI   }   Fields search(URI): Specific Url for Availability method.  quote(URI): Specific Url for Reservation method.  book(URI): Specific Url for Valuation method.  generic(URI): Supplier URL used for multiple methods.  \nRequire by ConfigurationInput:  The information and credentials required to access the supplierâ€™s system.  \n"
},
{
	"uri": "/travelgatex/reference/objects/warning/",
	"title": "Warning",
	"tags": [],
	"description": "",
	"content": " Application warnings\nGraphQL Schema definition type Warning {  code: String!    type: String!    description: String!   }   Fields code(String!): Warning code  type(String!): Warning type  description(String!): Warning description  \n"
},
{
	"uri": "/travelgatex/tutorials/stats-dashboard/",
	"title": "Build a Dashboard",
	"tags": [],
	"description": "Build a Dashboard",
	"content": ""
},
{
	"uri": "/learning-graphql/overview/",
	"title": "GraphQL Overview",
	"tags": [],
	"description": "",
	"content": " A query language for your API Designed by Facebook, GraphQL is a new way of dealing and managing APIs, specially useful for decoupling client\u0026rsquo;s from server\u0026rsquo;s logic.\nStraight from the horse\u0026rsquo;s mouth:  A GraphQL query is a string that is sent to a server to be interpreted and fulfilled, which then returns JSON back to the client. Lee Byron, Facebook\n Official Definition  GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools. graphql.org\n More specifically:  GraphQL is a query language for your API, and a server-side runtime for executing queries by using a type system you define for your data. GraphQL isn\u0026rsquo;t tied to any specific database or storage engine and is instead backed by your existing code and data. graphql.org/learn\n GraphQL at TravelgateX GraphQL is a perfect fit for each and every need of our applications:\n Scalable: we must be able to handle millions of requests. Stable: a change in the API must not break the client. Fast: GraphQL not only allows faster response times by letting you choose exactly what you want, but also is consumes less bandwidth which makes responses lighter.  We\u0026rsquo;re a company focused in providing APIs for our clients. SOAP APIs are long gone and modelling REST APIs to fit a vast variety of products is not only hard, but the bigger it gets, the more unmanageable it becomes.\nAt TravelgateX, we\u0026rsquo;re true believers of the Kaisen philosophy. We\u0026rsquo;re constantly researching for new ways of improvement.\n GraphQL allows us to think of our APIs as a whole, giving a coherence in all our products \u0026amp; services, accessible from one single endpoint. It\u0026rsquo;s like a showcase for our APIs. Oscar Perez, CTO\n "
},
{
	"uri": "/hotelx/plugins/mapping/",
	"title": "Mapping",
	"tags": [],
	"description": "Map plugins",
	"content": " Overview Map plugins extends HotelX allowing to match Seller and Buyer codes based on contexts.\nHotelCodeMatching Matches Seller hotel codes based on file code mapping.\nFile Requirements The file should be in the below format:\n Encoding: UTF-8 File Name: [Context Source]_hotel_map.csv Header Row: Code Source, Context Destination, Code Destination Delimiter: Comma  Code Source, Context Destination, Code Destination 10,GUE,c11#10 10000,JCB,7604 10000,TOU,1274249  File must be uploaded to your organization directory SFTP\nConfiguration { }  Parameters stopsOnMatchError: [Boolean] Stops message execution when hotel matching can not be done. Default value False\nBoardCodeMatching RoomSemanticMatching "
},
{
	"uri": "/travelgatex/reference/objects/",
	"title": "Objects",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/hotelx/quickstart/",
	"title": "Quickstart",
	"tags": [],
	"description": "HotelX Quickstart",
	"content": " This page shows you how to perform basic hotel book using GraphQL Playground.\nBefore you begin  Follow the steps in Creating an API Key to get your API Key. Check connectivity for your API Key. Open Sample Playground and modify HTTP HEADERS field Authorization with your API Key.  Search Hotel  Click on search tab Modify Query Variables with valid dates and send the request.  Quote Hotel  Click on quote tab In Query Variables modify optionRefId with option id value returned in search response and send the request.  Book Hotel  Click on hotelBook tab In Query Variables modify optionRefId with optionRefId value returned in quote response and send the request. Next other information you can chek for book Seller reference  "
},
{
	"uri": "/travelgatex/reference/",
	"title": "Reference",
	"tags": [],
	"description": "Reference Documentation",
	"content": ""
},
{
	"uri": "/hotelx/resources/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": "This page documents production updates to connectX Hotel. We recommend that connectX hotel developers periodically check this list for any new announcements.\n"
},
{
	"uri": "/travelgatex/resources/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "Release Notes and Changelog",
	"content": "This page contains release notes for features and updates to the travelgaX GraphQL API.\n"
},
{
	"uri": "/travelgatex/security/",
	"title": "Security",
	"tags": [],
	"description": "Authorization &amp; Authentication",
	"content": " Overview Learn Platform Security\n    "
},
{
	"uri": "/travelgatex/",
	"title": "TravelgateX",
	"tags": [],
	"description": "TravelgateX - The Ultimate Platform For The Travel Trade",
	"content": "Run your applications using TravelgateX platform. \t Overview Platform information\n   \t Reference Reference Documentation\n   \t Security Authorization \u0026amp; Authentication\n   \t Data Automation Automate bulk data operations\n   \t Tutorials Walkthrouhgs of common applications\n   \t Resources Quotas, Release notes\n    "
},
{
	"uri": "/admin/account/",
	"title": "Account",
	"tags": [],
	"description": "Understand TravelgateX concepts",
	"content": " IAM AdminX Information\n    "
},
{
	"uri": "/hotelx/plugins/aggregation/",
	"title": "Aggregation",
	"tags": [],
	"description": "Aggregation plugins",
	"content": " Overview Aggregation plugins extends HotelX allowing filtering Supplier options and respones using different business rules.\nKeyFilter Filters Supplier options based on field keys applying a selector function over field values.\nIt\u0026rsquo;s based on SQL Aggregate Functions but filtering, not aggregating.\n Field Keys as a combination of:\n SupplierCode HotelCode BoardCode RoomCode Refundable  Functions:\n Min Max  Field Values:\n PriceNet PriceGross   Configuration { }  Parameters keys: [String!] Values must be a valid Field Key.\nfunction: String! Value must be a valid Function.\nvalue: String! Value must be a valid Field Value.\n"
},
{
	"uri": "/learning-graphql/basic_concepts/",
	"title": "Basic Concepts",
	"tags": [],
	"description": "",
	"content": " Queries and Mutations  At its simplest, GraphQL is about asking for specific fields on objects. Let\u0026rsquo;s start by looking at a very simple query and the result we get when we run it http://graphql.org/learn/queries/?utm_source=docs.travelgatex.com\n There are 2 basic operations in GraphQL schemas:\nQueries http://graphql.org/learn/queries/?utm_source=docs.travelgatex.com\nJust like a RESTful Get method, queries query the system. This operation reads values from the server using a Graph Object and gets a JSON as a response.\nUnlike a RESTful service, queries are interactive, it allows the user to choose exactly what he wants to get returned. This way, if the API owner makes a change to the API, the client will not be affected as long as the query does not change. Think of it like a good\u0026rsquo;ol SQL query. As long as you send the same one, the results is always predictable.\nThis fact makes versioning totally unnecessary in GraphQL APIs. There\u0026rsquo;s no need to specify which version you want to consume, since it\u0026rsquo;s you who are in charge of deciding which fields you want to retrieve.\nAs a bonus, the GraphQL specification includes handling of deprecated fields and marks a field as is-deprecated by adding a deprecationReason to the field.\nQuery example\nEJEMPLO PEQUE DE DISPO TODO: Falta ejemplo!! Mutations http://graphql.org/learn/queries/#mutations?utm_source=docs.travelgatex.com\nMutations are methods that change the server. It makes a physical change to the data. Could be inserting a new object in a database, deleting or updating. Queries take care of POST, PUT and DELETE methods in a REST API or INSERT, UPDATE and DELETE in SQL.\nMutation example:\n"
},
{
	"uri": "/hotelx/concepts/booking-flow/",
	"title": "Booking Flow",
	"tags": [],
	"description": "Learn about Transactional Booking flow. Search, Quote and Confirm Reservation",
	"content": " Search, Quote and Book transactions must be executed sequentally in order to book hotel rooms in a Seller.\nSearch Performs an hotel availability search over 1 or more Seller accesses\nDepending Seller, search operations implitiy use supplier\u0026rsquo;s cache.\nOperation { \u0026quot;query\u0026quot;: { \u0026quot;search\u0026quot;: { \u0026quot;hotel\u0026quot;: { } } } }  PlayGround Samples  search  Quote Performs an hotel quote over an option returned in Search Response.\nOperation { \u0026quot;query\u0026quot;: { \u0026quot;quote\u0026quot;: { \u0026quot;hotel\u0026quot;: { } } } }  PlayGround Samples  quote  Book Performs a book or reservation over an option returned in Quote Response\nOperation { \u0026quot;mutation\u0026quot;: { \u0026quot;hotelBook\u0026quot;: { } } }  PlayGround Samples  hotelBook  "
},
{
	"uri": "/getting-started/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "Understand Concepts",
	"content": " TravelgateX offers a set of Products ready to be integrated using a single GraphQL endpoint.\nGraphQL API TravelgateX is the first-in-the-industry travel API completely based in GraphQL. Most travel APIs are old legacy XML Soap APIs. We know that, because we\u0026rsquo;ve integrated too many of them. The problems with that technology are well-known and we won\u0026rsquo;t get into details here. One of the things we really like about GraphQL, is that each client is ultimately responsible over what it wants to be returned.\nIt is a stable, secure and fault tolerant load balanced between many datacenters from 4 different cloud providers, namely Microsoft Azure, Google Cloud Platform, Hetzner and TotalUptime. For the full reasoning behind working with GraphQL please click here.\nFor explanation about using TravelgateX GraphQL API please click here.\nPartner A Partner is someone or something that can interact with any TravelgateX APIs or apps. It can be either a User, which identifies a person, or Service Account which is identified by an API Key.\nOrganization Each Partner belongs to one or more Organizations.\nAn Organization is made up of Partners, Resources, Settings, Permissions and other Metadata.\nProduct We organize our APIs by similarity and common features. A Product is an API domain which is available for the consumption of Resources.\nFor detailed Product information please click here.\nEntities Entities or core resources are entities that define common objects in all our API domains.\nBuyer A Buyer is a Partner who is connected to TravelgateX in the demand side in order to buy travel products from Sellers.\nSeller A Seller is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected BuyersMa.\nTech Platform Many Partners, Buyers or Sellers use a third party platform in order to buy or sell travel products. These are usually tech companies specialized in developing custom software to other companies.\nContext A Context refers to the Seller codes the request is using. It\u0026rsquo;s a way of specifiying which Seller codes is being used so it can be transformed and standardized.\nAccess An Access is a set of credentials and configuration in order to access a Seller.\n"
},
{
	"uri": "/hotelx/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "Understand TravelgateX basic concepts",
	"content": " Accesses, Sellers and Context Learn about Core Entities used in TravelgateX\n   Booking Flow Learn about Transactional Booking flow. Search, Quote and Confirm Reservation\n   Management Flow Learn about Management Flow. Cancellations and Booking List\n   Content Learn about how manage content data to manage in your site. Hotel, Boards, Categories...\n    "
},
{
	"uri": "/admin/connect/",
	"title": "Connect",
	"tags": [],
	"description": "Understand TravelgateX concepts",
	"content": " Entities AdminX Information\n    "
},
{
	"uri": "/hotelx/plugins/markup/",
	"title": "Markup",
	"tags": [],
	"description": "Markup plugins",
	"content": " Overview "
},
{
	"uri": "/getting-started/playground/",
	"title": "Playground",
	"tags": [],
	"description": "Embedded GraphQL Client",
	"content": " Try it For Yourself Or open in a new tab here\n"
},
{
	"uri": "/travelgatex/reference/scalars/",
	"title": "Scalars",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/hotelx/plugins/converter/",
	"title": "Converter",
	"tags": [],
	"description": "Converter plugins",
	"content": " Overview "
},
{
	"uri": "/travelgatex/data-automation/",
	"title": "Data Automation",
	"tags": [],
	"description": "Automate bulk data operations",
	"content": " SFTP Secure File Transfer Protocol (SFTP)\n    "
},
{
	"uri": "/hotelx/",
	"title": "HotelX",
	"tags": [],
	"description": "HotelX: NextGen Hotel Search API",
	"content": "ConnectX Hotel connects you to multiple sellers addding business logic solving most of the problems commonly found in the travel business in an elegant and efficient way.\nThere are no integration investments and you can operate with hundreds of hotel sellers. ConnectX Hotel has been desined to be fast, reliable and offer strong performance.\n\t Overview HotelX Information\n   \t Quickstart HotelX Quickstart\n   \t Concepts Understand TravelgateX basic concepts\n   \t How-to Guides Perform specific tasks\n   \t Plugins Additional logic to your App\n   \t Reference Reference Documentation\n   \t Resources Quotas, release notes\n    "
},
{
	"uri": "/hotelx/howtos/",
	"title": "How-to Guides",
	"tags": [],
	"description": "Perform specific tasks",
	"content": "How-to Guides\n"
},
{
	"uri": "/travelgatex/reference/interfaces/",
	"title": "Interfaces",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/hotelx/concepts/management-flow/",
	"title": "Management Flow",
	"tags": [],
	"description": "Learn about Management Flow. Cancellations and Booking List",
	"content": " Manage operations can be used in order to operate above Seller\u0026rsquo;s bookings.\nCancel Performs a Seller booking cancellation.\nOperation { \u0026quot;mutation\u0026quot;: { \u0026quot;hotelCancel\u0026quot;: { } } } }  PlayGround Samples  hotelCancel  Booking Performs a Seller booking list or detail.\nOperation { \u0026quot;query\u0026quot;: { \u0026quot;booking\u0026quot;: { \u0026quot;hotel\u0026quot;: { } } } }  PlayGround Samples  booking  "
},
{
	"uri": "/travelgatex/security/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Learn Platform Security",
	"content": " Introduction Resources are granted to Partners belonging to Organizations.\nIAM lets partners administrators authorize who can take action on specific resources, giving you full control and visilibity to manage resources centrally.\nAuthentication Authentication is the process of authorizing or making sure that the Partner is who is supposed to be. Every request to TravelgateX GraphQL API must carry an Access Token. This access token could be an API Key or a JSON Web Token.\nAPI Key That\u0026rsquo;s the way to authenticate applications, normally created as Service Account with limited scopes. The correct way to send it to GraphQL server is via HTTP Header:\n API key: \u0026quot;Authorization: Apikey xxxxxxxxx\u0026quot;  curl -X\\ POST\\ -H \u0026quot;Content-Type: application/json\u0026quot; \\ -H \u0026quot;Authorization: Apikey q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\u0026quot; \\ --data '{\u0026quot;query\u0026quot;:\u0026quot;{searchStatusService{code description}}\u0026quot;}' \\ --compressed \\ https://api.travelgatex.com  Creating an API Key For development purposes please use the following test Api Key q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\nJSON Web Token Coming soon Authorization Once the Partner is authenticated we must authorize the partner to use the requested Resource.\nRole based access control (RBAC) is the de facto standard for authorization. However, it introduces many complexities for practical applications: roles can be inflexible to change and additional mapping between users and roles must be maintained separately.\nTravelgateX permissions are Resource Group Assigned rules, defined using GraphQL API and determined at runtime by the data graph of the application.\nFurther Reading  https://hackernoon.com/how-do-you-authenticate-mate-f2b70904cc3a  "
},
{
	"uri": "/hotelx/plugins/processor/",
	"title": "Processor",
	"tags": [],
	"description": "Processor plugins",
	"content": " Overview Processor plugins extends HotelX allowing multiple operation types.\nProcessor plugins can modify request and response message, allowing a full range of operations:\n Split arrays Join arrays Modify object values Add or remove object instances  "
},
{
	"uri": "/learning-graphql/thinking_in_graphql/",
	"title": "Thinking in GraphQL",
	"tags": [],
	"description": "",
	"content": " A Paradigm Shift GraphQL is a query language, and as such it does exactly that: it queries servers in order to get results back. And we get to choose exactly what data we want to retrieve. As opposed to JSON, each piece of data has its own type, so we get to know exactly what to expect, it\u0026rsquo;s a typed language. This gives it a lot of predictability, something we can really appreciate, especially when dealing with third party APIs, where we have no control of what\u0026rsquo;s going on in the other side.\nBuilding GraphQL Schemas In GraphQL, the API specifications are called schemas. A GraphQL Schema is like a contract between the client and the server. It\u0026rsquo;s the definition of how they talk to each other, what they expect from each other so each of them can know exactly what they can and cannot send to each other and what they\u0026rsquo;ll get in response to that. This makes a lot of a difference when creating our schemas, we have to get used to think in a Schema First way.\n A particularly interesting pattern seems to be emerging. Over and over again, I hear developers describing a way of approaching product development we’re calling “GraphQL First.”https://dev-blog.apollodata.com/graphql-first-a-better-way-to-build-modern-apps-b5a04f7121a0\n First, we model our data, thinking of all the different uses we can give to it. And only then, we\u0026rsquo;ll think of where we going to get it from. It could even be from different services, like a database and another node from a third party provider.\nAnother great feature is that the GraphQL specification ensures we write documentation while writing the schema. Apart from being really cool to see your text in the GraphiQL window while you\u0026rsquo;re typing your query, it really helps you to think of each and every node and why you\u0026rsquo;re putting it there. We use APIs Guru\u0026rsquo;s graphql-faker. In one screen you write the schema, and in the other you try what you\u0026rsquo;ve just written, including the help text or documentation you\u0026rsquo;ve just created.\nFurthermore GraphQL schemas support inheritance, we can use the same objects for different queries. For example, in our business domain, and in most businesses for that matter, we have to return the price of the Hotel, or Flight. We can use exactly the same element in both, and just extend it if needed. This makes the job much easier and faster for the developer who\u0026rsquo;s implementing our service.\nTravelgateX schema implementation follow practices explained here\nBuilding Queries  Componentes de la query Componentes de la respuesta Respuesta Como lo hacemos Paginacion  Building Mutations  Componentes de la query Componentes de la respuesta Respuesta Como lo hacemos Paginacion  TODO: Falta chicha!! "
},
{
	"uri": "/hotelx/concepts/content/",
	"title": "Content",
	"tags": [],
	"description": "Learn about how manage content data to manage in your site. Hotel, Boards, Categories...",
	"content": ""
},
{
	"uri": "/flightx/",
	"title": "FlightX",
	"tags": [],
	"description": "",
	"content": "FlightX connects you to multiple sellers addding business logic solving most of the problems commonly found in the travel business in an elegant and efficient way.\nThere are no integration investments and you can operate with hundreds of hotel sellers. FlightX has been desined to be fast, reliable and offer strong performance.\n\t Overview FlightX Information\n    "
},
{
	"uri": "/travelgatex/reference/inputobjects/",
	"title": "Input objects",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/hotelx/plugins/",
	"title": "Plugins",
	"tags": [],
	"description": "Additional logic to your App",
	"content": "Customize your additional features.\n\t Overview Plugins workflow execution\n   \t Mapping Map plugins\n   \t Aggregation Aggregation plugins\n   \t Markup Markup plugins\n   \t Converter Converter plugins\n   \t Processor Processor plugins\n   \t Development Develop your own plugins\n    "
},
{
	"uri": "/statsx/",
	"title": "StatsX",
	"tags": [],
	"description": "",
	"content": " \t Overview StatsX Information\n    "
},
{
	"uri": "/learning-graphql/tooling/",
	"title": "Tooling",
	"tags": [],
	"description": "",
	"content": " Tooling Please find below a collection of tools we\u0026rsquo;ve been using to help us develop in GraphQL. We have curated this list with the different goals each of the tools is for:\nDesigning Schemas We follow the Schema First methodology. There are many tools, the ones we tried and like most nowadays are:\n APIs Guru\u0026rsquo;s graphql-faker: https://github.com/APIs-guru/graphql-faker  TODO: Falta chicha!! Go Packages Nowadays most our APIS are written in Go, mainly because of speed, ability to handle very high load while using low resources. Also because of the ability to develop plugins. We\u0026rsquo;ve used many libraries and packages to help us, hereby our list:\n Redis: https://godoc.org/github.com/garyburd/redigo/redis  TODO: Falta chicha!! NodeJS Packages Other pieces of our software are written in NodeJS. Mainly because some packages are wither not avaialble in Go, or because the Go package is not as performant as the Node alternative. These are the packages we use:\nTODO: Falta chicha!! Schema Visualizers It\u0026rsquo;s nice to be able to see your schema and be able to navigate through it.\n GraphQL Voyager - Represent any GraphQL API as an interactive graph  Documentation Generators Generate beaultiful static documentation sites directly from schema or introspection query\n Graph Docs Graphdoc  GraphQL Clients Build, create and play with queries, it\u0026rsquo;s fun!\n Insomnia: our favorite \u0026#9825; graphql-playground: favorite online client GraphiQL: the original  TODO: Falta chicha!! Big List Very curated list full of different tools, resources, etc\n Awesome GraphQL  "
},
{
	"uri": "/travelgatex/tutorials/",
	"title": "Tutorials",
	"tags": [],
	"description": "Walkthrouhgs of common applications",
	"content": "What you can build on TravelgateX\u0026rsquo;s platform Build An OTA Build Your Own Full Fledged OTA\n   Build a Dashboard Build a Dashboard\n    "
},
{
	"uri": "/hotelx/plugins/development/",
	"title": "Development",
	"tags": [],
	"description": "Develop your own plugins",
	"content": "In this article, you learn how develop your own HotelX plugins.\n"
},
{
	"uri": "/travelgatex/reference/enums/",
	"title": "Enums",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/mappeax/",
	"title": "MappeaX",
	"tags": [],
	"description": "",
	"content": " \t Overview FlightX Information\n    "
},
{
	"uri": "/hotelx/reference/",
	"title": "Reference",
	"tags": [],
	"description": "Reference Documentation",
	"content": " Reference "
},
{
	"uri": "/travelgatex/resources/",
	"title": "Resources",
	"tags": [],
	"description": "Quotas, Release notes",
	"content": " Release Notes Release Notes and Changelog\n    "
},
{
	"uri": "/learning-graphql/tutorials_resources/",
	"title": "Tutorials &amp; Resources",
	"tags": [],
	"description": "",
	"content": " The GraphQL ecosystem is growing fast. Apart from facebook\u0026rsquo;s and Graphql.org\u0026rsquo;s official documentation, each day as more and more development teams embrace the technology new blog posts, articles, tutorials, videos and learning material in general is published online.\nThis list is intended to serve as a examples we\u0026rsquo;ve used and found useful when adopting the technology. We\u0026rsquo;ve separated between tutorials get-your-hands-dirty full action kind to resources, which are reading materials, podcasts or any other kind of documentation, written or not, which will help you to Think in GraphQL.\nWe hope you enjoy!\nTutorials  https://github.com/blog/2412-learn-graphql-with-github  TODO: Falta chicha!! Resources  GraphQL official documentation Apollo Relay official documentation Schema first development - Johannes Schickling Schema-first development with GraphQL GraphQL First in practice at Quri GraphQL First: A better way to build modern apps  "
},
{
	"uri": "/insightsx/",
	"title": "InsightsX",
	"tags": [],
	"description": "",
	"content": " \t Overview FlightX Information\n    "
},
{
	"uri": "/hotelx/resources/",
	"title": "Resources",
	"tags": [],
	"description": "Quotas, release notes",
	"content": " Resources "
},
{
	"uri": "/admin/",
	"title": "Admin",
	"tags": [],
	"description": "",
	"content": " \t Overview Admin Information\n   \t Account Understand TravelgateX concepts\n   \t Connect Understand TravelgateX concepts\n    "
},
{
	"uri": "/learning-graphql/",
	"title": "Learning GraphQL",
	"tags": [],
	"description": "",
	"content": "  GraphQL Overview     Basic Concepts     Thinking in GraphQL     Tooling     Tutorials \u0026amp; Resources     "
},
{
	"uri": "/_footer/",
	"title": "footer",
	"tags": [],
	"description": "",
	"content": "Lorem ipsum dolor sit amet.\n"
},
{
	"uri": "/_header/",
	"title": "header",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/guion/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Getting Started pagetitle = \u0026ldquo;\u0026rdquo; GOAL: información basica para empezar a desarrollar\nOverview GOAL: Explicar el who, why, how de la plataforma\n WHO: Equipos tecnicos para consumir servicios de travel\n WHY: search \u0026amp; book travel multi-products \u0026amp; multi-source\n WHY: Using the Storefront API, you can:\n HOW: Plataforma: Multi-Producto \u0026amp; Multi-Source\n HOW: Diagrama Platforma\n HOW: Utilización de GraphQL: EndPoint único\n WHY: Fast. Scalable. Reliable.\n Resumen: Ventajas GraphQL\n Get Engaged: comunidad, docuemntación y jira\n CALL2ACTION: Quickstart busqueda hoteles\n  QuickStart GOAL: minimo indispensable para hacer una petición\n INTRO: empezar en 1min   API Key test Ejemplo de búsqueda de ConnectX inline   Product QuickStarts\n CALL2ACTION: Try ConnectX Playground\n  Concepts GOAL: Glosario de conceptos\nINTRO: Explicar pq necesitamos estos conceptos y donde se utilizan\n Partner API Organization Buyer Seller Access Product Permission Plugin  CALL2ACTION: Read More about the Platform\nPlatform GOAL: Como funciona la plataforma a nivel técnico\nOverview GOAL: explicar utilizacion de la plataforma con GraphQL\nINTRO: Explica lo que se necesita saber para utilizar un producto, se utiliza como referencia de la documentación de los demás productos\n WHO: Developers de empresas de travel que quieran integrarse para comprar/vender productos de travel\n WHY: unificar en 1 API sencilla todos los servicios que se puedan vender o comprar en una empresa de productos turisticos\n WHY: Que puede hacer con la plataforma: \u0026ndash; Fetch data about a single product or a collection of products to display on any website or device. \u0026ndash; Create unique checkout experiences with full control over the shopping cart. \u0026ndash; Connect to more than 600 sellers of travel products. \u0026ndash; Allow customers to search \u0026amp; book through a number of sellers \u0026ndash; Gain complete control of the number and quality of requests sent and received \u0026ndash; Map new sellers to your existing hotel codes\n HOW: implementación API en GraphQL\n HOW: como funciona? \u0026ndash; HOW: breve explicación GraphQL \u0026ndash; HOW: endpoint unico \u0026ndash; HOW: GraphQL requests \u0026ndash; HOW: Security \u0026ndash; HOW: Data Automation \u0026ndash; HOW: API Reference \u0026ndash; HOW: Resources \u0026mdash; HOW: Quotas \u0026amp; Limits \u0026mdash; HOW: Release Notes\n  CALL2ACTION: Get Started With our Products\nSecurity GOAL: Explicar en detalle como fuciona INTRO: CONTENIDO:\nData Automation GOAL: INTRO: CONTENIDO:\nAPI Reference GOAL: INTRO: CONTENIDO:\nQuotas \u0026amp; Limits GOAL: INTRO: CONTENIDO:\nRelease Notes GOAL: INTRO: CONTENIDO:\nTutorials TravelB2B Stats Dashboard HotelX GOAL: información basica para empezar a desarrollar\nOverview GOAL: Explicar el who, why, how de la hotelX\n WHO: Equipos tecnicos para consumir apis de diferentes proveedores de acomodación\n WHY: search \u0026amp; book travel hotels multi-source\n WHY: Using the Storefront API, you can:\n HOW: Plataforma: Multi-Producto \u0026amp; Multi-Source\n HOW: Diagrama Platforma\n HOW: Utilización de GraphQL: EndPoint único\n WHY: Fast. Scalable. Reliable.\n Resumen: Ventajas GraphQL\n Get Engaged: comunidad, docuemntación y jira\n CALL2ACTION: Quickstart busqueda hoteles\n  QuickStart GOAL: minimo indispensable para hacer una petición\n INTRO: empezar en 1min   API Key test Ejemplo de búsqueda de ConnectX inline   Product QuickStarts\n CALL2ACTION: Try ConnectX Playground\n  Concepts GOAL: Glosario de conceptos\nINTRO: Explicar pq necesitamos estos conceptos y donde se utilizan\n Partner API Organization Buyer Seller Access Product Permission Plugin  CALL2ACTION: Read More about the Platform\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/credits/",
	"title": "Credits",
	"tags": [],
	"description": "contributors and packages used by hugo-theme-docdock",
	"content": " github contributors .ghContributors{ display:flex; flex-flow: wrap; align-content: flex-start } .ghContributors  div{ width: 50% ; display: inline-flex; margin-bottom: 5px; } .ghContributors  div label{ padding-left: 4px ; } .ghContributors  div span{ font-size: x-small; padding-left: 4px ; }   @vjeantet 225 commits   @matcornic 49 commits   @W-Floyd 24 commits   @gwleclerc 21 commits   @lierdakil 16 commits   @Pilskalns 12 commits   @SiamKreative 6 commits   @jose-oc 6 commits   @Xipas 5 commits   @altinnadmin 4 commits   @FMuro 2 commits   @Thiht 2 commits   @EnigmaCurry 2 commits   @adamlamar 1 commits   @byzheng 1 commits   @zivbk1 1 commits   @vielmetti 1 commits   @erikjasiak 1 commits   @giuliov 1 commits   @farmergreg 1 commits   @tarpdalton 1 commits   @JohnBlood 1 commits   @kamilchm 1 commits   @ripienaar 1 commits   @shazic 1 commits   @viertaxa 1 commits   @uweschaefer 1 commits   @justin-yan 1 commits   @karlmacklin 1 commits   @petzi53 1 commits   @remi31000 1 commits   @xxxtonixxx 1 commits   Other contributors  @bep supports and advices   Packages and libraries  Bootstrap - front-end framework mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services\u0026hellip; JavaScript-autoComplete - An extremely lightweight and powerful vanilla JavaScript completion suggester. clipboard.js - copy text to clipboard highlight.js - Javascript syntax highlighter modernizr - A JavaScript toolkit that allows web developers to use new CSS3 and HTML5 features while maintaining a fine level of control over browsers that don\u0026rsquo;t support reveal-js - The HTML Presentation Framework  Tooling  Netlify - Continuous deployement and hosting of this documentation Hugo    "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/",
	"title": "TravelgateX Documentation",
	"tags": [],
	"description": "",
	"content": ""
}]