[
{
	"uri": "/travelgatex/reference/objects/api/",
	"title": "API",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type API {\r\rcode: ID! \r\r\rerror: [Error!] \r\r\rapiData: APIData \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\r\r\rerror([Error!]):\r\r\rapiData(APIData):\r\r\rcreatedAt(DateTime!):\r\r\rupdatedAt(DateTime!):\r\r\r\nRequired by APIEdge: \r\r\rOperationData: \r\r\r\n"
},
{
	"uri": "/admin/reference/api-reference/",
	"title": "API Reference",
	"tags": [],
	"description": "",
	"content": " This API reference is organized by graphql operations related to product.\nQuery Operations Mutation Operations Documentation Schema documentation\nSamples  Search, Quote, Book, Cancel and Retrieve bookings  "
},
{
	"uri": "/hotelx/reference/api-reference/",
	"title": "API Reference",
	"tags": [],
	"description": "",
	"content": " This API reference is organized by graphql operations related to product.\nQuery Operations Mutation Operations Documentation Schema documentation\nSamples  Search, Quote, Book, Cancel and Retrieve bookings  "
},
{
	"uri": "/travelgatex/reference/objects/apiconnection/",
	"title": "APIConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIConnection {\r\redges: [APIEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([APIEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequired by AdminQuery: \r\r\rOrganizationData: \r\r\rGroupCommonData: \r\r\rGroupData: \r\r\rResourceData: \r\r\rProductData: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/apidata/",
	"title": "APIData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIData {\r\rid: ID! \r\r\rcode: ID! \r\r\rlabel: String \r\r\rgroups(\r\r\r\rcodes: [ID!],\r\r\r\r\rtype: GroupType,\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): GroupConnection \r\r\rresources(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): ResourceConnection \r\r\roperations(\r\r\r\rcodes: [ID!],\r\r\r\r\rtype: OperationType,\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): OperationConnection \r\r}\r\r\rFields id(ID!):\r\r\rcode(ID!):\r\r\rlabel(String):\r\r\rgroups(GroupConnection):\r\r\rresources(ResourceConnection):\r\r\roperations(OperationConnection):\r\r\r\nRequired by API: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/apiedge/",
	"title": "APIEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type APIEdge {\r\rcursor: String! \r\r\rnode: API \r\r}\r\r\rFields cursor(String!):\r\r\rnode(API):\r\r\r\nRequired by APIConnection: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/access/",
	"title": "Access",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Access {\r\rcode: ID! \r\r\raccessData: AccessData \r\r\rerror: [Error!] \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\r\r\raccessData(AccessData):\r\r\rerror([Error!]):\rErrors that abort services\r\rcreatedAt(DateTime!):\rDate created\r\rupdatedAt(DateTime!):\rDate updated\r\r\nRequired by AccessEdge: \r\r\rAccessData: \r\r\rStatsData: \r\r\rAdminMutation: \r\r\r\n"
},
{
	"uri": "/hotelx/concepts/accesses-supplier-context/",
	"title": "Access, Supplier and Context",
	"tags": [],
	"description": "Learn about Core Entities used in TravelgateX",
	"content": " On this page you will learn more about Core Entities used in TravelgateX.\nSupplier Product segmentation over a provider API implementation. Supplier codes are uniques over all TravelgateX organizations.\nAccess Configuration used when interacting with a supplier, which includes:\n URLs  Credentials  Markets  Rate Types  Specific supplier settings   Client Client codes are unique over all TravelgateX organizations, like supplier codes. This codes are used for to identify who is doing the request and this client has a configuration assigned to it. If you want to read more about settings go HotelX settings.\nContext Context is the way codes are formed. Every platform can manage its own contexts or reuse existing ones. Different sellers and buyers can manage the same codes context. For example SmyRooms supplier uses SMY contexts.\nContext apply to:\n Hotel Codes  Board Codes  Room Codes   With the built-in solution you will be able to choose the context that you wish to use when requesting an HotelX operation. This context will be used in order to map with other suppliers contexts.\nWe recommend using the biggest context possible or using your own context, so all supplier mappings can be resolved.\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/accessconfigurationinput/",
	"title": "AccessConfigurationInput",
	"tags": [],
	"description": "",
	"content": " The information required to access the supplier\u0026rsquo;s system.\nGraphQL schema definition type AccessConfigurationInput {\r\risActive: Boolean! \r\r\rcode: String! \r\r\rsupplier: String! \r\r\rconfiguration: ConfigurationInput \r\r}\r\r\rFields isActive(Boolean!):\rIndicates if Access is active\r\rcode(String!):\rArbitrary not unique identifier\r\rsupplier(String!):\rSupplier to which this access belongs\r\rconfiguration(ConfigurationInput):\rInformation required to access the supplier\u0026#39;s system.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/accessconnectuserinput/",
	"title": "AccessConnectUserInput",
	"tags": [],
	"description": "",
	"content": " Connect user input for data access management API\nGraphQL schema definition type AccessConnectUserInput {\r\rcode: String! \r\r\risActive: Boolean! \r\r\rgroups: [ConnectUserGroupInput!] \r\r}\r\r\rFields code(String!):\rconnect user code\r\risActive(Boolean!):\rIndicates if the connect user is active.\r\rgroups([ConnectUserGroupInput!]):\rgroups related to this connect user\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/accessconnection/",
	"title": "AccessConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessConnection {\r\redges: [AccessEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([AccessEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequired by AdminQuery: \r\r\rSupplierData: \r\r\rOrganizationData: \r\r\rGroupCommonData: \r\r\rGroupData: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/accessdata/",
	"title": "AccessData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessData {\r\rname: String! \r\r\risActive: Boolean! \r\r\rcode: ID! \r\r\rsupplier: Supplier! \r\r\risTest: Boolean! \r\r\ruser: String \r\r\rpassword: String \r\r\rurls: Urls \r\r\rparameters: [Parameter] \r\r\rmarkets: [String!] \r\r\rrateRules: [RateRulesType!] \r\r\rshared: Access \r\r}\r\r\rFields name(String!):\rAccess descriptive name\r\risActive(Boolean!):\rIndicates if Access is active\r\rcode(ID!):\rUnique AccessConfiguration identifier\r\rsupplier(Supplier!):\rSupplier for this Access\r\risTest(Boolean!):\rIndicates if Access can be used for testing or not\r\ruser(String):\rUser code to connect to supplier\r\rpassword(String):\rPassword for the connection\r\rurls(Urls):\rSpecific URLs\r\rparameters([Parameter]):\rList of parameters for additional information\r\rmarkets([String!]):\rMarkets allowed for the Access\r\rrateRules([RateRulesType!]):\rBusiness rule types for the Access\r\rshared(Access):\rParent Access if Shared Access\r\r\nRequired by Access: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/accessedge/",
	"title": "AccessEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessEdge {\r\rcursor: String! \r\r\rnode: Access \r\r}\r\r\rFields cursor(String!):\r\r\rnode(Access):\r\r\r\nRequired by AccessConnection: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/accessfilter/",
	"title": "AccessFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AccessFilter {\r\raccessID: [ID] \r\r\rgroup: [ID] \r\r}\r\r\rFields accessID([ID]):\r\r\rgroup([ID]):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/accessfilterinput/",
	"title": "AccessFilterInput",
	"tags": [],
	"description": "",
	"content": " Include OR exclude accesses in this specific search query. If not specified, default accesses will be used. Only one list (includes or excludes) MUST be used.\nGraphQL schema definition type AccessFilterInput {\r\rincludes: [ID!] \r\r\rexcludes: [ID!] \r\r}\r\r\rFields includes([ID!]):\rThese Access IDs will overwrite the default configuration. Only the IDs on this list will be used in the search query.\r\rexcludes([ID!]):\rThese Access IDs will overwrite the default configuration. The IDs on this list will be excluded from the search query.\r\r\nRequired by FilterInput: \rFilter that selects the filter criteria which will be used in this availability. Currently you can only choose the accesses. You must choose one of them, include or exclude, or the other alternative isn\u0026#39;t specified anything. If input both, you will receive a validation error that indicates this error.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/accessinput/",
	"title": "AccessInput",
	"tags": [],
	"description": "",
	"content": " Access input\nGraphQL schema definition type AccessInput {\r\rname: String! \r\r\risActive: Boolean \r\r\rcode: ID \r\r\rsupplier: String \r\r\risTest: Boolean \r\r\ruser: String \r\r\rpassword: String \r\r\rurls: UrlsInput \r\r\rparameters: [ParameterInput] \r\r\rmarkets: [String!] \r\r\rrateRules: [RateRulesType!] \r\r\rshared: String \r\r\rgroup: ID \r\r}\r\r\rFields name(String!):\rAccess descriptive unique name\r\risActive(Boolean):\rIndicates if Access is active\r\rcode(ID):\rAccess code.\r\rsupplier(String):\rSupplier for this Access\r\risTest(Boolean):\rIndicates if Access can be used for testing or not\r\ruser(String):\rUser code to connect to supplier\r\rpassword(String):\rPassword for the connection\r\rurls(UrlsInput):\rSpecific URLs\r\rparameters([ParameterInput]):\rList of parameters for additional information\r\rmarkets([String!]):\rMarkets allowed for the Access\r\rrateRules([RateRulesType!]):\rBusiness rule types for the Access\r\rshared(String):\rParent Access if Shared Access.\r\rgroup(ID):\rDefault group where the access will be visible.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/accesssupplierinput/",
	"title": "AccessSupplierInput",
	"tags": [],
	"description": "",
	"content": " Supplier input for data access management API\nGraphQL schema definition type AccessSupplierInput {\r\rcode: String! \r\r\rdll: String! \r\r\risActive: Boolean! \r\r\rgroups: [SupplierGroupInput!] \r\r}\r\r\rFields code(String!):\rsupplier code\r\rdll(String!):\rsupplier instance\r\risActive(Boolean!):\rIndicates if the supplier is active.\r\rgroups([SupplierGroupInput!]):\rgroups related to this supplier\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/addon/",
	"title": "AddOn",
	"tags": [],
	"description": "",
	"content": " Additional information about the option\nGraphQL schema definition type AddOn {\r\rkey: String! \r\r\rvalue: JSON! \r\r}\r\r\rFields key(String!):\rContains keyword/ID to identify the AddOn.\r\rvalue(JSON!):\rContains AddOn values.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/addons/",
	"title": "AddOns",
	"tags": [],
	"description": "",
	"content": " Additional information about the option\nGraphQL schema definition type AddOns {\r\rdistribution: [AddOn!] \r\rShow deprecated fields\r\r\rdistribute: : JSON // \r\r\r\r}\r\r\rFields distribution([AddOn!]):\rExtra information from the distribution layer\r\r\nRequired by HotelOptionSearch: \rAn option includes hotel information, meal plan, total price, conditions and room description\r\rHotelOptionQuote: \rContains information about quote(s)\r\rHotelBookingDetail: \rContains information about booking\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/adminmutation/",
	"title": "AdminMutation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AdminMutation {\r\rcreateAccess(\rinput: AccessInput!,\r): Access \r\r\rupdateAccess(\rinput: AccessInput!,\r): Access \r\r\rgrantAccessToGroup(\rinput: GroupInput!,\r): Access \r\r\rdeleteAccessFromGroup(\rinput: GroupInput!,\r): Access \r\r\rgrantSupplierToGroup(\rinput: GroupInput!,\r): Supplier \r\r\rdeleteSupplierFromGroup(\rinput: GroupInput!,\r): Supplier \r\r\rgrantClientToGroup(\rinput: GroupInput!,\r): Client \r\r\rdeleteClientFromGroup(\rinput: GroupInput!,\r): Client \r\r\rcreateClient(\rinput: CreateClientInput!,\r): Client \r\r\rupdateClient(\rinput: UpdateClientInput!,\r): Client \r\r\rcreateOrganization(\rorganization: CreateOrganizationInput!,\r): Organization! \r\r\rcreateMember(\rmember: CreateMemberInput!,\r): Member! \r\r\rcreateGroup(\rgroup: CreateGroupInput!,\r): Group! \r\r\rupdateMember(\rmember: UpdateMemberInput!,\r): Member! \r\r\rupdateGroup(\rgroup: UpdateGroupInput!,\r): Group! \r\r\rdeleteMember(\rmember: [DeleteMemberInput!]!,\r): Member! \r\r\rdeleteGroup(\rgroup: DeleteGroupInput!,\r): Group! \r\r}\r\r\rFields createAccess(Access):\rCreates an Access\r\rupdateAccess(Access):\rUpdates an Access\r\rgrantAccessToGroup(Access):\rGrants Access visibility to a group\r\rdeleteAccessFromGroup(Access):\rRemoves Access visibility to groups\r\rgrantSupplierToGroup(Supplier):\rGrants Supplier visibility to a group\r\rdeleteSupplierFromGroup(Supplier):\rRemoves Supplier visibility to groups\r\rgrantClientToGroup(Client):\rGrants Client visibility to a group.\r\rdeleteClientFromGroup(Client):\rRemoves Client visibility to groups.\r\rcreateClient(Client):\rCreates a Client.\r\rupdateClient(Client):\rUpdates a Client.\r\rcreateOrganization(Organization!):\rCreate organization. Require an user to be specified as the owner of the group.\r\rcreateMember(Member!):\rCreate member; requires specific group and role\r\rcreateGroup(Group!):\rCreate group; group \u0026#34;owner\u0026#34; is optional\r\rupdateMember(Member!):\rUpdate member additions or remove roles\r\rupdateGroup(Group!):\rUpdate group additions or remove APIs\r\rdeleteMember(Member!):\rDelete a member from specific group\r\rdeleteGroup(Group!):\rDelete group and members from this group\r\r\nRequired by Mutation: \rMutations are operations that change or update data on the server\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/adminquery/",
	"title": "AdminQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type AdminQuery {\r\raccesses(\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\rfilter: AccessFilter,\r\r\r\r\r): AccessConnection \r\r\rsuppliers(\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\rfilter: SupplierFilter,\r\r\r\r\r): SupplierConnection \r\r\rclients(\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\rfilter: ClientFilter,\r\r\r\r\r): ClientConnection \r\r\rserviceApi(\rfilter: ServiceApiFilter,\r): ServiceApi \r\r\rorganizations(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): OrganizationConnection! \r\r\rproducts(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): ProductConnection! \r\r\rmembers(\r\r\r\rcodes: [ID!],\r\r\r\r\rtype: MemberType,\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): MemberConnection! \r\r\rgroups(\r\r\r\rcodes: [ID!],\r\r\r\r\rtype: GroupType,\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): GroupConnection! \r\r\rapis(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): APIConnection! \r\r\rresources(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): ResourceConnection! \r\r\rroles(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): RoleConnection! \r\r\roperations(\r\r\r\rcodes: [ID!],\r\r\r\r\rtype: OperationType,\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): OperationConnection! \r\r}\r\r\rFields accesses(AccessConnection):\rObtain a list of accesses for a filter\r\rsuppliers(SupplierConnection):\rObtain all suppliers for a filter.\r\rclients(ClientConnection):\rObtain all clients for a filter.\r\rserviceApi(ServiceApi):\rObtain a ServiceAPI\r\rorganizations(OrganizationConnection!):\rOrganizations list; specify organization codes to filter organizations\r\rproducts(ProductConnection!):\rMembers list; specify member codes to filter members\r\rmembers(MemberConnection!):\rMembers list; specify member codes to filter members.\r\rgroups(GroupConnection!):\rGroups list; specify group codes to filter groups.\r\rapis(APIConnection!):\rApis list; specify api codes to filter apis.\r\rresources(ResourceConnection!):\rResources list; specify resource codes to filter resources.\r\rroles(RoleConnection!):\rRoles list; specify role codes to filter roles.\r\roperations(OperationConnection!):\rOperations list; specify operations codes to filter operations.\r\r\nRequired by Query: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/interfaces/advisemessage/",
	"title": "AdviseMessage",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface AdviseMessage {\r\rcode: String! \r\r\rtype: String! \r\r\rdescription: String! \r\r}\r\r\rFields code(String!):\rTODO: Error code: The following codes can be returned: XXX: XXXXXXXXX XXXXXX\r\rtype(String!):\rTODO: Error type: The following types are valid: XXX: asd asdñoajskd lña ld\r\rdescription(String!):\rError description\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/amenity/",
	"title": "Amenity",
	"tags": [],
	"description": "",
	"content": " An Amenity is defined as something intended to make life more pleasant or comfortable for people. Examples include: swimming pools, shopping centers, etc.\nGraphQL schema definition type Amenity {\r\rcode: String! \r\r\rtype: ApplicationAreaType! \r\r\rtexts(\rlanguages: [Language!],\r): [Text!]! \r\r}\r\r\rFields code(String!):\rCode\r\rtype(ApplicationAreaType!):\rIndicates the type of Amenity.\r\rtexts([Text!]!):\rContains the descriptive\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/applicationareatype/",
	"title": "ApplicationAreaType",
	"tags": [],
	"description": "",
	"content": " Indicates where it applies\nGraphQL schema definition \renum\rApplicationAreaType{\r\r\rHOTEL,\r\r\r\rROOM,\r\r\r\rSERVICE,\r\r\r\rGENERAL,\r\r\r} \r Required by Amenity: \rAn Amenity is defined as something intended to make life more pleasant or comfortable for people. Examples include: swimming pools, shopping centers, etc.\r\rMedia: \rContains media information.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/auditdata/",
	"title": "AuditData",
	"tags": [],
	"description": "",
	"content": " Data sent and received in the supplier’s native format.\nGraphQL schema definition type AuditData {\r\rtransactions: [Transactions!]! \r\r\rtimeStamp: DateTime! \r\r\rprocessTime: Float! \r\r}\r\r\rFields transactions([Transactions!]!):\rList of transactions data\r\rtimeStamp(DateTime!):\rTimeStamp\r\rprocessTime(Float!):\rProcess time in milliseconds (ms)\r\r\nRequired by HotelSearch: \rResults from Avail Hotel; contains all the available options for a given date and itinerary\r\rResponse: \r\r\rHotelQuote: \r\r\rHotelBooking: \r\r\rHotelBookPayload: \r\r\rHotelCancelPayload: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/bed/",
	"title": "Bed",
	"tags": [],
	"description": "",
	"content": " Contains information about a bed.\nGraphQL schema definition type Bed {\r\rtype: String \r\r\rdescription: String \r\r\rcount: Int \r\r\rshared: Boolean \r\r}\r\r\rFields type(String):\rSpecifies the bed type\r\rdescription(String):\rDescription about the bed\r\rcount(Int):\rIndicates number of beds in a room\r\rshared(Boolean):\rSpecifies if the bed is shared or not\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/board/",
	"title": "Board",
	"tags": [],
	"description": "",
	"content": " Board type.\nGraphQL schema definition type Board {\r\rcode: ID! \r\r\rboardData: BoardData \r\r\rerror: [Error!] \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\rBoard ID\r\rboardData(BoardData):\rBoard data\r\rerror([Error!]):\rErrors that abort services\r\rcreatedAt(DateTime!):\rDate created\r\rupdatedAt(DateTime!):\rDate updated\r\r\nRequired by BoardEdge: \rBoardList Edge definition\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/boardconnection/",
	"title": "BoardConnection",
	"tags": [],
	"description": "",
	"content": " BoardList definition\nGraphQL schema definition type BoardConnection {\r\redges: [BoardEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([BoardEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequired by HotelXQuery: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/boarddata/",
	"title": "BoardData",
	"tags": [],
	"description": "",
	"content": " Board data\nGraphQL schema definition type BoardData {\r\rcode: ID! \r\r\rboardCode: String! \r\r\rtexts(\rlanguages: [Language!],\r): [Text!] \r\r}\r\r\rFields code(ID!):\rInternal code for checking availability\r\rboardCode(String!):\rCode of the hotel in the Supplier selected\r\rtexts([Text!]):\rLabel\r\r\nRequired by Board: \rBoard type.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/boardedge/",
	"title": "BoardEdge",
	"tags": [],
	"description": "",
	"content": " BoardList Edge definition\nGraphQL schema definition type BoardEdge {\r\rcursor: String! \r\r\rnode: Board \r\r}\r\r\rFields cursor(String!):\r\r\rnode(Board):\r\r\r\nRequired by BoardConnection: \rBoardList definition\r\r\n"
},
{
	"uri": "/hotelx/howtos/howto-book/",
	"title": "Book",
	"tags": [],
	"description": "",
	"content": " Flow to book\nHotelX Settings In HotelX we have differents configuration level settings for a request. With settings, you can configure some aspect of the request:\n   Field Description     Context Indicates the context codes that you want to send and to receive.   Timeout Set request timeout in the differents call types:* search * quote * book (includes book, cancel and booking)    Language What language you want to do the request.   Currency Indicates the currency to send to the suppliers.   Nationality Indicates the nationality to send to the suppliers.   Market Indicates the market to send to the suppliers.   Business Rules This rules are used to send directly to the integration, and affected to the supplier response.\n* Options Quota: number of options returned via integration.\n* Type: Choose priority of product    How we have said some lines before, we have three ways to indicated this settings.\nWe are going to begin with the most specific until the most general.\nSettings per request This setting overwrites all others.\nYou must have permission to overwrite settings, if you don\u0026rsquo;t have this permission you won\u0026rsquo;t be able to change the configuration on runtime, that is, to each request.\nThe fields are the same in the three levels, only that the information is overwritten in lower levels. So, request settings overwrite all others settings.\nSettings per client The settings in this level are used when you don’t overwrite settings to request level.\nHowever, if you have the same client in different groups, you can set different settings to each one. In this case, you must specify which group you want to use in the request, to choose which configuration to use.\nSettings per HotelX And the last one, settings per hotelX instance. These settings are in the higher level, in the case that you haven\u0026rsquo;t got client settings and you don\u0026rsquo;t specify it in the request, the settings are got from hotelX instance, this setting is mandatory.\nExecute a plugin A plugin execution can be specified in any request’s HotelSettingsInput and must specify in which step has to be executed. The plugin type and name are mandatory in order to identify a plugin instance.\n\u0026quot;plugins\u0026quot;: { \u0026quot;step\u0026quot;: PluginStepType, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;type\u0026quot;: PluginType, \u0026quot;name\u0026quot;: plugin name (its unique), \u0026quot;parameters\u0026quot;: [] } ] }  Develop your own plugin Plugins are a Go language feature and we are using the native package in order to implement them. Therefore, a plugin is simply a go file that contains a set of functions that we will specify, the interface is yet to be defined.\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/bookpaxinput/",
	"title": "BookPaxInput",
	"tags": [],
	"description": "",
	"content": " Input BookPax contains basic information abaout pax suach as name, surname and age.\nGraphQL schema definition type BookPaxInput {\r\rname: String! \r\r\rsurname: String! \r\r\rage: Int! \r\r}\r\r\rFields name(String!):\rThe guest\u0026#39;s first name\r\rsurname(String!):\rThe guest\u0026#39;s last name\r\rage(Int!):\rThe guest\u0026#39;s age\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/bookreferenceinput/",
	"title": "BookReferenceInput",
	"tags": [],
	"description": "",
	"content": " Reference object that contains the client reference and/or supplier reference.\nGraphQL schema definition type BookReferenceInput {\r\rclient: String \r\r\rsupplier: String \r\r}\r\r\rFields client(String):\rThe client\u0026#39;s reference\r\rsupplier(String):\rThe Supplier\u0026#39;s reference\r\r\nRequired by HotelCancelInput: \rCancellation Criteria.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/bookroominput/",
	"title": "BookRoomInput",
	"tags": [],
	"description": "",
	"content": " Input BookRoom contains list of pax and the room\u0026rsquo;s reference.\nGraphQL schema definition type BookRoomInput {\r\roccupancyRefId: Int! \r\r\rpaxes: [BookPaxInput!]! \r\r}\r\r\rFields occupancyRefId(Int!):\rThe room\u0026#39;s reference in the booking\r\rpaxes([BookPaxInput!]!):\rThe list or lists of paxes of the room\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/bookstatustype/",
	"title": "BookStatusType",
	"tags": [],
	"description": "",
	"content": " Book status\nGraphQL schema definition \renum\rBookStatusType{\r\r\rOK,\r\r\r\rKO,\r\r\r\rON_REQUEST,\r\r\r\rCANCELLED,\r\r\r\rUNKNOWN,\r\r\r} \r Required by HotelBookingDetail: \rContains information about booking\r\rHotelCancelDetail: \rContains information about cancel\r\r\n"
},
{
	"uri": "/travelgatex/reference/interfaces/bookableoptionsearch/",
	"title": "BookableOptionSearch",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface BookableOptionSearch {\r\rsupplierCode: String! \r\r\raccessCode: String! \r\r\rid: String! \r\r}\r\r\rFields supplierCode(String!):\rSupplier that offers this option.\r\raccessCode(String!):\rAccess code of this option.\r\rid(String!):\rIndicates the id to be used on Quote as key\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/booking/",
	"title": "Booking",
	"tags": [],
	"description": "",
	"content": " Returns detailed information about books.\nGraphQL schema definition type Booking {\rShow deprecated fields\r\r\rhotel(\rcriteria: HotelCriteriaBookingInput!,\rsettings: HotelSettingsInput,\r): HotelBooking \r// deprecated from 2017-11-21. You can find it in query at HotelX\r\r\r}\r\r\rRequired by Query: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/bookingcriteriatype/",
	"title": "BookingCriteriaType",
	"tags": [],
	"description": "",
	"content": " Indicates the type of criteria in the request of the booking list\nGraphQL schema definition \renum\rBookingCriteriaType{\r\r\rDATES,\r\r\r\rREFERENCES,\r\r\r} \r Required by HotelCriteriaBookingInput: \rCriteria of book contains basic information to find a book or books.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/bookinghotel/",
	"title": "BookingHotel",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type BookingHotel {\r\rcreationDate: Date \r\r\rcheckIn: Date \r\r\rcheckOut: Date \r\r\rhotelCode: String \r\r\rhotelName: String \r\r\rboardCode: String \r\r\roccupancies: [Occupancy!] \r\r\rrooms: [BookingRoom!] \r\r}\r\r\rFields creationDate(Date):\rCreation date of the booking. Format: YYYY-MM-DD\r\rcheckIn(Date):\rCheck-in date for booking Format: YYYY-MM-DD\r\rcheckOut(Date):\rCheck-out date for the booking. Format: YYYY-MM-DD\r\rhotelCode(String):\rCode of the hotel in the context selected.\r\rhotelName(String):\rName of the hotel.\r\rboardCode(String):\rCode of the board in the context selected.\r\roccupancies([Occupancy!]):\rList of occupancies for the request\r\rrooms([BookingRoom!]):\rList of rooms.\r\r\nRequired by HotelBookingDetail: \rContains information about booking\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/bookingroom/",
	"title": "BookingRoom",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type BookingRoom {\r\roccupancyRefId: Int \r\r\rcode: String \r\r\rdescription: String \r\r\rprice: Price \r\r}\r\r\rFields occupancyRefId(Int):\rID reference to the occupancy\r\rcode(String):\rIndicates the room code\r\rdescription(String):\rDescription about the room\r\rprice(Price):\rTotal price for all days.\r\r\n"
},
{
	"uri": "/travelgatex/reference/scalars/boolean/",
	"title": "Boolean",
	"tags": [],
	"description": "",
	"content": " The Boolean scalar type represents true or false.\nGraphQL schema definition scalar Boolean\r\r\rRequired by AccessData: \r\r\rSupplierData: \r\r\rProvider: \rTemporary type to use only during SQL server\u0026#39;s lifetime\r\rPageInfo: \r\r\rSupplierFilter: \r\r\rClientFilter: \r\r\rClientData: \r\r\rOrganizationData: \r\r\rGroupCommonData: \r\r\rGroupData: \r\r\rMember: \r\r\rRoleData: \r\r\rHotelData: \rHotel data\r\rDestinationData: \rInformation about destinantion\r\rHotelSettingsInput: \rSettings that you can edit for this avail. Values are loaded by default in our Back Office.\r\rSettingsBaseInput: \rContains the time out and business rules of a supplier or an access.\r\rRoom: \rContains the room information of the option returned.\r\rPrice: \rPrice indicates the value of the room/option. Supplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.\r\rPriceable: \r\r\rMarkup: \rInforms markup applied over supplier price.\r\rBed: \rContains information about a bed.\r\rSupplement: \rSupplement that it can be or its already added to the option returned. Contains all the information about the supplement.\r\rSurcharge: \rSurcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.\r\rCancelPolicy: \rInformation about a policy cancellation.\r\rOperationDetailed: \r\r\rMutation: \rMutations are operations that change or update data on the server\r\rAccessInput: \rAccess input\r\rCreateClientInput: \r\r\rUpdateClientInput: \r\r\rDeltaPriceInput: \rInput delta price, indicates price variation permitted by the client\r\rSupplierGroup: \rgroup related to a supplier\r\rConnectUser: \rData related to a connected user and its groups\r\rConnectUserGroup: \rgroup related to a connect user\r\rAccessConfigurationInput: \rThe information required to access the supplier\u0026#39;s system.\r\rAccessConnectUserInput: \rConnect user input for data access management API\r\rConnectUserGroupInput: \rgroup related to a connect user\r\rAccessSupplierInput: \rSupplier input for data access management API\r\rSupplierGroupInput: \rgroup related to a supplier\r\rIdAccessConfigurationInput: \r\r\rMappeaAddOrganizationInput: \r# AddOrganization\r\rMappeaEditOrganizationInput: \r# EditOrganization\r\rLegacyData: \rThe URI type represents a URI values. A good example mith be an Hotel Image URL. In queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: \u0026#34;http:\\www.travelgatex.com\u0026#34;.\r\r "
},
{
	"uri": "/travelgatex/tutorials/ota-site/",
	"title": "Build An OTA",
	"tags": [],
	"description": "Build Your Own Full Fledged OTA",
	"content": " Online Travel Agency written in Angular For this quickstart tutorial, we have prepared a repository that contains the full Angular code for the OTA clone. All you need to do is to get TravelgateX credentials and connect it with the Angular application. Let\u0026rsquo;s get started!\nOTA Angular\n"
},
{
	"uri": "/travelgatex/reference/objects/businessrules/",
	"title": "BusinessRules",
	"tags": [],
	"description": "",
	"content": " LList of business rules for filtering options based on your interests.\nGraphQL schema definition type BusinessRules {\r\roptionsQuota: Int! \r\r\rbusinessRulesType: BusinessRulesType! \r\r}\r\r\rFields optionsQuota(Int!):\rOptions quota per availability; numbers of options based on availability\r\rbusinessRulesType(BusinessRulesType!):\rDifferent business rules for filtering options that you are interested in\r\r\nRequired by DefaultSettings: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/businessrulesinput/",
	"title": "BusinessRulesInput",
	"tags": [],
	"description": "",
	"content": " List of business rules to use as filter on the options.\nGraphQL schema definition type BusinessRulesInput {\r\roptionsQuota: Int \r\r\rbusinessRulesType: BusinessRulesType \r\r}\r\r\rFields optionsQuota(Int):\rOptions quota per search. Maximum numbers of options to be returned by the search query.\r\rbusinessRulesType(BusinessRulesType):\rDifferent business rules to filter the returned options.\r\r\nRequired by HotelSettingsInput: \rSettings that you can edit for this avail. Values are loaded by default in our Back Office.\r\rSettingsBaseInput: \rContains the time out and business rules of a supplier or an access.\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/businessrulestype/",
	"title": "BusinessRulesType",
	"tags": [],
	"description": "",
	"content": " Business rules type\nGraphQL schema definition \renum\rBusinessRulesType{\r\r\rCHEAPER_AMOUNT,\r\r\r\rROOM_TYPE,\r\r\r} \r Required by BusinessRulesInput: \rList of business rules to use as filter on the options.\r\rBusinessRules: \rLList of business rules for filtering options based on your interests.\r\rDefaultSettingsBusinessRulesInput: \rInput delta price, indicates the price variation permitted by the client before failing the booking.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/cancelpenalty/",
	"title": "CancelPenalty",
	"tags": [],
	"description": "",
	"content": " Contains information for cancellation penalities..\nGraphQL schema definition type CancelPenalty {\r\rhoursBefore: Int! \r\r\rpenaltyType: CancelPenaltyType! \r\r\rcurrency: Currency! \r\r\rvalue: Float! \r\r}\r\r\rFields hoursBefore(Int!):\rCancellation fees applicable X number of hours before the check-in date\r\rpenaltyType(CancelPenaltyType!):\rType of penalty; this can be Nights, Percent or Import\r\rcurrency(Currency!):\rCurrency used in the cancellation policy\r\rvalue(Float!):\rValue of the cancellation policy\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/cancelpenaltytype/",
	"title": "CancelPenaltyType",
	"tags": [],
	"description": "",
	"content": " Options type\nGraphQL schema definition \renum\rCancelPenaltyType{\r\r\rNIGHTS,\r\r\r\rPERCENT,\r\r\r\rIMPORT,\r\r\r} \r Required by CancelPenalty: \rContains information for cancellation penalities..\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/cancelpolicy/",
	"title": "CancelPolicy",
	"tags": [],
	"description": "",
	"content": " Information about a policy cancellation.\nGraphQL schema definition type CancelPolicy {\r\rrefundable: Boolean! \r\r\rcancelPenalties: [CancelPenalty!] \r\r}\r\r\rFields refundable(Boolean!):\rIndicates if the option is refundable or non-refundable\r\rcancelPenalties([CancelPenalty!]):\rList of cancellation penalties\r\r\nRequired by HotelOptionSearch: \rAn option includes hotel information, meal plan, total price, conditions and room description\r\rHotelOptionQuote: \rContains information about quote(s)\r\rHotelBookingDetail: \rContains information about booking\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/category/",
	"title": "Category",
	"tags": [],
	"description": "",
	"content": " Category Type\nGraphQL schema definition type Category {\r\rcode: ID! \r\r\rcategoryData: CategoryData \r\r\rerror: [Error!] \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\rCategory ID\r\rcategoryData(CategoryData):\rCategory data\r\rerror([Error!]):\rErrors that abort services\r\rcreatedAt(DateTime!):\rDate created\r\rupdatedAt(DateTime!):\rDate updated\r\r\nRequired by CategoryEdge: \rCategoryList Edge definition\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/categoryconnection/",
	"title": "CategoryConnection",
	"tags": [],
	"description": "",
	"content": " CategoryList definition\nGraphQL schema definition type CategoryConnection {\r\redges: [CategoryEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([CategoryEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequired by HotelXQuery: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/categorydata/",
	"title": "CategoryData",
	"tags": [],
	"description": "",
	"content": " Category data\nGraphQL schema definition type CategoryData {\r\rcode: ID! \r\r\rcategoryCode: String! \r\r\rtexts(\rlanguages: [Language!],\r): [Text!] \r\r}\r\r\rFields code(ID!):\rInternal code for checking availability\r\rcategoryCode(String!):\rCode of the hotel based on the Supplier selected\r\rtexts([Text!]):\rLabel\r\r\nRequired by Category: \rCategory Type\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/categoryedge/",
	"title": "CategoryEdge",
	"tags": [],
	"description": "",
	"content": " CategoryList Edge definition\nGraphQL schema definition type CategoryEdge {\r\rcursor: String! \r\r\rnode: Category \r\r}\r\r\rFields cursor(String!):\r\r\rnode(Category):\r\r\r\nRequired by CategoryConnection: \rCategoryList definition\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/chargetype/",
	"title": "ChargeType",
	"tags": [],
	"description": "",
	"content": " Charge Type\nGraphQL schema definition \renum\rChargeType{\r\r\rINCLUDE,\r\r\r\rEXCLUDE,\r\r\r} \r Required by Supplement: \rSupplement that it can be or its already added to the option returned. Contains all the information about the supplement.\r\rSurcharge: \rSurcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/client/",
	"title": "Client",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Client {\r\rcode: ID! \r\r\rclientData: ClientData \r\r\rerror: [Error!] \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\r\r\rclientData(ClientData):\r\r\rerror([Error!]):\rErrors that abort services\r\rcreatedAt(DateTime!):\rDate created\r\rupdatedAt(DateTime!):\rDate updated\r\r\nRequired by ClientEdge: \r\r\rStatsData: \r\r\rAdminMutation: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/clientconnection/",
	"title": "ClientConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientConnection {\r\redges: [ClientEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([ClientEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequired by AdminQuery: \r\r\rOrganizationData: \r\r\rGroupCommonData: \r\r\rGroupData: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/clientdata/",
	"title": "ClientData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientData {\r\rcode: ID! \r\r\rname: String! \r\r\risActive: Boolean! \r\r}\r\r\rFields code(ID!):\rID identifier of a Client\r\rname(String!):\rClient complete name\r\risActive(Boolean!):\rIndicates whether a Client is active or inactive\r\r\nRequired by Client: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/clientedge/",
	"title": "ClientEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientEdge {\r\rcursor: String! \r\r\rnode: Client \r\r}\r\r\rFields cursor(String!):\r\r\rnode(Client):\r\r\r\nRequired by ClientConnection: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/clientfilter/",
	"title": "ClientFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ClientFilter {\r\rclientID: [ID] \r\r\rname: [String!] \r\r\rgroupID: [ID] \r\r\risActive: Boolean \r\r}\r\r\rFields clientID([ID]):\r\r\rname([String!]):\r\r\rgroupID([ID]):\r\r\risActive(Boolean):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/configurationinput/",
	"title": "ConfigurationInput",
	"tags": [],
	"description": "",
	"content": " The information and credentials required to access the supplier’s system.\nGraphQL schema definition type ConfigurationInput {\r\rusername: String \r\r\rpassword: String \r\r\rurls: UrlsInput! \r\r\rparameters: [ParameterInput!] \r\r\rmarkets: [String!] \r\r\rrateRules: [RateRulesType!] \r\r}\r\r\rFields username(String):\rUser name for the connection.\r\rpassword(String):\rPassword for the connection\r\rurls(UrlsInput!):\rURL or endpoint for the connection.\r\rparameters([ParameterInput!]):\rList of parameters with additional required information.\r\rmarkets([String!]):\rSource Markets allowed for the Access\r\rrateRules([RateRulesType!]):\rRateRules allowed for the access.\r\r\nRequired by HotelXAccessInput: \rAccessInput overwrites an existent access in our Back Office or creates a new one to be used in this search query only. An access object contains its own code, configuration and settings.\r\rAccessConfigurationInput: \rThe information required to access the supplier\u0026#39;s system.\r\rIdAccessConfigurationInput: \r\r\r\n"
},
{
	"uri": "/admin/howtos/howto-configure-permissions/",
	"title": "Configure HotelX Security",
	"tags": [],
	"description": "",
	"content": " Granting Permissions This topic describes how to configure permissions for a organization using HotelX and Stats\nBefore you begin  Read about IAM, which contains information about how TravelgateX manages security Read about HotelX, which contains information about HotelX product  Scenario: Organization buying suppliers through HotelX In this scenario, orgnanization org_test signs on TravelgateX in order to use HotelX to buy product from suppliers.\nDistribution will be made through 2 different channels, end users will use org_test_B2C_site whereas that org_test_B2B_site will be used for business users. Every channel could be configured separately.\nPurchase will be made through accesses access_0 and access_1 which configure credentials for supplier_0 and supplier_1.\nOnce org_test completes API development, decides to implement the role permission schema provided by TravelgateX identifying its teams and members:\n   Team Members Description     CTO cto@org_test.com Manage all members and its permissions   Development dev1@org_test.com\ndev2@org_test.com Full access to HotelX and view stats   Operations operation1@org_test.com Only view stats   Backoffice backoffice1@org_test.com Permissions to Book, Cancel and Retrive Bookings through HotelX    A security implementation of this scenario will look similar to the following:\nGroup hiereachy\u0026lt;b\u0026gt;Group hiereachy\u0026lt;/b\u0026gt;Organization[Not supported by viewer]org_test[Not supported by viewer]Folders[Not supported by viewer]purchase[Not supported by viewer]Products[Not supported by viewer]HotelX_0[Not supported by viewer]Stats_0[Not supported by viewer]Resources[Not supported by viewer]Clients[Not supported by viewer]org_test_B2C_site[Not supported by viewer]org_test_B2B_site[Not supported by viewer]Accesses[Not supported by viewer]access_0[Not supported by viewer]access_1[Not supported by viewer]Suppliers[Not supported by viewer]supplier_0[Not supported by viewer]supplier_1[Not supported by viewer]Clients[Not supported by viewer]org_test_B2C_site[Not supported by viewer]org_test_B2B_site[Not supported by viewer]org.owner[Not supported by viewer]cto@org_test.com[Not supported by viewer]hotelx.booking[Not supported by viewer]backoffice1@org_test.com[Not supported by viewer]stats.viewer[Not supported by viewer]operation1@org_test.com[Not supported by viewer]hotelx.owner, stats.owner[Not supported by viewer]dev1@org_test.com, dev2@org_test.com\u0026lt;div style=\u0026ldquo;text-align: center\u0026rdquo;\u0026gt;dev1@org_test.com, dev2@org_test.com\u0026lt;/div\u0026gt;\nGroup hierarchy is organized as:\n 1 organization named org_test 1 folder named purchase, wich manages all products hired by org_test:  HotelX to manage clients, suppliers and accesses Stats to view statistics   As long as the IAM policy manage these roles:\n org.owner: All permissions over all organization resources hotelx.owner: All permissions over all HotelX resources hotelx.booking: Book Permissions (Book, Cancel and Get Bookings) over HotelX operations stats.owner: All permissions over all Stats resources stats.viewer: View permissions over Stats  "
},
{
	"uri": "/travelgatex/reference/objects/connectuser/",
	"title": "ConnectUser",
	"tags": [],
	"description": "",
	"content": " Data related to a connected user and its groups\nGraphQL schema definition type ConnectUser {\r\rcode: String! \r\r\risActive: Boolean! \r\r\rconnectUserGroups: [ConnectUserGroup!] \r\r}\r\r\rFields code(String!):\rUnique connected user of a supplier\r\risActive(Boolean!):\rIndicates whether a connected user is active\r\rconnectUserGroups([ConnectUserGroup!]):\rConnected user\u0026#39;s related data based on its groups\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/connectusergroup/",
	"title": "ConnectUserGroup",
	"tags": [],
	"description": "",
	"content": " group related to a connect user\nGraphQL schema definition type ConnectUserGroup {\r\rgroupCode: String! \r\r\risActive: Boolean! \r\r}\r\r\rFields groupCode(String!):\rGroup code of the group related to this connected user\r\risActive(Boolean!):\rIndicates if the connect user is active for its connected user\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/connectusergroupinput/",
	"title": "ConnectUserGroupInput",
	"tags": [],
	"description": "",
	"content": " group related to a connect user\nGraphQL schema definition type ConnectUserGroupInput {\r\rgroupCode: String! \r\r\risActive: Boolean! \r\r}\r\r\rFields groupCode(String!):\rGroup code of the group related to this connected user\r\risActive(Boolean!):\rIndicates if the connect user is active for its connected user\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/contact/",
	"title": "Contact",
	"tags": [],
	"description": "",
	"content": " Contact Data.\nGraphQL schema definition type Contact {\r\remail: String \r\r\rtelephone: String \r\r\rfax: String \r\r\rweb: URI \r\r}\r\r\rFields email(String):\rEmail\r\rtelephone(String):\rTelephone\r\rfax(String):\rFax\r\rweb(URI):\rWeb\r\r\nRequired by HotelData: \rHotel data\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/context/",
	"title": "Context",
	"tags": [],
	"description": "",
	"content": " Context type. Currently, only Code is necessary.\nGraphQL schema definition type Context {\r\rcode: ID! \r\r\rerror: [Error!] \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\r\r\rerror([Error!]):\rErrors that abort services\r\rcreatedAt(DateTime!):\rDate created\r\rupdatedAt(DateTime!):\rDate updated\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/coordinates/",
	"title": "Coordinates",
	"tags": [],
	"description": "",
	"content": " Geographical coordinates corresponding to a location.\nGraphQL schema definition type Coordinates {\r\rlatitude: Float! \r\r\rlongitude: Float! \r\r}\r\r\rFields latitude(Float!):\rLatitude\r\rlongitude(Float!):\rLongitude\r\r\nRequired by Location: \rIndicates the location of the hotel\r\r\n"
},
{
	"uri": "/travelgatex/reference/scalars/country/",
	"title": "Country",
	"tags": [],
	"description": "",
	"content": " The Country type represents Country values. A good example might be a Passenger Nationality. In queries or mutations, Country fields have to be specified in ISO 3166-1 alpha-2 format with enclosing double quotes \u0026ldquo;ES\u0026rdquo;.\nGraphQL schema definition scalar Country\r\r\rRequired by Location: \rIndicates the location of the hotel\r\rHotelCriteriaSearchInput: \rSearch criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.\r\rCriteriaSearch: \rSearch criteria contains destination, travel dates and the number of pax in each room.\r\rDefaultSettings: \r\r\rDefaultSettingsInput: \r\r\r "
},
{
	"uri": "/travelgatex/reference/inputobjects/createclientinput/",
	"title": "CreateClientInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type CreateClientInput {\r\rname: String! \r\r\risActive: Boolean! \r\r\rgroup: String! \r\r}\r\r\rFields name(String!):\rClient complete name\r\risActive(Boolean!):\rIndicates whether a Client is active or inactive\r\rgroup(String!):\rGroup where the client will be assigned at first\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/creategroupinput/",
	"title": "CreateGroupInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type CreateGroupInput {\r\rcode: String! \r\r\rtype: GroupType! \r\r\rinfo: String \r\r\rparent: ID! \r\r\rtemplate: Template \r\r}\r\r\rFields code(String!):\r\r\rtype(GroupType!):\r\r\rinfo(String):\r\r\rparent(ID!):\r\r\rtemplate(Template):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/creatememberinput/",
	"title": "CreateMemberInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type CreateMemberInput {\r\rcode: String \r\r\rinfo: String \r\r\rtype: MemberType! \r\r\rgroup: String! \r\r\rroles: [String!]! \r\r\rresource: String! \r\r}\r\r\rFields code(String):\r\r\rinfo(String):\r\r\rtype(MemberType!):\r\r\rgroup(String!):\r\r\rroles([String!]!):\r\r\rresource(String!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/createorganizationinput/",
	"title": "CreateOrganizationInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type CreateOrganizationInput {\r\ruser: String! \r\r\rinfo: String \r\r\rcode: String! \r\r\rtemplate: OrganizationTemplate! \r\r}\r\r\rFields user(String!):\r\r\rinfo(String):\r\r\rcode(String!):\r\r\rtemplate(OrganizationTemplate!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/criteriabookingdatesinput/",
	"title": "CriteriaBookingDatesInput",
	"tags": [],
	"description": "",
	"content": " Criteria by dates\nGraphQL schema definition type CriteriaBookingDatesInput {\r\rdateType: DateType! \r\r\rstart: Date! \r\r\rend: Date! \r\r}\r\r\rFields dateType(DateType!):\rType of date. Can be Arrival or Booking date.\r\rstart(Date!):\rStart date. Format: YYYY-MM-DD.\r\rend(Date!):\rEnd date. Format: YYYY-MM-DD.\r\r\nRequired by HotelCriteriaBookingInput: \rCriteria of book contains basic information to find a book or books.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/criteriabookingreferencesinput/",
	"title": "CriteriaBookingReferencesInput",
	"tags": [],
	"description": "",
	"content": " Criteria by references\nGraphQL schema definition type CriteriaBookingReferencesInput {\r\rhotelCode: String! \r\r\rcurrency: Currency! \r\r\rreferences: [BookReferenceInput!]! \r\r}\r\r\rFields hotelCode(String!):\rThe hotel code.\r\rcurrency(Currency!):\rThe requested currency. The API will convert to this currency if supplier returns a different one.\r\rreferences([BookReferenceInput!]!):\rContains the client reference and/or supplier reference.\r\r\nRequired by HotelCriteriaBookingInput: \rCriteria of book contains basic information to find a book or books.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/criteriasearch/",
	"title": "CriteriaSearch",
	"tags": [],
	"description": "",
	"content": " Search criteria contains destination, travel dates and the number of pax in each room.\nGraphQL schema definition type CriteriaSearch {\r\rcheckIn: Date! \r\r\rcheckOut: Date! \r\r\rhotels: [String!]! \r\r\roccupancies: [RoomCriteria!]! \r\r\rlanguage: Language \r\r\rcurrency: Currency \r\r\rnationality: Country \r\r\rmarket: String! \r\r}\r\r\rFields checkIn(Date!):\rCheck-in date for booking Format: YYYY-MM-DD\r\rcheckOut(Date!):\rCheck-out, booking date Format: YYYY-MM-DD\r\rhotels([String!]!):\rContains the list of hotels\u0026#39;s ID\r\roccupancies([RoomCriteria!]!):\rFor multi-room bookings, this array will contain multiple elements (rooms). For each room you have to specify its own occupancy.\r\rlanguage(Language):\rLanguage to be used in request\r\rcurrency(Currency):\rCurrency requested if supported by supplier\r\rnationality(Country):\rNationality of the guest (use ISO3166_1_alfa_2)\r\rmarket(String!):\rTargeted zone, country or point-ofsale-to be used in request.\r\r\nRequired by HotelSearch: \rResults from Avail Hotel; contains all the available options for a given date and itinerary\r\r\n"
},
{
	"uri": "/travelgatex/reference/scalars/currency/",
	"title": "Currency",
	"tags": [],
	"description": "",
	"content": " The Currenty type represents Currency values. A good example might be a Rate Price Currency. In queries or mutations, Currency fields have to be specified in ISO 4217 format with enclosing double quotes \u0026ldquo;EUR\u0026rdquo;.\nGraphQL schema definition scalar Currency\r\r\rRequired by HotelCriteriaSearchInput: \rSearch criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.\r\rCriteriaSearch: \rSearch criteria contains destination, travel dates and the number of pax in each room.\r\rPrice: \rPrice indicates the value of the room/option. Supplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.\r\rPriceable: \r\r\rExchange: \rProvides information about the currency of original, and its rate applied over the results returned by the Supplier.\r\rMarkup: \rInforms markup applied over supplier price.\r\rCancelPenalty: \rContains information for cancellation penalities..\r\rCriteriaBookingReferencesInput: \rCriteria by references\r\rDefaultSettings: \r\r\rDefaultSettingsInput: \r\r\r "
},
{
	"uri": "/travelgatex/reference/scalars/date/",
	"title": "Date",
	"tags": [],
	"description": "",
	"content": " The Date type represents Date values. A good example might be a Hotel CheckIn Date. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: \u0026ldquo;2017-10-22\u0026rdquo;.\nGraphQL schema definition scalar Date\r\r\rRequired by HotelCriteriaSearchInput: \rSearch criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.\r\rCriteriaSearch: \rSearch criteria contains destination, travel dates and the number of pax in each room.\r\rPriceBreakdown: \rInformation about daily price.\r\rRatePlan: \rInformation about the rate of the option returned.\r\rPromotion: \rInformation about room promotions(offers).\r\rSupplement: \rSupplement that it can be or its already added to the option returned. Contains all the information about the supplement.\r\rCriteriaBookingDatesInput: \rCriteria by dates\r\rBookingHotel: \r\r\r "
},
{
	"uri": "/travelgatex/reference/scalars/datetime/",
	"title": "DateTime",
	"tags": [],
	"description": "",
	"content": " The DateTime type represents DateTime values. A good example might be a transaction TimeSpan. In queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: \u0026ldquo;2017-10-22T13:57:31.123Z\u0026rdquo;.\nGraphQL schema definition scalar DateTime\r\r\rRequired by Access: \r\r\rNode: \r\r\rSupplier: \r\r\rClient: \r\r\rOrganization: \r\r\rGroup: \r\r\rMember: \r\r\rRole: \r\r\rResource: \r\r\rAPI: \r\r\rOperation: \r\r\rProduct: \r\r\rBoard: \rBoard type.\r\rCategory: \rCategory Type\r\rRoomStatic: \rRoom Type\r\rHotel: \rHotel Type\r\rMedia: \rContains media information.\r\rDestination: \rDestination Type\r\rStat: \r\r\rAuditData: \rData sent and received in the supplier’s native format.\r\rTransactions: \rSupplier transaction\r\rStatsFilterInput: \rFilters needed to do a search. Users (List of users), Suppliers (List of suppliers), ServiceApis (List of service apis), From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss)\r\rStats: \rThe service used to access the stats of every connection that uses the HUB\r\rStatsData: \r\r\rStatsAssert: \rAssert of an specific error\r\rContext: \rContext type. Currently, only Code is necessary.\r\r "
},
{
	"uri": "/travelgatex/reference/enums/datetype/",
	"title": "DateType",
	"tags": [],
	"description": "",
	"content": " Indicates the type of dates\nGraphQL schema definition \renum\rDateType{\r\r\rARRIVAL,\r\r\r\rBOOKING,\r\r\r} \r Required by CriteriaBookingDatesInput: \rCriteria by dates\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/defaultsettings/",
	"title": "DefaultSettings",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type DefaultSettings {\r\rconnectUser: String \r\r\rcontext: String \r\r\rlanguage: Language! \r\r\rcurrency: Currency! \r\r\rnationality: Country! \r\r\rmarket: String \r\r\rtimeouts: Timeout! \r\r\rbusinessRules: BusinessRules! \r\r}\r\r\rFields connectUser(String):\rThis field is occurs only if the authorization header is of the type JWT.. It is used for to change the user that has been set by default in the preload.\r\rcontext(String):\rIndicates the context of the I/O codes (hotel, board, room and rates)\r\rlanguage(Language!):\rLanguage to be used in request\r\rcurrency(Currency!):\rCurrency requested if supported by supplier\r\rnationality(Country!):\rNationality of the guest (use ISO3166_1_alfa_2)\r\rmarket(String):\rTargeted zone, country or point-ofsale-to be used in request.\r\rtimeouts(Timeout!):\rGroup of timeouts to be used in the differents services\r\rbusinessRules(BusinessRules!):\rBusiness rules\r\r\nRequired by Query: \r\r\rMutation: \rMutations are operations that change or update data on the server\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/defaultsettingsbusinessrulesinput/",
	"title": "DefaultSettingsBusinessRulesInput",
	"tags": [],
	"description": "",
	"content": " Input delta price, indicates the price variation permitted by the client before failing the booking.\nGraphQL schema definition type DefaultSettingsBusinessRulesInput {\r\roptionsQuota: Int! \r\r\rbusinessRulesType: BusinessRulesType! \r\r}\r\r\rFields optionsQuota(Int!):\rOptions quota per availability; numbers of options based on availability\r\rbusinessRulesType(BusinessRulesType!):\rDifferent business rules for filtering options that you are interested in\r\r\nRequired by DefaultSettingsInput: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/defaultsettingsinput/",
	"title": "DefaultSettingsInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type DefaultSettingsInput {\r\rgroupCode: String! \r\r\rconnectUser: String! \r\r\rcontext: String \r\r\rlanguage: Language! \r\r\rcurrency: Currency! \r\r\rnationality: Country! \r\r\rmarket: String! \r\r\rtimeout: TimeoutInput! \r\r\rbusinessRules: DefaultSettingsBusinessRulesInput! \r\r}\r\r\rFields groupCode(String!):\rUnique Id\r\rconnectUser(String!):\rThis field is occurs only if the authorization header is of the type JWT.. It is used for to change the user that has been set by default in the preload.\r\rcontext(String):\rIndicates the context of the I/O codes (hotel, board, room and rates)\r\rlanguage(Language!):\rLanguage to be used in request\r\rcurrency(Currency!):\rCurrency requested if supported by supplier\r\rnationality(Country!):\rNationality of the guest (use ISO3166_1_alfa_2)\r\rmarket(String!):\rTargeted zone, country or point-ofsale-to be used in request.\r\rtimeout(TimeoutInput!):\rGroup of timeouts to be used in the differents services\r\rbusinessRules(DefaultSettingsBusinessRulesInput!):\rBusiness rules\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/deletegroupinput/",
	"title": "DeleteGroupInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type DeleteGroupInput {\r\rcode: ID! \r\r}\r\r\rFields code(ID!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/deletememberinput/",
	"title": "DeleteMemberInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type DeleteMemberInput {\r\rcode: ID! \r\r\rgroup: ID! \r\r}\r\r\rFields code(ID!):\r\r\rgroup(ID!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/deltapriceinput/",
	"title": "DeltaPriceInput",
	"tags": [],
	"description": "",
	"content": " Input delta price, indicates price variation permitted by the client\nGraphQL schema definition type DeltaPriceInput {\r\ramount: Float \r\r\rpercent: Float \r\r\rapplyBoth: Boolean! \r\r}\r\r\rFields amount(Float):\rThe amount in the currency returned by the option that will be accepted by the client to be higher than the valuation price.\r\rpercent(Float):\rThe percentage accepted by the client to be higher than the valuation price.\r\rapplyBoth(Boolean!):\rIndicates that the range between valuation price and the new price does not exceed the amount and/or porcentage indicated by the client.\r\r\nRequired by HotelBookInput: \rCriteria of book.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/description/",
	"title": "Description",
	"tags": [],
	"description": "",
	"content": " Object description indicates the type and the description about something.\nGraphQL schema definition type Description {\r\rtype: DescriptionType! \r\r\rtexts: [Text!] \r\r}\r\r\rFields type(DescriptionType!):\rIndicates type of description\r\rtexts([Text!]):\rLabel\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/descriptiontype/",
	"title": "DescriptionType",
	"tags": [],
	"description": "",
	"content": " Indicates the type of description\nGraphQL schema definition \renum\rDescriptionType{\r\r\rADDITIONAL,\r\r\r\rAMENITY,\r\r\r\rACTIVITY,\r\r\r\rRESTAURANT,\r\r\r\rROOM,\r\r\r\rGENERAL,\r\r\r\rPOOL,\r\r\r\rLOCATION,\r\r\r\rHOW_TO_GET,\r\r\r} \r Required by Description: \rObject description indicates the type and the description about something.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/destination/",
	"title": "Destination",
	"tags": [],
	"description": "",
	"content": " Destination Type\nGraphQL schema definition type Destination {\r\rcode: ID! \r\r\rdestinationData: DestinationData \r\r\rerror: [Error!] \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\rDestination ID\r\rdestinationData(DestinationData):\rDestination data\r\rerror([Error!]):\rErrors that abort services\r\rcreatedAt(DateTime!):\rDate created\r\rupdatedAt(DateTime!):\rDate updated\r\r\nRequired by DestinationEdge: \rDestinationList Edge definition\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/destinationconnection/",
	"title": "DestinationConnection",
	"tags": [],
	"description": "",
	"content": " DestinationList definition\nGraphQL schema definition type DestinationConnection {\r\redges: [DestinationEdge] \r\r\rtoken: String! \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([DestinationEdge]):\r\r\rtoken(String!):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequired by HotelXQuery: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/destinationdata/",
	"title": "DestinationData",
	"tags": [],
	"description": "",
	"content": " Information about destinantion\nGraphQL schema definition type DestinationData {\r\rcode: ID! \r\r\ravailable: Boolean! \r\r\rdestinationLeaf: [String!] \r\r\rtexts(\rlanguages: [Language!],\r): [Text!]! \r\r\rclosestDestinations: [String!] \r\r\rparent: String \r\r\rtype: DestinationType \r\r}\r\r\rFields code(ID!):\rDestination Code\r\ravailable(Boolean!):\rIndicates if you can search by destination\r\rdestinationLeaf([String!]):\rReturns destination leafs of the destination.\r\rtexts([Text!]!):\rContains the destination name\r\rclosestDestinations([String!]):\rClosest destinations, indicates destinations in proximity\r\rparent(String):\rParent destination code\r\rtype(DestinationType):\rIndicates destination type, zone or city\r\r\nRequired by Location: \rIndicates the location of the hotel\r\rDestination: \rDestination Type\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/destinationedge/",
	"title": "DestinationEdge",
	"tags": [],
	"description": "",
	"content": " DestinationList Edge definition\nGraphQL schema definition type DestinationEdge {\r\rcursor: String! \r\r\rnode: Destination \r\r}\r\r\rFields cursor(String!):\r\r\rnode(Destination):\r\r\r\nRequired by DestinationConnection: \rDestinationList definition\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/destinationtype/",
	"title": "DestinationType",
	"tags": [],
	"description": "",
	"content": " Indicates the type of destination\nGraphQL schema definition \renum\rDestinationType{\r\r\rZONE,\r\r\r\rCITY,\r\r\r} \r Required by DestinationData: \rInformation about destinantion\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/durationtype/",
	"title": "DurationType",
	"tags": [],
	"description": "",
	"content": " Duration Type\nGraphQL schema definition \renum\rDurationType{\r\r\rRANGE,\r\r\r\rOPEN,\r\r\r} \r Required by Supplement: \rSupplement that it can be or its already added to the option returned. Contains all the information about the supplement.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/error/",
	"title": "Error",
	"tags": [],
	"description": "",
	"content": " Application errors\nGraphQL schema definition type Error {\r\rcode: String! \r\r\rtype: String! \r\r\rdescription: String! \r\r}\r\r\rFields code(String!):\rError code\r\rtype(String!):\rError type\r\rdescription(String!):\rError description\r\r\nRequired by GetUploadedFilesResponse: \r## GetUploadedFiles\r\rGetMappeaStatsResponse: \r\r\rOnlyStatusResponse: \r## Common Items\r\rUploadFileResponse: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/exchange/",
	"title": "Exchange",
	"tags": [],
	"description": "",
	"content": " Provides information about the currency of original, and its rate applied over the results returned by the Supplier.\nGraphQL schema definition type Exchange {\r\rcurrency: Currency! \r\r\rrate: Float! \r\r}\r\r\rFields currency(Currency!):\rProvide information about the currency of origin\r\rrate(Float!):\rProvides information about the rate applied over results\r\r\nRequired by Price: \rPrice indicates the value of the room/option. Supplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.\r\rPriceable: \r\r\rMarkup: \rInforms markup applied over supplier price.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/expiredateinput/",
	"title": "ExpireDateInput",
	"tags": [],
	"description": "",
	"content": " The card expiration date\nGraphQL schema definition type ExpireDateInput {\r\rmonth: Int! \r\r\ryear: Int! \r\r}\r\r\rFields month(Int!):\rMonth MM\r\ryear(Int!):\rYear yy\r\r\nRequired by PaymentCardInput: \rInput PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/file/",
	"title": "File",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type File {\r\rfileName: String! \r\r\rfileId: Int! \r\r\ruploadTime: String! \r\r}\r\r\rFields fileName(String!):\r\r\rfileId(Int!):\r\r\ruploadTime(String!):\r\r\r\nRequired by GetUploadedFilesData: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/filterinput/",
	"title": "FilterInput",
	"tags": [],
	"description": "",
	"content": " Filter that selects the filter criteria which will be used in this availability. Currently you can only choose the accesses. You must choose one of them, include or exclude, or the other alternative isn\u0026rsquo;t specified anything. If input both, you will receive a validation error that indicates this error.\nGraphQL schema definition type FilterInput {\r\raccess: AccessFilterInput \r\r\rrateRules: RateRulesFilterInput \r\r}\r\r\rFields access(AccessFilterInput):\rYou can specify one of the filters or any of them. In this latter case, all the configurated accesses will be executed.\r\rrateRules(RateRulesFilterInput):\rIf requested, only options with the specified rateRules will be returned\r\r\n"
},
{
	"uri": "/travelgatex/reference/scalars/float/",
	"title": "Float",
	"tags": [],
	"description": "",
	"content": " The Float scalar type represents signed double-precision fractional values as specified by IEEE 754.\nGraphQL schema definition scalar Float\r\r\rRequired by Coordinates: \rGeographical coordinates corresponding to a location.\r\rStat: \r\r\rAuditData: \rData sent and received in the supplier’s native format.\r\rPrice: \rPrice indicates the value of the room/option. Supplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.\r\rPriceable: \r\r\rExchange: \rProvides information about the currency of original, and its rate applied over the results returned by the Supplier.\r\rMarkup: \rInforms markup applied over supplier price.\r\rRule: \r\r\rCancelPenalty: \rContains information for cancellation penalities..\r\rDeltaPriceInput: \rInput delta price, indicates price variation permitted by the client\r\r "
},
{
	"uri": "/travelgatex/reference/objects/getmappeastatsdata/",
	"title": "GetMappeaStatsData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GetMappeaStatsData {\r\rsupplierMapped: String \r\r\rstartTime: String \r\r\rendTime: String \r\r\rorganizationHotels: Int \r\r\rcontextHotels: Int \r\r\rsuggestedHotels: Int \r\r}\r\r\rFields supplierMapped(String):\r\r\rstartTime(String):\r\r\rendTime(String):\r\r\rorganizationHotels(Int):\r\r\rcontextHotels(Int):\r\r\rsuggestedHotels(Int):\r\r\r\nRequired by GetMappeaStatsResponse: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/getmappeastatsresponse/",
	"title": "GetMappeaStatsResponse",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GetMappeaStatsResponse {\r\rdata: [GetMappeaStatsData] \r\r\rerror: Error \r\r\rwarnings: [Warning] \r\r}\r\r\rFields data([GetMappeaStatsData]):\r\r\rerror(Error):\r\r\rwarnings([Warning]):\r\r\r\nRequired by MappeaQuery: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/getuploadedfilesdata/",
	"title": "GetUploadedFilesData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GetUploadedFilesData {\r\rfiles: [File] \r\r}\r\r\rFields files([File]):\r\r\r\nRequired by GetUploadedFilesResponse: \r## GetUploadedFiles\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/getuploadedfilesresponse/",
	"title": "GetUploadedFilesResponse",
	"tags": [],
	"description": "",
	"content": " GetUploadedFiles GraphQL schema definition type GetUploadedFilesResponse {\r\rdata: GetUploadedFilesData \r\r\rerror: Error \r\r\rwarnings: [Warning] \r\r}\r\r\rFields data(GetUploadedFilesData):\r\r\rerror(Error):\r\r\rwarnings([Warning]):\r\r\r\nRequired by MappeaQuery: \r\r\r\n"
},
{
	"uri": "/getting-started/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": "Welcome to TravelgateX! Learn the basics of using our APIs, and start making integrations quickly and securely.\n\t\rOverview\rSee how the TravelgateX platform and APIs fit together\n\r\r\r\t\rQuickstart\rHow to get support for using our APIs\n\r\r\r\t\rConcepts\rBasic concepts for all of the TravelgateX platform\n\r\r\r\t\rPlayground\rTry our API now\n\r\r\r\rThe basic concepts of TravelgateX will help you build a wide range of travel products and services. With TravelgateX you can: Build a basic booking website, Offer curated travel offers in niche markets Create realtime apps that reveal the best deals of the moment. Anything is possible! "
},
{
	"uri": "/travelgatex/reference/objects/group/",
	"title": "Group",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Group {\r\rcode: ID! \r\r\rerror: [Error!] \r\r\rgroupData: GroupData \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\r\r\rerror([Error!]):\r\r\rgroupData(GroupData):\r\r\rcreatedAt(DateTime!):\r\r\rupdatedAt(DateTime!):\r\r\r\nRequired by GroupEdge: \r\r\rGroupData: \r\r\rAdminMutation: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/groupaccess/",
	"title": "GroupAccess",
	"tags": [],
	"description": "",
	"content": " Pairs of Groups and Accesses. All Accesses returned will belong to all the Groups in groupCodes.\nGraphQL schema definition type GroupAccess {\r\rgroupCodes: [String!]! \r\r\raccesses: [Access!] \r\r}\r\r\rFields groupCodes([String!]!):\rGroup identifiers\r\raccesses([Access!]):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/groupaccessinput/",
	"title": "GroupAccessInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupAccessInput {\r\rgroupCodes: [String!] \r\r\raccesses: [AccessConfigurationInput!]! \r\r}\r\r\rFields groupCodes([String!]):\rgroups identifiers in which the access will be associated\r\raccesses([AccessConfigurationInput!]!):\raccess related data\r\r\n"
},
{
	"uri": "/travelgatex/reference/interfaces/groupcommondata/",
	"title": "GroupCommonData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface GroupCommonData {\r\rid: ID! \r\r\rcode: ID! \r\r\rlabel: String \r\r\rtype: GroupType! \r\r\rinfo: String \r\r\rchildren(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): GroupConnection \r\r\rowner: Member \r\r\risEditable: Boolean! \r\r\rmembers(\r\r\r\rcodes: [ID!],\r\r\r\r\rtype: MemberType,\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): MemberConnection \r\r\rapis(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): APIConnection \r\r\rallMembers(\r\r\r\rcodes: [ID!],\r\r\r\r\rtype: MemberType,\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): MemberConnection \r\r\raccesses(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): AccessConnection \r\r\rsuppliers(\r\r\r\rcodes: [ID!],\r\r\r\r\raccessID: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): SupplierConnection \r\r\rclients(\r\r\r\rcodes: [ID!],\r\r\r\r\rname: [ID!],\r\r\r\r\risActive: Boolean,\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): ClientConnection \r\r}\r\r\rFields id(ID!):\r\r\rcode(ID!):\r\r\rlabel(String):\r\r\rtype(GroupType!):\r\r\rinfo(String):\r\r\rchildren(GroupConnection):\r\r\rowner(Member):\r\r\risEditable(Boolean!):\r\r\rmembers(MemberConnection):\r\r\rapis(APIConnection):\r\r\rallMembers(MemberConnection):\r\r\raccesses(AccessConnection):\r\r\rsuppliers(SupplierConnection):\r\r\rclients(ClientConnection):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/groupconnection/",
	"title": "GroupConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupConnection {\r\redges: [GroupEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([GroupEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequired by AdminQuery: \r\r\rOrganizationData: \r\r\rGroupCommonData: \r\r\rGroupData: \r\r\rMemberData: \r\r\rAPIData: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/groupdata/",
	"title": "GroupData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupData {\r\rid: ID! \r\r\rcode: ID! \r\r\rlabel: String \r\r\rtype: GroupType! \r\r\rinfo: String \r\r\rparent: Group \r\r\rchildren(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): GroupConnection \r\r\rowner: Member \r\r\risEditable: Boolean! \r\r\rproductId: Int \r\r\rresourceId: Int \r\r\rmembers(\r\r\r\rcodes: [ID!],\r\r\r\r\rtype: MemberType,\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): MemberConnection \r\r\rapis(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): APIConnection \r\r\rallMembers(\r\r\r\rcodes: [ID!],\r\r\r\r\rtype: MemberType,\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): MemberConnection \r\r\raccesses(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): AccessConnection \r\r\rsuppliers(\r\r\r\rcodes: [ID!],\r\r\r\r\raccessID: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): SupplierConnection \r\r\rclients(\r\r\r\rcodes: [ID!],\r\r\r\r\rname: [ID!],\r\r\r\r\risActive: Boolean,\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): ClientConnection \r\r}\r\r\rFields id(ID!):\r\r\rcode(ID!):\r\r\rlabel(String):\r\r\rtype(GroupType!):\r\r\rinfo(String):\r\r\rparent(Group):\r\r\rchildren(GroupConnection):\r\r\rowner(Member):\r\r\risEditable(Boolean!):\r\r\rproductId(Int):\r\r\rresourceId(Int):\r\r\rmembers(MemberConnection):\r\r\rapis(APIConnection):\r\r\rallMembers(MemberConnection):\r\r\raccesses(AccessConnection):\r\r\rsuppliers(SupplierConnection):\r\r\rclients(ClientConnection):\r\r\r\nRequired by Group: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/groupedge/",
	"title": "GroupEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupEdge {\r\rcursor: String! \r\r\rnode: Group \r\r}\r\r\rFields cursor(String!):\r\r\rnode(Group):\r\r\r\nRequired by GroupConnection: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/groupinput/",
	"title": "GroupInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type GroupInput {\r\rid: ID! \r\r\rgroups: [ID] \r\r}\r\r\rFields id(ID!):\rId of the resource permissions to be granted.\r\rgroups([ID]):\rGroups that will see this resoruce.\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/grouptype/",
	"title": "GroupType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition \renum\rGroupType{\r\r\rORG,\r\r\r\rGROUP,\r\r\r\rPROFILE,\r\r\r\rTEAM,\r\r\r\rFOLDER,\r\r\r\rPRODUCT,\r\r\r\rRESOURCE,\r\r\r\rSPECIFIC_RESOURCE,\r\r\r} \r Required by OrganizationData: \r\r\rGroupCommonData: \r\r\rGroupData: \r\r\rCreateGroupInput: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/holder/",
	"title": "Holder",
	"tags": [],
	"description": "",
	"content": " Holder object that contains the occupant\u0026rsquo;s (pax\u0026rsquo;s) name and surname.\nGraphQL schema definition type Holder {\r\rname: String! \r\r\rsurname: String! \r\r}\r\r\rFields name(String!):\rHolder\u0026#39;s name\r\rsurname(String!):\rHolder\u0026#39;s surname\r\r\nRequired by HotelBookingDetail: \rContains information about booking\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/holderinput/",
	"title": "HolderInput",
	"tags": [],
	"description": "",
	"content": " Holder object that contains the occupant\u0026rsquo;s (pax\u0026rsquo;s) name and surname.\nGraphQL schema definition type HolderInput {\r\rname: String! \r\r\rsurname: String! \r\r}\r\r\rFields name(String!):\rThe card holder\u0026#39;s name\r\rsurname(String!):\rThe card holder\u0026#39;s surname\r\r\nRequired by HotelBookInput: \rCriteria of book.\r\rPaymentCardInput: \rInput PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hotel/",
	"title": "Hotel",
	"tags": [],
	"description": "",
	"content": " Hotel Type\nGraphQL schema definition type Hotel {\r\rcode: ID! \r\r\rhotelData: HotelData \r\r\rerror: [Error!] \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\rHotel ID\r\rhotelData(HotelData):\rHotel data\r\rerror([Error!]):\rErrors that abort services\r\rcreatedAt(DateTime!):\rDate created\r\rupdatedAt(DateTime!):\rDate updated\r\r\nRequired by HotelEdge: \rHotelList Edge definition\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelbookinput/",
	"title": "HotelBookInput",
	"tags": [],
	"description": "",
	"content": " Criteria of book.\nGraphQL schema definition type HotelBookInput {\r\roptionRefId: String! \r\r\rlanguage: Language \r\r\rclientReference: String! \r\r\rdeltaPrice: DeltaPriceInput \r\r\rpaymentCard: PaymentCardInput \r\r\rremarks: String \r\r\rholder: HolderInput! \r\r\rrooms: [BookRoomInput!]! \r\r}\r\r\rFields optionRefId(String!):\rOption ID\r\rlanguage(Language):\rLanguage to be used in request\r\rclientReference(String!):\rBooking ID in client\u0026#39;s system.\r\rdeltaPrice(DeltaPriceInput):\rIndicates price variation permitted by the client.\r\rpaymentCard(PaymentCardInput):\rIf the payment is done by credit card, it\u0026#39;s mandatory to specify the payment type and the credit card information.\r\rremarks(String):\rAny customer comments for the supplier to consider.\r\rholder(HolderInput!):\rHolder\u0026#39;s basic information.\r\rrooms([BookRoomInput!]!):\rRooms within this option.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hotelbookpayload/",
	"title": "HotelBookPayload",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelBookPayload {\r\rstats(\rtoken: String!,\r): StatsRequest \r\r\rauditData: AuditData \r\r\rbooking: HotelBookingDetail \r\r\rerrors: [Error!] \r\r\rwarnings: [Warning!] \r\r}\r\r\rFields stats(StatsRequest):\rApplication stats in string format\r\rauditData(AuditData):\rData sent and received in the supplier\u0026#39;s native format.\r\rbooking(HotelBookingDetail):\rInformation about booking\r\rerrors([Error!]):\rErrors that abort services\r\rwarnings([Warning!]):\rPotentially harmful situations or errors, but ones that will not forcibly abort the service\r\r\nRequired by Mutation: \rMutations are operations that change or update data on the server\r\rHotelXMutation: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hotelbooking/",
	"title": "HotelBooking",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelBooking {\r\rstats(\rtoken: String!,\r): StatsRequest \r\r\rauditData: AuditData \r\r\rbookings: [HotelBookingDetail!] \r\r\rerrors: [Error!] \r\r\rwarnings: [Warning!] \r\r}\r\r\rFields stats(StatsRequest):\rApplication stats in string format\r\rauditData(AuditData):\rData sent and received in the supplier\u0026#39;s native format.\r\rbookings([HotelBookingDetail!]):\rDetails about booking\r\rerrors([Error!]):\rErrors that abort services\r\rwarnings([Warning!]):\rPotentially harmful situations or errors, but ones that will not forcibly abort the service\r\r\nRequired by HotelXQuery: \r\r\rBooking: \rReturns detailed information about books.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hotelbookingdetail/",
	"title": "HotelBookingDetail",
	"tags": [],
	"description": "",
	"content": " Contains information about booking\nGraphQL schema definition type HotelBookingDetail {\r\rreference: Reference! \r\r\rholder: Holder \r\r\rhotel: BookingHotel \r\r\rprice: Price \r\r\rcancelPolicy: CancelPolicy \r\r\rremarks: String \r\r\rstatus: BookStatusType! \r\r\rpayable: String \r\r\raddOns: AddOns \r\r}\r\r\rFields reference(Reference!):\rBooking ID in the Supplier\u0026#39;s system\r\rholder(Holder):\rHolder\u0026#39;s name and surname\r\rhotel(BookingHotel):\rInformation about the hotel.\r\rprice(Price):\rSpecifies the prices (Gross, Net and Amount) of the option returned.\r\rcancelPolicy(CancelPolicy):\rSpecifies cancel policies of the book returned.\r\rremarks(String):\rAdditional information about the book.\r\rstatus(BookStatusType!):\rBooking Status.\r\rpayable(String):\rPayable.\r\raddOns(AddOns):\rAdditional information about the option\r\r\nRequired by HotelBookPayload: \r\r\rHotelCancelDetail: \rContains information about cancel\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hotelcanceldetail/",
	"title": "HotelCancelDetail",
	"tags": [],
	"description": "",
	"content": " Contains information about cancel\nGraphQL schema definition type HotelCancelDetail {\r\rreference: Reference \r\r\rcancelReference: String \r\r\rstatus: BookStatusType \r\r\rprice: Price \r\r\rbooking: HotelBookingDetail \r\r}\r\r\rFields reference(Reference):\rBooking ID in the Supplier\u0026#39;s system\r\rcancelReference(String):\rCancellation ID in the Supplier\u0026#39;s system\r\rstatus(BookStatusType):\rBooking Status.\r\rprice(Price):\rSpecifies the prices (Gross, Net and Amount) of the cancellation.\r\rbooking(HotelBookingDetail):\rInformation about the booking.\r\r\nRequired by HotelCancelPayload: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelcancelinput/",
	"title": "HotelCancelInput",
	"tags": [],
	"description": "",
	"content": " Cancellation Criteria.\nGraphQL schema definition type HotelCancelInput {\r\raccessCode: String! \r\r\rlanguage: Language \r\r\rhotelCode: String! \r\r\rreference: BookReferenceInput! \r\r}\r\r\rFields accessCode(String!):\rThe name of the access to use in the request.\r\rlanguage(Language):\rThe language code.\r\rhotelCode(String!):\rThe hotel code.\r\rreference(BookReferenceInput!):\rContains the client reference and/or supplier reference. One of them is mandatory.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hotelcancelpayload/",
	"title": "HotelCancelPayload",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelCancelPayload {\r\rstats(\rtoken: String!,\r): StatsRequest \r\r\rauditData: AuditData \r\r\rcancellation: HotelCancelDetail \r\r\rerrors: [Error!] \r\r\rwarnings: [Warning!] \r\r}\r\r\rFields stats(StatsRequest):\rApplication stats in string format\r\rauditData(AuditData):\rData sent and received in the supplier\u0026#39;s native format.\r\rcancellation(HotelCancelDetail):\rInformation about cancel\r\rerrors([Error!]):\rErrors that abort services\r\rwarnings([Warning!]):\rPotentially harmful situations or errors, but ones that will not forcibly abort the service\r\r\nRequired by Mutation: \rMutations are operations that change or update data on the server\r\rHotelXMutation: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hotelconnection/",
	"title": "HotelConnection",
	"tags": [],
	"description": "",
	"content": " HotelList definition\nGraphQL schema definition type HotelConnection {\r\redges: [HotelEdge] \r\r\rtoken: String \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([HotelEdge]):\r\r\rtoken(String):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequired by HotelXQuery: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelcriteriabookinginput/",
	"title": "HotelCriteriaBookingInput",
	"tags": [],
	"description": "",
	"content": " Criteria of book contains basic information to find a book or books.\nGraphQL schema definition type HotelCriteriaBookingInput {\r\raccessCode: String! \r\r\rlanguage: Language \r\r\rtypeSearch: BookingCriteriaType! \r\r\rreferences: CriteriaBookingReferencesInput \r\r\rdates: CriteriaBookingDatesInput \r\r}\r\r\rFields accessCode(String!):\rName of the access that have to use in the request.\r\rlanguage(Language):\rThe language code.\r\rtypeSearch(BookingCriteriaType!):\rThe search type criteria.\r\rreferences(CriteriaBookingReferencesInput):\rThe references criteria.\r\rdates(CriteriaBookingDatesInput):\rThe dates criteria.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelcriteriaquoteinput/",
	"title": "HotelCriteriaQuoteInput",
	"tags": [],
	"description": "",
	"content": " The quote criteria contains the option reference id, block and language.\nGraphQL schema definition type HotelCriteriaQuoteInput {\r\roptionRefId: String! \r\r\rlanguage: Language \r\r}\r\r\rFields optionRefId(String!):\rIdentifier of the option chosen in the search.\r\rlanguage(Language):\rLanguage to be used in request\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelcriteriasearchinput/",
	"title": "HotelCriteriaSearchInput",
	"tags": [],
	"description": "",
	"content": " Search criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.\nGraphQL schema definition type HotelCriteriaSearchInput {\r\rcheckIn: Date! \r\r\rcheckOut: Date! \r\r\rhotels: [String!]! \r\r\roccupancies: [RoomInput!]! \r\r\rlanguage: Language \r\r\rcurrency: Currency \r\r\rnationality: Country \r\r\rmarket: String \r\r}\r\r\rFields checkIn(Date!):\rCheck-in date for booking Format: YYYY-MM-DD\r\rcheckOut(Date!):\rCheck-out, booking date Format: YYYY-MM-DD\r\rhotels([String!]!):\rContains the list of hotels\u0026#39;s ID\r\roccupancies([RoomInput!]!):\rFor multi-room bookings, this array will contain multiple elements (rooms). For each room you have to specify its own occupancy.\r\rlanguage(Language):\rLanguage to be used in request\r\rcurrency(Currency):\rCurrency requested if supported by supplier\r\rnationality(Country):\rNationality of the guest (use ISO3166_1_alfa_2)\r\rmarket(String):\rTargeted zone, country or point-ofsale-to be used in request.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hoteldata/",
	"title": "HotelData",
	"tags": [],
	"description": "",
	"content": " Hotel data\nGraphQL schema definition type HotelData {\r\rcode: ID! \r\r\rhotelCode: String! \r\r\rhotelCodeSupplier: String \r\r\rhotelName: String! \r\r\rcategoryCode: String! \r\r\rproperty: Property \r\r\rchainCode: String \r\r\rexclusiveDeal: Boolean! \r\r\rlocation: Location! \r\r\rcontact: Contact \r\r\rrank: [Int!]! \r\r\rcardTypes: [String!] \r\r\ramenities: [Amenity!] \r\r\rmedias: [Media!] \r\r\rdescriptions(\rtypes: [DescriptionType!],\rlanguages: [Language!],\r): [Description!] \r\r}\r\r\rFields code(ID!):\rInternal code.\r\rhotelCode(String!):\rCode to perform availability.\r\rhotelCodeSupplier(String):\rNative supplier hotel code.\r\rhotelName(String!):\rName of the hotel in the Supplier selected.\r\rcategoryCode(String!):\rHotel category (for example number of stars).\r\rproperty(Property):\rIndicates property type\r\rchainCode(String):\rHotel chain code\r\rexclusiveDeal(Boolean!):\rIndicates that the Hotel has an Exclusive Deal.\r\rlocation(Location!):\rIndicates the location of the hotel\r\rcontact(Contact):\rContact cotains information about hotel contact.\r\rrank([Int!]!):\rRank indicates the supplier categorization.\r\rcardTypes([String!]):\rList of credit cards\r\ramenities([Amenity!]):\rAmenities\r\rmedias([Media!]):\rMedias\r\rdescriptions([Description!]):\rDescriptions\r\r\nRequired by Hotel: \rHotel Type\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hoteledge/",
	"title": "HotelEdge",
	"tags": [],
	"description": "",
	"content": " HotelList Edge definition\nGraphQL schema definition type HotelEdge {\r\rcursor: String! \r\r\rnode: Hotel \r\r}\r\r\rFields cursor(String!):\r\r\rnode(Hotel):\r\r\r\nRequired by HotelConnection: \rHotelList definition\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hoteloptionquote/",
	"title": "HotelOptionQuote",
	"tags": [],
	"description": "",
	"content": " Contains information about quote(s)\nGraphQL schema definition type HotelOptionQuote {\r\roptionRefId: String! \r\r\rstatus: StatusType! \r\r\rprice: Price! \r\r\rcancelPolicy: CancelPolicy! \r\r\rremarks: String \r\r\rsurcharges: [Surcharge!] \r\r\rcardTypes: [String!] \r\r\raddOns: AddOns \r\r}\r\r\rFields optionRefId(String!):\rIndicates the valuation key\r\rstatus(StatusType!):\rThe possible values in status in response are Available (OK) or On Request (RQ).\r\rprice(Price!):\rSpecifies the prices (Gross, Net and Amount) of the option returned.\r\rcancelPolicy(CancelPolicy!):\rSpecifies cancel policies of the option returned.\r\rremarks(String):\rAdditional information about the option.\r\rsurcharges([Surcharge!]):\rList of surcharges of the option returned.\r\rcardTypes([String!]):\rList of credit cards\r\raddOns(AddOns):\rAdditional information about the option\r\r\nRequired by HotelQuote: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hoteloptionsearch/",
	"title": "HotelOptionSearch",
	"tags": [],
	"description": "",
	"content": " An option includes hotel information, meal plan, total price, conditions and room description\nGraphQL schema definition type HotelOptionSearch {\r\rsupplierCode: String! \r\r\raccessCode: String! \r\r\rmarket: String! \r\r\rhotelCode: String! \r\r\rhotelCodeSupplier: String! \r\r\rhotelName: String \r\r\rboardCode: String! \r\r\rboardCodeSupplier: String! \r\r\rpaymentType: PaymentType! \r\r\rstatus: StatusType! \r\r\roccupancies: [Occupancy!]! \r\r\rrooms: [Room!]! \r\r\rprice: Price! \r\r\rsupplements: [Supplement!] \r\r\rsurcharges: [Surcharge!] \r\r\rrateRules: [RateRulesType!] \r\r\rcancelPolicy: CancelPolicy \r\r\rremarks: String \r\r\raddOns: AddOns \r\r\rtoken: String! \r\r\rid: String! \r\r}\r\r\rFields supplierCode(String!):\rSupplier that offers this option.\r\raccessCode(String!):\rAccess code of this option.\r\rmarket(String!):\rMarket of this option.\r\rhotelCode(String!):\rCode of the hotel in the context selected.\r\rhotelCodeSupplier(String!):\rSupplier\u0026#39;s hotel code.\r\rhotelName(String):\rName of the hotel.\r\rboardCode(String!):\rCode of the board in the context selected.\r\rboardCodeSupplier(String!):\rSupplier\u0026#39;s board code.\r\rpaymentType(PaymentType!):\rIndicates the payment type of the option returned. Possible options: Merchant, Direct, Card Booking, Card check in and Mixed.\r\rstatus(StatusType!):\rThe possible values in status in response are Available (OK) or On Request (RQ).\r\roccupancies([Occupancy!]!):\rList of occupancies for the request\r\rrooms([Room!]!):\rList of rooms of the option returned.\r\rprice(Price!):\rSpecifies the prices (Gross, Net and Amount) of the option returned.\r\rsupplements([Supplement!]):\rList of supplements of the option returned.\r\rsurcharges([Surcharge!]):\rList of surcharges of the option returned.\r\rrateRules([RateRulesType!]):\rSpecifies rate rules of the option returned.\r\rcancelPolicy(CancelPolicy):\rSpecifies cancel policies of the option returned.\r\rremarks(String):\rAdditional information about the option.\r\raddOns(AddOns):\rAdditional information about the option\r\rtoken(String!):\rToken for Deep Link\r\rid(String!):\rIndicates the quote key\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hotelquote/",
	"title": "HotelQuote",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelQuote {\r\rstats(\rtoken: String!,\r): StatsRequest \r\r\rauditData: AuditData \r\r\roptionQuote: HotelOptionQuote \r\r\rerrors: [Error!] \r\r\rwarnings: [Warning!] \r\r}\r\r\rFields stats(StatsRequest):\rApplication stats in string format\r\rauditData(AuditData):\rData sent and received in the supplier\u0026#39;s native format.\r\roptionQuote(HotelOptionQuote):\rInformation about quote.\r\rerrors([Error!]):\rErrors that abort services\r\rwarnings([Warning!]):\rPotentially harmful situations or errors, but ones that will not forcibly abort the service\r\r\nRequired by HotelXQuery: \r\r\rQuote: \rReturns the total price and cancellation policies of the Option selected in the previous step (Search).\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hotelsearch/",
	"title": "HotelSearch",
	"tags": [],
	"description": "",
	"content": " Results from Avail Hotel; contains all the available options for a given date and itinerary\nGraphQL schema definition type HotelSearch {\r\rcontext: String \r\r\rstats(\rtoken: String!,\r): StatsRequest \r\r\rauditData: AuditData \r\r\rrequestCriteria: CriteriaSearch \r\r\roptions: [HotelOptionSearch!] \r\r\rerrors: [Error!] \r\r\rwarnings: [Warning!] \r\r}\r\r\rFields context(String):\rIndicates the context of the response.\r\rstats(StatsRequest):\rApplication stats in string format\r\rauditData(AuditData):\rData sent and received in the supplier\u0026#39;s native format.\r\rrequestCriteria(CriteriaSearch):\rRequest Criteria\r\roptions([HotelOptionSearch!]):\rList of options returned according to the request.\r\rerrors([Error!]):\rErrors that abort services\r\rwarnings([Warning!]):\rPotentially harmful situations or errors that won\u0026#39;t force the service to abort\r\r\nRequired by HotelXQuery: \r\r\rSearch: \rAvailable options for a given date and itinerary. It does not filter different classes, times or fares. It will always retrieve all results returned by the suppliers. The availability request is very straight forward.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelsettingsinput/",
	"title": "HotelSettingsInput",
	"tags": [],
	"description": "",
	"content": " Settings that you can edit for this avail. Values are loaded by default in our Back Office.\nGraphQL schema definition type HotelSettingsInput {\r\rcontext: String \r\rShow deprecated fields\r\r\ruseContext: : Boolean // Indicates if you want use context, or not, by default is true. @deprecated(reason: \u0026#34;deprecated from\r2017-12-12\rRedundant.\u0026#34;)\r\r\r\r\rconnectUser: : String // This field is occurs only if the authorization header is of the type JWT.. It is used to change the user that has been set by default in the preload. @deprecated(reason: \u0026#34;deprecated from\r2018-03-19\rRedundant.\u0026#34;)\r\r\r\r\r}\r\r\rFields context(String):\rIndicates the context of the I/O codes (hotel, board, room and rates)\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxaccessinput/",
	"title": "HotelXAccessInput",
	"tags": [],
	"description": "",
	"content": " AccessInput overwrites an existent access in our Back Office or creates a new one to be used in this search query only. An access object contains its own code, configuration and settings.\nGraphQL schema definition type HotelXAccessInput {\r\raccessId: ID! \r\r\rconfiguration: ConfigurationInput \r\r\rsettings: SettingsBaseInput \r\r}\r\r\rFields accessId(ID!):\rThe accessID used to identify the existing access in our Back Office in order to overwrite it. Acts as an identifier in this search. It can either exist or not.\r\rconfiguration(ConfigurationInput):\rInformation required to access the supplier\u0026#39;s system.\r\rsettings(SettingsBaseInput):\rYou can configure an special settings for any access. This level overwrites the search and supplier settings levels.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxboardqueryinput/",
	"title": "HotelXBoardQueryInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXBoardQueryInput {\r\rboardCodes: [String!] \r\r\raccess: ID! \r\r}\r\r\rFields boardCodes([String!]):\r\r\raccess(ID!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxcategoryqueryinput/",
	"title": "HotelXCategoryQueryInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXCategoryQueryInput {\r\rcategoryCodes: [String!] \r\r\raccess: ID! \r\r}\r\r\rFields categoryCodes([String!]):\r\r\raccess(ID!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxdestinationlistinput/",
	"title": "HotelXDestinationListInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDestinationListInput {\r\raccess: ID! \r\r\rdestinationCodes: [String!] \r\r\rmaxSize: Int \r\r}\r\r\rFields access(ID!):\rIndicates the access\r\rdestinationCodes([String!]):\rSearch by hotel codes\r\rmaxSize(Int):\rMaxium number of items per page\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxdestinationsearcherinput/",
	"title": "HotelXDestinationSearcherInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXDestinationSearcherInput {\r\raccess: ID! \r\r\rtext: String! \r\r\rmaxSize: Int \r\r}\r\r\rFields access(ID!):\rIndicates the access\r\rtext(String!):\rSearch by hotel name or destination name\r\rmaxSize(Int):\rMaxium number of items per type\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxhotellistinput/",
	"title": "HotelXHotelListInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXHotelListInput {\r\raccess: ID! \r\r\rhotelCodes: [String!] \r\r\rdestinationCodes: [String!] \r\r\rranks: [Int!] \r\r\rmaxSize: Int \r\r}\r\r\rFields access(ID!):\rIndicates the access\r\rhotelCodes([String!]):\rSearch by hotel codes\r\rdestinationCodes([String!]):\rSearch by destination codes, only search by minimal destinations\r\rranks([Int!]):\rFilter by supplier rank\r\rmaxSize(Int):\rMaxium number of items per page\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hotelxmutation/",
	"title": "HotelXMutation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXMutation {\r\rbook(\rinput: HotelBookInput!,\rsettings: HotelSettingsInput,\r): HotelBookPayload \r\r\rcancel(\rinput: HotelCancelInput!,\rsettings: HotelSettingsInput,\r): HotelCancelPayload \r\r\rloadFile(\rinput: String!,\r): String! \r\r}\r\r\rFields book(HotelBookPayload):\rCreates a new hotel booking consisting of an option of 1 or more rooms.\r\rcancel(HotelCancelPayload):\rCancels an existing hotel booking consisting of an option of 1 or more rooms.\r\rloadFile(String!):\r\r\r\nRequired by Mutation: \rMutations are operations that change or update data on the server\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/hotelxquery/",
	"title": "HotelXQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXQuery {\r\rboards(\rcriteria: HotelXBoardQueryInput!,\rrelay: RelayInput!,\r): BoardConnection! \r\r\rcategories(\rcriteria: HotelXCategoryQueryInput!,\rrelay: RelayInput!,\r): CategoryConnection! \r\r\rrooms(\rcriteria: HotelXRoomQueryInput!,\rrelay: RelayInput!,\r): RoomConnection! \r\r\rhotels(\r\r\r\rcriteria: HotelXHotelListInput!,\r\r\r\r\rrelay: RelayInput!,\r\r\r\r\rtoken: String,\r\r\r\r\r): HotelConnection! \r\r\rdestinations(\r\r\r\rcriteria: HotelXDestinationListInput!,\r\r\r\r\rrelay: RelayInput!,\r\r\r\r\rtoken: String,\r\r\r\r\r): DestinationConnection! \r\r\rdestinationSearcher(\rcriteria: HotelXDestinationSearcherInput!,\r): [DestinationSearchResult]! \r\r\rsearch(\r\r\r\rtoken: String,\r\r\r\r\rcriteria: HotelCriteriaSearchInput,\r\r\r\r\rsettings: HotelSettingsInput,\r\r\r\r\rfilter: FilterInput,\r\r\r\r\r): HotelSearch \r\r\rquote(\rcriteria: HotelCriteriaQuoteInput!,\rsettings: HotelSettingsInput,\r): HotelQuote \r\r\rbooking(\rcriteria: HotelCriteriaBookingInput!,\rsettings: HotelSettingsInput,\r): HotelBooking \r\r\rsearchStatusService: ServiceStatus! \r\r\rquoteStatusService: ServiceStatus! \r\r\rbookStatusService: ServiceStatus! \r\r\rcancelStatusService: ServiceStatus! \r\r\rbookingStatusService: ServiceStatus! \r\r\rmapping(\rgroupCode: String!,\r): Mapping! \r\r}\r\r\rFields boards(BoardConnection!):\rQuery to obtain Boards\r\rcategories(CategoryConnection!):\rQuery to obtain Categories\r\rrooms(RoomConnection!):\rQuery to obtain rooms\r\rhotels(HotelConnection!):\rQuery to obtain Hotels\r\rdestinations(DestinationConnection!):\rQuery to obtain Destinations\r\rdestinationSearcher([DestinationSearchResult]!):\rReturns hotels and destinations that contains the indicated text. \r\rsearch(HotelSearch):\rAvailable options of an hotel for a given date and itinerary. It does not filter different classes, times or fares. It will always retrieve all results returned by the suppliers. The availability request is very straight forward. It only requires the criteria of search (destination, travel dates and the number of pax in each room). But you must preload the other fields in our system by complete the fields absents.\r\rquote(HotelQuote):\rReturns the total price and cancellation policies of the Option selected in the previous step (Search).\r\rbooking(HotelBooking):\rReturns detailed information about books, you can indicated a list of locators or a range date.\r\rsearchStatusService(ServiceStatus!):\rReturns status of the search service.\r\rquoteStatusService(ServiceStatus!):\rReturns status of the quote service.\r\rbookStatusService(ServiceStatus!):\rReturns status of the new booking service.\r\rcancelStatusService(ServiceStatus!):\rReturns status of the cancellation service.\r\rbookingStatusService(ServiceStatus!):\rTODO: me no understand... Returns status of the booking service.\r\rmapping(Mapping!):\r\r\r\nRequired by Query: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxroomqueryinput/",
	"title": "HotelXRoomQueryInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type HotelXRoomQueryInput {\r\rroomCodes: [String!] \r\r\raccess: ID! \r\r}\r\r\rFields roomCodes([String!]):\r\r\raccess(ID!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/hotelxsupplierinput/",
	"title": "HotelXSupplierInput",
	"tags": [],
	"description": "",
	"content": " Supplier object. Contains its own settings, code and access.\nGraphQL schema definition type HotelXSupplierInput {\r\rsettings: SettingsBaseInput \r\r\rcode: String! \r\r\raccesses: [HotelXAccessInput!] \r\r}\r\r\rFields settings(SettingsBaseInput):\rYou can configure an special settings for any supplier. This level overwrites the avail settings level but not the access settings level.\r\rcode(String!):\rCode that represents a supplier in our system. This information is mandatory.\r\raccesses([HotelXAccessInput!]):\rArray of accesses that can overwrite an existing access information or include a new access for this avail.\r\r\n"
},
{
	"uri": "/travelgatex/reference/scalars/id/",
	"title": "ID",
	"tags": [],
	"description": "",
	"content": " The ID scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \u0026quot;4\u0026quot;) or integer (such as 4) input value will be accepted as an ID.\nGraphQL schema definition scalar ID\r\r\rRequired by AccessFilter: \r\r\rAccess: \r\r\rNode: \r\r\rAccessData: \r\r\rSupplier: \r\r\rSupplierData: \r\r\rProvider: \rTemporary type to use only during SQL server\u0026#39;s lifetime\r\rParameter: \rParameters for additional information for the supplier\u0026#39;s configuration.\r\rSupplierFilter: \r\r\rClientFilter: \r\r\rClient: \r\r\rClientData: \r\r\rServiceApi: \rInformation related to a Service API\r\rServiceOperation: \rInformation related to an API operation\r\rOrganization: \r\r\rOrganizationData: \r\r\rGroupCommonData: \r\r\rGroup: \r\r\rGroupData: \r\r\rMember: \r\r\rMemberData: \r\r\rRole: \r\r\rRoleData: \r\r\rResource: \r\r\rResourceData: \r\r\rAPI: \r\r\rAPIData: \r\r\rOperation: \r\r\rOperationData: \r\r\rProduct: \r\r\rProductData: \r\r\rHotelXBoardQueryInput: \r\r\rBoard: \rBoard type.\r\rBoardData: \rBoard data\r\rHotelXCategoryQueryInput: \r\r\rCategory: \rCategory Type\r\rCategoryData: \rCategory data\r\rHotelXRoomQueryInput: \r\r\rRoomStatic: \rRoom Type\r\rRoomData: \rRoom data\r\rHotelXHotelListInput: \r\r\rHotel: \rHotel Type\r\rHotelData: \rHotel data\r\rDestinationData: \rInformation about destinantion\r\rHotelXDestinationListInput: \r\r\rDestination: \rDestination Type\r\rHotelXDestinationSearcherInput: \r\r\rHotelXAccessInput: \rAccessInput overwrites an existent access in our Back Office or creates a new one to be used in this search query only. An access object contains its own code, configuration and settings.\r\rStats: \rThe service used to access the stats of every connection that uses the HUB\r\rStatsInfo: \rDetails of an specific error\r\rAccessInput: \rAccess input\r\rGroupInput: \r\r\rUpdateClientInput: \r\r\rCreateGroupInput: \r\r\rDeleteMemberInput: \r\r\rDeleteGroupInput: \r\r\rMappeaSupplierConfirmedInput: \r\r\rSupplierDetected: \r\r\rMappeaMapSupplierInput: \r# MapSupplier\r\rContext: \rContext type. Currently, only Code is necessary.\r\rIdAccessConfigurationInput: \r\r\r "
},
{
	"uri": "/travelgatex/reference/inputobjects/idaccessconfigurationinput/",
	"title": "IdAccessConfigurationInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type IdAccessConfigurationInput {\r\rid: ID! \r\r\risActive: Boolean! \r\r\rcode: String! \r\r\rsupplier: String! \r\r\rconfiguration: ConfigurationInput \r\r}\r\r\rFields id(ID!):\raccess unique identifier\r\risActive(Boolean!):\rIndicates if Access is active\r\rcode(String!):\rArbitrary not unique identifier\r\rsupplier(String!):\rSupplier to which this access belongs\r\rconfiguration(ConfigurationInput):\rInformation required to access the supplier\u0026#39;s system.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/idgroupaccessinput/",
	"title": "IdGroupAccessInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type IdGroupAccessInput {\r\rgroupCodes: [String!] \r\r\raccesses: [IdAccessConfigurationInput!]! \r\r}\r\r\rFields groupCodes([String!]):\ridentifier of the groups in which the access will be associated\r\raccesses([IdAccessConfigurationInput!]!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/scalars/int/",
	"title": "Int",
	"tags": [],
	"description": "",
	"content": " The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\nGraphQL schema definition scalar Int\r\r\rRequired by SupplierData: \r\r\rSupplierFilter: \r\r\rServiceOperation: \rInformation related to an API operation\r\rGroupData: \r\r\rRelayInput: \r\r\rHotelXHotelListInput: \r\r\rHotelXDestinationListInput: \r\r\rHotelXDestinationSearcherInput: \r\r\rPaxInput: \rPax object that contains the pax age.\r\rHotelSettingsInput: \rSettings that you can edit for this avail. Values are loaded by default in our Back Office.\r\rBusinessRulesInput: \rList of business rules to use as filter on the options.\r\rSettingsBaseInput: \rContains the time out and business rules of a supplier or an access.\r\rStatsRequest: \rContains internal information.\r\rStatAccess: \r\r\rPax: \rSpecifies the age pax. The range of what is considered an adult, infant or baby is particular to each supplier.\r\rOccupancy: \rInformation about occupancy.\r\rRoom: \rContains the room information of the option returned.\r\rBed: \rContains information about a bed.\r\rSupplement: \rSupplement that it can be or its already added to the option returned. Contains all the information about the supplement.\r\rCancelPenalty: \rContains information for cancellation penalities..\r\rBookingRoom: \r\r\rRatios: \rDetails of look to quote and look to book.\r\rOperationDetailed: \r\r\rStatsInfo: \rDetails of an specific error\r\rStatsAssert: \rAssert of an specific error\r\rFile: \r\r\rGetMappeaStatsData: \r\r\rTimeout: \r\r\rBusinessRules: \rLList of business rules for filtering options based on your interests.\r\rExpireDateInput: \rThe card expiration date\r\rBookRoomInput: \rInput BookRoom contains list of pax and the room\u0026#39;s reference.\r\rBookPaxInput: \rInput BookPax contains basic information abaout pax suach as name, surname and age.\r\rMappeaConfirmUploadInput: \r## ConfirmUpload\r\rUploadFileData: \r\r\rSupplierDetected: \r\r\rMappeaMapSupplierInput: \r# MapSupplier\r\rTimeoutInput: \r\r\rDefaultSettingsBusinessRulesInput: \rInput delta price, indicates the price variation permitted by the client before failing the booking.\r\r "
},
{
	"uri": "/travelgatex/reference/scalars/json/",
	"title": "JSON",
	"tags": [],
	"description": "",
	"content": " The JSON type makes sure that it is actually valid JSON and returns the value as a parsed JSON object/array instead of a string. In queries or mutations, JSON fields have to be specified with enclosing double quotes. Special characters have to be escaped: \u0026ldquo;{\u0026ldquo;int\u0026rdquo;: 1, \u0026ldquo;string\u0026rdquo;: \u0026ldquo;value\u0026rdquo;}\u0026ldquo;.\nGraphQL schema definition scalar JSON\r\r\rRequired by AddOns: \rAdditional information about the option\r\rAddOn: \rAdditional information about the option\r\r "
},
{
	"uri": "/travelgatex/reference/scalars/language/",
	"title": "Language",
	"tags": [],
	"description": "",
	"content": " The Language type represents Language values. A good example might be a Hotel Description Language. In queries or mutations, Language fields have to be specified in ISO 3166-1 alpha-2 format with enclosing double quotes \u0026ldquo;es\u0026rdquo;.\nGraphQL schema definition scalar Language\r\r\rRequired by Text: \r\r\rHotelCriteriaSearchInput: \rSearch criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.\r\rCriteriaSearch: \rSearch criteria contains destination, travel dates and the number of pax in each room.\r\rHotelCriteriaQuoteInput: \rThe quote criteria contains the option reference id, block and language.\r\rHotelCriteriaBookingInput: \rCriteria of book contains basic information to find a book or books.\r\rDefaultSettings: \r\r\rHotelBookInput: \rCriteria of book.\r\rHotelCancelInput: \rCancellation Criteria.\r\rDefaultSettingsInput: \r\r\r "
},
{
	"uri": "/travelgatex/reference/objects/legacydata/",
	"title": "LegacyData",
	"tags": [],
	"description": "",
	"content": " The URI type represents a URI values. A good example mith be an Hotel Image URL. In queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: \u0026ldquo;http:\\www.travelgatex.com\u0026rdquo;.\nGraphQL schema definition type LegacyData {\r\risPublic: Boolean! \r\r\rinDevelopment: Boolean \r\r\rgiataType: String! \r\r\rgiataCode: String! \r\r\risDirect: Boolean! \r\r}\r\r\rFields isPublic(Boolean!):\rIs supplier public?\r\rinDevelopment(Boolean):\rIs supplier in development?\r\rgiataType(String!):\rGiataType\r\rgiataCode(String!):\rGiata Code\r\risDirect(Boolean!):\rIs suspplier deirect?\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/location/",
	"title": "Location",
	"tags": [],
	"description": "",
	"content": " Indicates the location of the hotel\nGraphQL schema definition type Location {\r\raddress: String \r\r\rcity: String \r\r\rzipCode: String \r\r\rcountry: Country! \r\r\rcoordinates: Coordinates \r\r\rclosestDestination: DestinationData! \r\r}\r\r\rFields address(String):\rContains Hotel Address\r\rcity(String):\rContains the city\r\rzipCode(String):\rContains the zipCode.\r\rcountry(Country!):\rCountry where is the Hotel.\r\rcoordinates(Coordinates):\rGeographical coordinates corresponding to a location.\r\rclosestDestination(DestinationData!):\rClosest destination\r\r\nRequired by HotelData: \rHotel data\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/map/",
	"title": "Map",
	"tags": [],
	"description": "",
	"content": " Map codes.\nGraphQL schema definition type Map {\r\rcode: String! \r\r\rmaps: [String!] \r\r}\r\r\rFields code(String!):\rContext code.\r\rmaps([String!]):\rEquivalences of the supplier for the client code.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/mappeaaddorganizationinput/",
	"title": "MappeaAddOrganizationInput",
	"tags": [],
	"description": "",
	"content": " AddOrganization GraphQL schema definition type MappeaAddOrganizationInput {\r\rname: String! \r\r\risActive: Boolean! \r\r\risTest: Boolean! \r\r}\r\r\rFields name(String!):\r\r\risActive(Boolean!):\r\r\risTest(Boolean!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/mappeaconfirmuploadinput/",
	"title": "MappeaConfirmUploadInput",
	"tags": [],
	"description": "",
	"content": " ConfirmUpload GraphQL schema definition type MappeaConfirmUploadInput {\r\rfileId: Int! \r\r\rsuppliers: [MappeaSupplierConfirmedInput!]! \r\r}\r\r\rFields fileId(Int!):\r\r\rsuppliers([MappeaSupplierConfirmedInput!]!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/mappeaeditorganizationinput/",
	"title": "MappeaEditOrganizationInput",
	"tags": [],
	"description": "",
	"content": " EditOrganization GraphQL schema definition type MappeaEditOrganizationInput {\r\rname: String! \r\r\risActive: Boolean \r\r\risTest: Boolean \r\r}\r\r\rFields name(String!):\r\r\risActive(Boolean):\r\r\risTest(Boolean):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/mappeagetmappeastatsinput/",
	"title": "MappeaGetMappeaStatsInput",
	"tags": [],
	"description": "",
	"content": " GetMappeaStats GraphQL schema definition type MappeaGetMappeaStatsInput {\r\rorganizationName: String! \r\r\rsupplierMapped: String \r\r}\r\r\rFields organizationName(String!):\r\r\rsupplierMapped(String):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/mappeamapsupplierinput/",
	"title": "MappeaMapSupplierInput",
	"tags": [],
	"description": "",
	"content": " MapSupplier GraphQL schema definition type MappeaMapSupplierInput {\r\rrequestId: ID! \r\r\raccess: ID! \r\r\rfileId: Int! \r\r}\r\r\rFields requestId(ID!):\r\r\raccess(ID!):\r\r\rfileId(Int!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/mappeamutation/",
	"title": "MappeaMutation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MappeaMutation {\r\rconfirmUpload(\rinput: MappeaConfirmUploadInput!,\r): OnlyStatusResponse! \r\r\ruploadFile(\rinput: MappeaUploadFileInput!,\r): UploadFileResponse! \r\r\rmapSupplier(\rinput: MappeaMapSupplierInput!,\r): OnlyStatusResponse! \r\r}\r\r\rFields confirmUpload(OnlyStatusResponse!):\r\r\ruploadFile(UploadFileResponse!):\r\r\rmapSupplier(OnlyStatusResponse!):\r\r\r\nRequired by Mutation: \rMutations are operations that change or update data on the server\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/mappeaquery/",
	"title": "MappeaQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MappeaQuery {\r\rgetUploadedFiles: GetUploadedFilesResponse! \r\r\rgetMappeaStats(\rinput: MappeaGetMappeaStatsInput!,\r): GetMappeaStatsResponse! \r\r}\r\r\rFields getUploadedFiles(GetUploadedFilesResponse!):\r\r\rgetMappeaStats(GetMappeaStatsResponse!):\r\r\r\nRequired by Query: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/mappeasupplierconfirmedinput/",
	"title": "MappeaSupplierConfirmedInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MappeaSupplierConfirmedInput {\r\rcode: ID! \r\r\rsupplier: ID! \r\r}\r\r\rFields code(ID!):\r\r\rsupplier(ID!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/mappeauploadfileinput/",
	"title": "MappeaUploadFileInput",
	"tags": [],
	"description": "",
	"content": " UploadFile GraphQL schema definition type MappeaUploadFileInput {\r\rrequestId: String! \r\r\rfileName: String \r\r\rdelimiter: String! \r\r\rfileContent: String! \r\r}\r\r\rFields requestId(String!):\r\r\rfileName(String):\r\r\rdelimiter(String!):\r\r\rfileContent(String!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/mapping/",
	"title": "Mapping",
	"tags": [],
	"description": "",
	"content": " Returns the mapping for a group.\nGraphQL schema definition type Mapping {\r\rcontexts(\rcodes: [String!],\r): [MappingContext!] \r\r\rerrors: [Error!] \r\r\rwarnings: [Warning!] \r\r}\r\r\rFields contexts([MappingContext!]):\rReturns the differents group contexts, you can filter by some contexts.\r\rerrors([Error!]):\rErrors that abort services\r\rwarnings([Warning!]):\rPotentially harmful situations or errors that won\u0026#39;t force the service to abort\r\r\nRequired by Query: \r\r\rHotelXQuery: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/mappingcontext/",
	"title": "MappingContext",
	"tags": [],
	"description": "",
	"content": " Returns the differents group contexts\nGraphQL schema definition type MappingContext {\r\rcode: String! \r\r\rhotels(\rcodes: [String!],\r): [MappingEntity!] \r\r\rrooms(\rcodes: [String!],\r): [MappingEntity!] \r\r\rboards(\rcodes: [String!],\r): [MappingEntity!] \r\r}\r\r\rFields code(String!):\rCode of the context\r\rhotels([MappingEntity!]):\rMapping of hotels, you can filter by hotel code.\r\rrooms([MappingEntity!]):\rMapping of rooms, you can filter by room code.\r\rboards([MappingEntity!]):\rMapping of boards, you can filter by board code.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/mappingentity/",
	"title": "MappingEntity",
	"tags": [],
	"description": "",
	"content": " Mapping about client codes with the equivalence per supplier.\nGraphQL schema definition type MappingEntity {\r\rcode: String! \r\r\rcontexts(\rcodes: [String!],\r): [Map!] \r\r}\r\r\rFields code(String!):\rClient code\r\rcontexts([Map!]):\rYou can filter by output context.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/markup/",
	"title": "Markup",
	"tags": [],
	"description": "",
	"content": " Informs markup applied over supplier price.\nGraphQL schema definition type Markup {\r\rchannel: String \r\r\rcurrency: Currency! \r\r\rbinding: Boolean! \r\r\rnet: Float! \r\r\rgross: Float \r\r\rexchange: Exchange! \r\r\rrules: [Rule!]! \r\r}\r\r\rFields channel(String):\rchannel of markup application.\r\rcurrency(Currency!):\rCurrency code indicating which currency should be paid. This information is mandatory.\r\rbinding(Boolean!):\rIt indicates if the price indicated in the gross must be respected. That is, the customer can not sell the room / option at a price lower than that established by the supplier. This information is mandatory.\r\rnet(Float!):\rIndicates the net price that the customer must pay to the supplier plus the markup. This information is mandatory.\r\rgross(Float):\rIndicates the retail price that the supplier sells to the customer plus the markup.\r\rexchange(Exchange!):\rInforms about the currency of origin, and the rate applied over result. This information is mandatory.\r\rrules([Rule!]!):\rBreakdown of the applied rules for a markup\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/markupruletype/",
	"title": "MarkupRuleType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition \renum\rMarkupRuleType{\r\r\rPERCENT,\r\r\r\rIMPORT,\r\r\r} \r Required by Rule: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/media/",
	"title": "Media",
	"tags": [],
	"description": "",
	"content": " Contains media information.\nGraphQL schema definition type Media {\r\rcode: String \r\r\rorder: String \r\r\rtype: ApplicationAreaType! \r\r\rupdatedAt: DateTime! \r\r\rurl: URI! \r\r\rtexts(\rlanguages: [Language!],\r): [Text!] \r\r}\r\r\rFields code(String):\rCode.\r\rorder(String):\rIndicates the order priority.\r\rtype(ApplicationAreaType!):\rIndicates the type of the media.\r\rupdatedAt(DateTime!):\rDate updated.\r\rurl(URI!):\rUrl.\r\rtexts([Text!]):\rContains the descriptive.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/member/",
	"title": "Member",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Member {\r\rcode: ID! \r\r\rmemberData: MemberData \r\r\rerror: [Error!] \r\r\risActive: Boolean! \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\r\r\rmemberData(MemberData):\r\r\rerror([Error!]):\r\r\risActive(Boolean!):\r\r\rcreatedAt(DateTime!):\r\r\rupdatedAt(DateTime!):\r\r\r\nRequired by OrganizationData: \r\r\rGroupCommonData: \r\r\rGroupData: \r\r\rMemberEdge: \r\r\rAdminMutation: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/memberconnection/",
	"title": "MemberConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberConnection {\r\redges: [MemberEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([MemberEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequired by AdminQuery: \r\r\rOrganizationData: \r\r\rGroupCommonData: \r\r\rGroupData: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/memberdata/",
	"title": "MemberData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberData {\r\rid: ID! \r\r\rcode: ID! \r\r\rlabel: String \r\r\rtype: MemberType! \r\r\rgroups(\r\r\r\rcodes: [ID!],\r\r\r\r\rtype: GroupType,\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): GroupConnection \r\r\rroles(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): RoleConnection \r\r}\r\r\rFields id(ID!):\r\r\rcode(ID!):\r\r\rlabel(String):\r\r\rtype(MemberType!):\r\r\rgroups(GroupConnection):\r\r\rroles(RoleConnection):\r\r\r\nRequired by Member: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/memberedge/",
	"title": "MemberEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type MemberEdge {\r\rcursor: String! \r\r\rnode: Member \r\r}\r\r\rFields cursor(String!):\r\r\rnode(Member):\r\r\r\nRequired by MemberConnection: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/membertype/",
	"title": "MemberType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition \renum\rMemberType{\r\r\rUSER,\r\r\r\rSERVICE_ACCOUNT,\r\r\r} \r Required by MemberData: \r\r\rCreateMemberInput: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/method/",
	"title": "Method",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition \renum\rMethod{\r\r\rADD,\r\r\r\rDEL,\r\r\r} \r Required by UpdateMemberInput: \r\r\rUpdateGroupInput: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/schema/mutation/",
	"title": "Mutation",
	"tags": [],
	"description": "",
	"content": " Mutations are operations that change or update data on the server\nGraphQL schema definition type Mutation {\r\radmin: AdminMutation \r\r\rhotelX: HotelXMutation \r\r\rmappea: MappeaMutation \r\rShow deprecated fields\r\r\rhotelBook(\rinput: HotelBookInput!,\rsettings: HotelSettingsInput,\r): HotelBookPayload \r// deprecated from 2017-11-21. You can find it in query at HotelX\r\r\rhotelCancel(\rinput: HotelCancelInput!,\rsettings: HotelSettingsInput,\r): HotelCancelPayload \r// deprecated from 2017-11-21. You can find it in query at HotelX\r\r\rloadFile(\rinput: String!,\r): String! \r// deprecated from 2017-11-21. You can find it in query at Admin\r\r\rcreateDefaultSettings(\rinput: DefaultSettingsInput!,\r): DefaultSettings \r// deprecated from 2017-11-21. You can find it in query at Admin\r\r\rupdateDefaultSettings(\rinput: DefaultSettingsInput!,\r): DefaultSettings \r// deprecated from 2017-11-21. You can find it in query at Admin\r\r\rdeleteDefaultSettings(\rinput: String!,\r): Boolean! \r// deprecated from 2017-11-21. You can find it in query at Admin\r\r\r}\r\r\rFields admin(AdminMutation):\r\r\rhotelX(HotelXMutation):\r\r\rmappea(MappeaMutation):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/interfaces/node/",
	"title": "Node",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface Node {\r\rcode: ID! \r\r\rerror: [Error!] \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\rID code\r\rerror([Error!]):\rErrors that abort services\r\rcreatedAt(DateTime!):\rDate created\r\rupdatedAt(DateTime!):\rDate updated\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/occupancy/",
	"title": "Occupancy",
	"tags": [],
	"description": "",
	"content": " Information about occupancy.\nGraphQL schema definition type Occupancy {\r\rid: Int! \r\r\rpaxes: [Pax!]! \r\r}\r\r\rFields id(Int!):\rUnique ID room in this option.\r\rpaxes([Pax!]!):\rList of pax of this occupancy.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/onlystatusresponse/",
	"title": "OnlyStatusResponse",
	"tags": [],
	"description": "",
	"content": " Common Items GraphQL schema definition type OnlyStatusResponse {\r\rerror: Error \r\r\rwarnings: [Warning] \r\r}\r\r\rFields error(Error):\r\r\rwarnings([Warning]):\r\r\r\nRequired by MappeaMutation: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/operation/",
	"title": "Operation",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Operation {\r\rcode: ID! \r\r\rerror: [Error!] \r\r\roperationData: OperationData \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\r\r\rerror([Error!]):\r\r\roperationData(OperationData):\r\r\rcreatedAt(DateTime!):\r\r\rupdatedAt(DateTime!):\r\r\r\nRequired by OperationEdge: \r\r\rOperationDetailed: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/operationconnection/",
	"title": "OperationConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationConnection {\r\redges: [OperationEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([OperationEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequired by AdminQuery: \r\r\rAPIData: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/operationdata/",
	"title": "OperationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationData {\r\rid: ID! \r\r\rcode: ID! \r\r\rlabel: String \r\r\rtypes: [OperationType!]! \r\r\rapi: API \r\r}\r\r\rFields id(ID!):\r\r\rcode(ID!):\r\r\rlabel(String):\r\r\rtypes([OperationType!]!):\r\r\rapi(API):\r\r\r\nRequired by Operation: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/operationdetailed/",
	"title": "OperationDetailed",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationDetailed {\r\roperation: Operation \r\r\rtotalHits: Int! \r\r\rdetailedHits(\rtype: [StatsInfoTypes!],\rcode: [Int!],\r): [StatsInfo!] \r\r\rcache: Boolean! \r\r}\r\r\rFields operation(Operation):\r\r\rtotalHits(Int!):\roperation: String! operationType: ServiceOperationType! List of service apis. serviceApis: ServiceApiConnection! Total hits.\r\rdetailedHits([StatsInfo!]):\rTotal time time: Time!\r\rcache(Boolean!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/operationedge/",
	"title": "OperationEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OperationEdge {\r\rcursor: String! \r\r\rnode: Operation \r\r}\r\r\rFields cursor(String!):\r\r\rnode(Operation):\r\r\r\nRequired by OperationConnection: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/operationtype/",
	"title": "OperationType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition \renum\rOperationType{\r\r\rSEARCH,\r\r\r\rQUOTE,\r\r\r\rBOOKING,\r\r\r\rCANCEL,\r\r\r\rSCHEDULER,\r\r\r\rCREATE,\r\r\r\rREAD,\r\r\r\rUPDATE,\r\r\r\rDELETE,\r\r\r\rEXECUTE,\r\r\r\rOTHER,\r\r\r} \r "
},
{
	"uri": "/travelgatex/reference/objects/organization/",
	"title": "Organization",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Organization {\r\rcode: ID! \r\r\rorganizationData: OrganizationData \r\r\rerror: [Error!] \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\r\r\rorganizationData(OrganizationData):\r\r\rerror([Error!]):\r\r\rcreatedAt(DateTime!):\r\r\rupdatedAt(DateTime!):\r\r\r\nRequired by OrganizationEdge: \r\r\rAdminMutation: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/organizationconnection/",
	"title": "OrganizationConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OrganizationConnection {\r\redges: [OrganizationEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([OrganizationEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequired by AdminQuery: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/organizationdata/",
	"title": "OrganizationData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OrganizationData {\r\rid: ID! \r\r\rcode: ID! \r\r\rlabel: String \r\r\rtype: GroupType! \r\r\rinfo: String \r\r\rchildren(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): GroupConnection \r\r\rowner: Member \r\r\risEditable: Boolean! \r\r\rmembers(\r\r\r\rcodes: [ID!],\r\r\r\r\rtype: MemberType,\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): MemberConnection \r\r\rapis(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): APIConnection \r\r\rproducts(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): ProductConnection \r\r\rallMembers(\r\r\r\rcodes: [ID!],\r\r\r\r\rtype: MemberType,\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): MemberConnection \r\r\raccesses(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): AccessConnection \r\r\rsuppliers(\r\r\r\rcodes: [ID!],\r\r\r\r\raccessID: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): SupplierConnection \r\r\rclients(\r\r\r\rcodes: [ID!],\r\r\r\r\rname: [ID!],\r\r\r\r\risActive: Boolean,\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): ClientConnection \r\r}\r\r\rFields id(ID!):\r\r\rcode(ID!):\r\r\rlabel(String):\r\r\rtype(GroupType!):\r\r\rinfo(String):\r\r\rchildren(GroupConnection):\r\r\rowner(Member):\r\r\risEditable(Boolean!):\r\r\rmembers(MemberConnection):\r\r\rapis(APIConnection):\r\r\rproducts(ProductConnection):\r\r\rallMembers(MemberConnection):\r\r\raccesses(AccessConnection):\r\r\rsuppliers(SupplierConnection):\r\r\rclients(ClientConnection):\r\r\r\nRequired by Organization: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/organizationedge/",
	"title": "OrganizationEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type OrganizationEdge {\r\rcursor: String! \r\r\rnode: Organization \r\r}\r\r\rFields cursor(String!):\r\r\rnode(Organization):\r\r\r\nRequired by OrganizationConnection: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/organizationtemplate/",
	"title": "OrganizationTemplate",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition \renum\rOrganizationTemplate{\r\r\rORGANIZATION_DEFAULT,\r\r\r} \r Required by CreateOrganizationInput: \r\r\r\n"
},
{
	"uri": "/admin/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Admin Information",
	"content": ""
},
{
	"uri": "/flightx/overview/",
	"title": "Overview",
	"tags": [],
	"description": "FlightX Information",
	"content": "This page shows you how to perform basic hotel book using GraphQL Playground.\n"
},
{
	"uri": "/getting-started/overview/",
	"title": "Overview",
	"tags": [],
	"description": "See how the TravelgateX platform and APIs fit together",
	"content": "TravelgateX provides a single API endpoint for all of our API products. This makes it easy for you to integrate our full travel catalog and services into your applications (regardless of whether you are integrating to a website, mobile app, widget, or other interface).\nCompletely rebuilt in GraphQL from our many years of experience with travel XML integrations, we are offering state of the art, cutting edge API technology that is quick to learn and makes integration simple and fast. Our first API \u0026ndash; HotelX \u0026ndash; is currently available and provides access to over 600 hotel booking suppliers, with thousands of properties available.                                                                                                                                                                                         The TravelgateX platform supports both travel buyers and sellers.\nBUYERS are businesses that provide travel services to their customer base.\nBuyers are: Online travel agents, Travel apps, Niche travel operators, or Direct-to-consumer travel platforms. As a buyer, you can use the TravelgateX platform and our HotelX API to integrate a wide selection of realtime, hotel bed booking databases into your applications.\nOur buyers first need to have an agreement with the hotel bed supplier in place, and once that has been arranged, you are able to connect to our HotelX API and to begin displaying hotel bed availability directly in your client applications and interfaces.\n\rSUPPLIERS are hotel bed and travel service providers who have an inventory of hotel beds (or travel services) that you want to make available for online booking.\nSuppliers are: B2B travel aggregators, Travel fare aggregators and travel metasearch engines, Large hotel chains, Travel service catalogues, or Direct-to-consumer travel platforms. As a supplier, TravelgateX connects to your realtime booking databases so that you can optimize your vacancies and make them available to buyers. Where you have made set pricing arrangements with particular buyers, specific pricing is displayed as per your agreements. TravelgateX supports suppliers to reach new buyers by helping make it easy for new buyers to sign up for hotel and travel service contracts via our platform.\nOur HotelX API is now live and able to integrate thousands of hotel beds into your client applications. Check out our roadmap pages for details of our forthcoming APIs, including an optional Speed API to speed up response times and bookings to large hotel databases, our next-generation Mappea mapping API, and APIs that help you track statistics and travel demands so that you have better insight into tourism trends and changing consumer patterns.\r"
},
{
	"uri": "/hotelx/overview/",
	"title": "Overview",
	"tags": [],
	"description": "HotelX Information",
	"content": " HotelX is the ultimate connectivity solution. Besides enabling you to connect to multiple ’Suppliers’, it also adds business logic solving most of the problems commonly found in the travel business in an elegant and efficient way.\n  Each and every layer described in the this figure is explained as follows:\nGraphQL Gateway Our gateway is the only endpoint to access all of our products, which has the authentication and authorization of our system. You can read about this, here.\nBusiness Logic We’ve added a new layer of business logic in front of the pure transformation API. A fast, totally scalable and flexible layer, which allows you to overwrite everything at the request level, or be left as is. The API is completely written in Go and Redis for performance and scalability. There’s also the possibility of writing plugins (in Go) in order to add any logic or add an extra functionality.\nSome of the functionalities of the business logic layer include:\n Configuration and access management  Hotel, Room and Board Mappings  Agggregate, Sort \u0026amp; Filter results  Add pricing/markups  Currency Exchange  Plugins   Plugins HotelX introduces a new concept to the industry: Plugins. A plugin is a piece of code that is executed inside our application. There are a few points in the request lifetime where anyone can develop a plugin. It receives the request or response as an input and outputs the changed request or response. Plugins are a core package in the Go Programming language. All the info about it can be found here.\nTransformation Layer The transformation layer takes care of the actual transformation into the Seller’s specific format and back. It generates requests to the supplier in an optimal way, known as Optimal Connector. The Optimal connector is the result of years of interacting with the ‘Sellers’, learning from them and understanding how to send them requests. Each different supplier has a different logic, and we know now exactly which request will be handled more effectively by the supplier.\nThe transformation layer keeps each and every Seller integration in an optimal level. If a new version is released, we will update our integration. Our team is constantly monitoring the traffic, both automatically and manually in order to make sure the connectivity just works.\nOptional Cache Layer Our cache layer, called Speed does exactly what the name says, it caches results to avoid knocking out the Sellers. From a high level perspective it is just a cache.\nWe use advanced Machine Learning models to predict how long each cached item will be valid from taking into account a large number of variables set in the request. This cache is hosted in Google’s BigTable, a “Massively Scalable NoSQL” database built with performance and scalability in mind.\nSuppliers Each and every ‘Supplier’ works in a different way. Most are old legacy SOAP APIs and none of them are GraphQL. We have developed them all, and learned from it. We are connected to more than 600 ‘Suppliers’ seamlessly.\n"
},
{
	"uri": "/hotelx/plugins/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Plugins workflow execution",
	"content": " Introduction Plugins are custom code, executed in HotelX servers, that add or modify specific features. Partner can develop custom plugins, but in most cases, HotelX offers enough basic plugins to use.\nFlows HotelX query or mutation determine what flow is executed. Plugins can be executed in different flows:\n search quote hotelBook hotelCancel  Steps Step is the minium container where plugins are executed sequentially.\n   Step When is executed     Request After Buyer requests message to HotelX.   Request Access Before send request to Supplier using Access and after Accesses has been calculated.   Response Option After Supplier responds message. For every option returned.   Response Access After all Access options has been responded.   Response Before HotelX responds message to to Buyer.    Plugin Types Plugin types supported by HotelX:\n Pre Step: First execution on every step. Hotel Map: Hotel mapping codes. Board Map: Board mapping codes. Room Map: Room mapping codes. Currency Conversion: Currency rate conversion. Net Price: Calculate the net price.  Markup: Markups to supplier price. Aggregation: Aggregate multiple supplier options. Post Step: Last execution on every step.  Plugin Context Execution Once message enters on HotelX it flows over different flows and steps. That\u0026rsquo;s why plugins are executed in different contexts.\nContext allows:\n Read objects involved in current query and/or mutations. Read objects available in all HotelX operations.  With context information developers can personalize plugin features, more information about plugin development can be found here.\nPlugin Step Execution HotelX determine the order and plugin types executed for each step.\n    search quote hotelBook hotelCancel     Request Pre Step\nPost Step Pre Step\nPost Step Pre Step\nPost Step Pre Step Post Step   Request Access Pre Step\nHotel Map\nPost Step Pre Step Post Step Pre Step Post Step Pre Step Post Step   Response Option Pre Step\nHotel Map\nBoard Map\nRoom Map\nRate Map\nCurrency Conversion\nNet Price\nMarkup\nAggregation\nPost Step Pre Step\nHotel Map\nBoard Map\nRoom Map\nCurrency Conversion\nNet Price\nMarkup\nPost Step Pre Step\nHotel Map\nBoard Map\nRoom Map\nCurrency Conversion\nNet Price\nMarkup\nPost Step Pre Step\nHotel Map\nBoard Map\nRoom Map\nCurrency Conversion\nNet Price\nPost Step   Response Pre Step\nAggregation\nPost Step Pre Step Post Step Pre Step Post Step Pre Step Post Step    Ftp Endpoint ftp://ftp.xmltravelgate.com\nDirectory Format Root path The structure of the directory should be in the below format, all files should be inside this directory\n/F[Folder code]_[Unique code]/HotelX_[Unique code]/ * F[Folder code]_[Unique code]\n* **Folder code**: corresponds to the folder number. * **Unique code**: corresponds to the folder unique code in our system.   HotelX_[Unique code]\n Unique code: corresponds to the HotelX unique code in our system.   Example  /F0_178/HotelX_179\n  "
},
{
	"uri": "/insights/overview/",
	"title": "Overview",
	"tags": [],
	"description": "FlightX Information",
	"content": "This page shows you how to perform basic hotel book using GraphQL Playground.\n"
},
{
	"uri": "/mappea/overview/",
	"title": "Overview",
	"tags": [],
	"description": "FlightX Information",
	"content": "This page shows you how to perform basic hotel book using GraphQL Playground.\n"
},
{
	"uri": "/stats/overview/",
	"title": "Overview",
	"tags": [],
	"description": "StatsX Information",
	"content": "This page shows you how to perform basic hotel book using GraphQL Playground.\n"
},
{
	"uri": "/travelgatex/overview/",
	"title": "Overview",
	"tags": [],
	"description": "TravelgateX Platform Information",
	"content": " This page provides an overview of the TravelgateX platform.\nGraphQL Gateway TravelgateX is the travel API completely based in GraphQL. Unlike many legacy XML Soap APIs, GraphQL enables each client to ask for and receive exactly the data that is needed. Learn more by reading our Learning GraphQL guides.\nOur Gateway is the only endpoint to access all of our APIs. It is written in NodeJS. This makes it fast, stable, secure, fault tolerant and load balanced between many datacenters from four different cloud providers: Microsoft Azure, Google Cloud Platform, Hetzner and TotalUptime.\nUsing the API There are two types of allowed operations in the TravelgateX GraphQL APIs:\n Queries Mutations  GraphQL Endpoint One of the benefits of using GraphQL is that there\u0026rsquo;s only one single endpoint. You can use this endpoint for all operations you want to perform:\nhttps://api.travelgatex.com\rCommunicating with the Server To communicate with our GraphQL server, you\u0026rsquo;ll need an access token with the right scopes. You are able to create a token by following the steps mentioned in Security Overview.\nMaking Requests The best place to test how to make GraphQL queries in TravelgateX is to start with our interactive API Playground. You can also use curl or any other HTTP-speaking library.\nAll LIVE traffic MUST enable GZIP compression in the HTTP header\rAccept-Encoding: gzip  To query GraphQL using curl , make a POST request with a JSON payload. The payload must contain a string called query:\ncurl -X\\ POST\\ -H \u0026quot;Content-Type: application/json\u0026quot; \\ -H \u0026quot;Authorization: Apikey q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\u0026quot; \\ --data '{\u0026quot;query\u0026quot;:\u0026quot;{hotelX{searchStatusService{code description}}}\u0026quot;}' \\ --compressed \\ https://api.travelgatex.com  Graph Reference There are several ways you can learn more about the full capabilities of our TravelgateX GraphQL data model * Reference Documentation provides complete reference documentation for all resources, fields and objects in our GraphQL data model. * API Playground provides an interactive, multi-column schema definition based on the GraphiQL tool, but with many additional features. * GraphQL-voyager displays our GraphQL API as an interactive relational database-like graph to help you understand the different parent and child tables within our schema.\nExamples Check out our GraphQL Playground to get started with making your first query and to work thropugh other query examples.\nKeep in mind that it\u0026rsquo;s important to use the correct Headers. If you wish to use test headers, insert \u0026quot;Authorization\u0026quot;:\u0026quot;Apikey q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\u0026quot;\n\rYou can easily share your Queries with others by generating a link using the share button available in the API Playground. This share function works as a Pastebin for your GraphQL query and includes the context (endpoint, HTTP headers, open tabs, etc) so you can share exactly what your Playground query setup looks like.\nConventions TravelgateX follows some conventions about schema definition:\n Relay schema requirements Definition of custom scalar types Token Based Authentication  Relay Implementation TravelgateX uses the Relay schema requirements for our own Resources, but other resources, such as Seller search response, are not modeled with Relay practices.\nWe chose Relay at TravelgateX in order to standarize:\n Querying paginated collections (\u0026ldquo;Connections\u0026rdquo; and \u0026ldquo;Edges\u0026rdquo;) Identifying objects directly from the root of a query (to avoid long nested queries) Providing mutation input data.  "
},
{
	"uri": "/travelgatex/reference/objects/pageinfo/",
	"title": "PageInfo",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type PageInfo {\r\rhasNextPage: Boolean! \r\r\rhasPreviousPage: Boolean! \r\r\rstartCursor: String! \r\r\rendCursor: String! \r\r}\r\r\rFields hasNextPage(Boolean!):\r\r\rhasPreviousPage(Boolean!):\r\r\rstartCursor(String!):\r\r\rendCursor(String!):\r\r\r\nRequired by AccessConnection: \r\r\rSupplierConnection: \r\r\rClientConnection: \r\r\rOrganizationConnection: \r\r\rGroupConnection: \r\r\rRoleConnection: \r\r\rResourceConnection: \r\r\rAPIConnection: \r\r\rOperationConnection: \r\r\rMemberConnection: \r\r\rProductConnection: \r\r\rBoardConnection: \rBoardList definition\r\rCategoryConnection: \rCategoryList definition\r\rRoomConnection: \rRoomList definition\r\rHotelConnection: \rHotelList definition\r\rDestinationConnection: \rDestinationList definition\r\rStatsConnection: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/parameter/",
	"title": "Parameter",
	"tags": [],
	"description": "",
	"content": " Parameters for additional information for the supplier\u0026rsquo;s configuration.\nGraphQL schema definition type Parameter {\r\rkey: ID! \r\r\rvalue: String! \r\r}\r\r\rFields key(ID!):\rContains the keyword/Id to identify a parameter. This information is mandatory.\r\rvalue(String!):\rContains the parameter values. This information is mandatory.\r\r\nRequired by AccessData: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/parameterinput/",
	"title": "ParameterInput",
	"tags": [],
	"description": "",
	"content": " Parameters Input.\nGraphQL schema definition type ParameterInput {\r\rkey: String! \r\r\rvalue: String! \r\r}\r\r\rFields key(String!):\rContains the keyword/Id to identify a parameter. This information is mandatory.\r\rvalue(String!):\rContains the parameter values. This information is mandatory.\r\r\nRequired by AccessInput: \rAccess input\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/pax/",
	"title": "Pax",
	"tags": [],
	"description": "",
	"content": " Specifies the age pax. The range of what is considered an adult, infant or baby is particular to each supplier.\nGraphQL schema definition type Pax {\r\rage: Int! \r\r}\r\r\rFields age(Int!):\rSpecifies the age pax.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/paxinput/",
	"title": "PaxInput",
	"tags": [],
	"description": "",
	"content": " Pax object that contains the pax age.\nGraphQL schema definition type PaxInput {\r\rage: Int! \r\r}\r\r\rFields age(Int!):\rPax age.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/paymentcardinput/",
	"title": "PaymentCardInput",
	"tags": [],
	"description": "",
	"content": " Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information\nGraphQL schema definition type PaymentCardInput {\r\rcardType: String! \r\r\rholder: HolderInput! \r\r\rnumber: String! \r\r\rCVC: String! \r\r\rexpire: ExpireDateInput! \r\r}\r\r\rFields cardType(String!):\rIndicates the card type.\r\rholder(HolderInput!):\rContains owner\u0026#39;s name\r\rnumber(String!):\rContains credit card number\r\rCVC(String!):\rContains credit card CVC\r\rexpire(ExpireDateInput!):\rContains credit card expiration date\r\r\nRequired by HotelBookInput: \rCriteria of book.\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/paymenttype/",
	"title": "PaymentType",
	"tags": [],
	"description": "",
	"content": " Options payment type\nGraphQL schema definition \renum\rPaymentType{\r\r\rMERCHANT,\r\r\r\rDIRECT,\r\r\r\rCARD_BOOKING,\r\r\r\rCARD_CHECK_IN,\r\r\r} \r Required by HotelOptionSearch: \rAn option includes hotel information, meal plan, total price, conditions and room description\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/pluginstepinput/",
	"title": "PluginStepInput",
	"tags": [],
	"description": "",
	"content": " Plugin to execute.\nGraphQL schema definition type PluginStepInput {\r\rstep: PluginStepType! \r\r\rpluginsType: [PluginsInput!] \r\r}\r\r\rFields step(PluginStepType!):\rIndicates where the plugin will be executed.\r\rpluginsType([PluginsInput!]):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/pluginsteptype/",
	"title": "PluginStepType",
	"tags": [],
	"description": "",
	"content": " Plugin Step Type\nGraphQL schema definition \renum\rPluginStepType{\r\r\rREQUEST,\r\r\r\rREQUEST_ACCESS,\r\r\r\rRESPONSE_OPTION,\r\r\r\rRESPONSE_ACCESS,\r\r\r\rRESPONSE,\r\r\r} \r Required by PluginStepInput: \rPlugin to execute.\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/plugintype/",
	"title": "PluginType",
	"tags": [],
	"description": "",
	"content": " Plugin Type\nGraphQL schema definition \renum\rPluginType{\r\r\rPRE_STEP,\r\r\r\rHOTEL_MAP,\r\r\r\rBOARD_MAP,\r\r\r\rROOM_MAP,\r\r\r\rCURRENCY_CONVERSION,\r\r\r\rMARKUP,\r\r\r\rAGGREGATION,\r\r\r\rPOST_STEP,\r\r\r} \r Required by PluginsInput: \rPlugin to execute.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/pluginsinput/",
	"title": "PluginsInput",
	"tags": [],
	"description": "",
	"content": " Plugin to execute.\nGraphQL schema definition type PluginsInput {\r\rtype: PluginType! \r\r\rname: String! \r\r\rparameters: [ParameterInput!] \r\r}\r\r\rFields type(PluginType!):\rtype of the plugins to execute\r\rname(String!):\rname of plugin to execute\r\rparameters([ParameterInput!]):\rPlugin\u0026#39;s parameters\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/price/",
	"title": "Price",
	"tags": [],
	"description": "",
	"content": " Price indicates the value of the room/option. Supplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.\nGraphQL schema definition type Price {\r\rcurrency: Currency! \r\r\rbinding: Boolean! \r\r\rnet: Float! \r\r\rgross: Float \r\r\rexchange: Exchange! \r\r\rmarkups: [Markup!] \r\r}\r\r\rFields currency(Currency!):\rCurrency code indicating which currency should be paid. This information is mandatory.\r\rbinding(Boolean!):\rIt indicates if the price indicated in the gross must be respected. That is, the customer can not sell the room / option at a price lower than that established by the supplier. This information is mandatory.\r\rnet(Float!):\rIndicates the net price that the customer must pay to the supplier. This information is mandatory.\r\rgross(Float):\rIndicates the retail price that the supplier sells to the customer.\r\rexchange(Exchange!):\rProvides information about the currency of original, and its rate applied over the results returned by the Supplier. This information is mandatory.\r\rmarkups([Markup!]):\rInforms markup applied over supplier price.\r\r\nRequired by HotelOptionSearch: \rAn option includes hotel information, meal plan, total price, conditions and room description\r\rRoomPrice: \rSpecifies the room price.\r\rPriceBreakdown: \rInformation about daily price.\r\rSupplement: \rSupplement that it can be or its already added to the option returned. Contains all the information about the supplement.\r\rSurcharge: \rSurcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.\r\rHotelOptionQuote: \rContains information about quote(s)\r\rHotelBookingDetail: \rContains information about booking\r\rBookingRoom: \r\r\rHotelCancelDetail: \rContains information about cancel\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/pricebreakdown/",
	"title": "PriceBreakdown",
	"tags": [],
	"description": "",
	"content": " Information about daily price.\nGraphQL schema definition type PriceBreakdown {\r\reffectiveDate: Date! \r\r\rexpireDate: Date! \r\r\rprice: Price! \r\r}\r\r\rFields effectiveDate(Date!):\rStart date in which the price becomes effective.\r\rexpireDate(Date!):\rExpire date of price.\r\rprice(Price!):\rSpecifies the daily price.\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/pricetype/",
	"title": "PriceType",
	"tags": [],
	"description": "",
	"content": " Price Type\nGraphQL schema definition \renum\rPriceType{\r\r\rGROSS,\r\r\r\rNET,\r\r\r\rAMOUNT,\r\r\r} \r "
},
{
	"uri": "/travelgatex/reference/interfaces/priceable/",
	"title": "Priceable",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface Priceable {\r\rcurrency: Currency! \r\r\rbinding: Boolean! \r\r\rnet: Float! \r\r\rgross: Float \r\r\rexchange: Exchange! \r\r}\r\r\rFields currency(Currency!):\rSpecifies the currency.\r\rbinding(Boolean!):\rIs binding.\r\rnet(Float!):\rSpecifies the import net.\r\rgross(Float):\rSpecifies the import gross.\r\rexchange(Exchange!):\rSpecifies the exchange.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/product/",
	"title": "Product",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Product {\r\rcode: ID! \r\r\rproductData: ProductData! \r\r\rerror: [Error!] \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\r\r\rproductData(ProductData!):\r\r\rerror([Error!]):\r\r\rcreatedAt(DateTime!):\r\r\rupdatedAt(DateTime!):\r\r\r\nRequired by ProductEdge: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/productconnection/",
	"title": "ProductConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductConnection {\r\redges: [ProductEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([ProductEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequired by AdminQuery: \r\r\rOrganizationData: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/productdata/",
	"title": "ProductData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductData {\r\rid: ID! \r\r\rcode: ID! \r\r\rlabel: String \r\r\rapis(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): APIConnection \r\r}\r\r\rFields id(ID!):\r\r\rcode(ID!):\r\r\rlabel(String):\r\r\rapis(APIConnection):\r\r\r\nRequired by Product: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/productedge/",
	"title": "ProductEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ProductEdge {\r\rcursor: String! \r\r\rnode: Product \r\r}\r\r\rFields cursor(String!):\r\r\rnode(Product):\r\r\r\nRequired by ProductConnection: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/promotion/",
	"title": "Promotion",
	"tags": [],
	"description": "",
	"content": " Information about room promotions(offers).\nGraphQL schema definition type Promotion {\r\rcode: String! \r\r\rname: String \r\r\reffectiveDate: Date \r\r\rexpireDate: Date \r\r}\r\r\rFields code(String!):\rSpecifies the promotion code.\r\rname(String):\rSpecifies the promotion name.\r\reffectiveDate(Date):\rPromotion effective date.\r\rexpireDate(Date):\rPromotion expire date.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/property/",
	"title": "Property",
	"tags": [],
	"description": "",
	"content": " Indicates Property type\nGraphQL schema definition type Property {\r\rname: String \r\r\rcode: String \r\r}\r\r\rFields name(String):\rIndicates property type\r\rcode(String):\rIndicates property type code\r\r\nRequired by HotelData: \rHotel data\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/provider/",
	"title": "Provider",
	"tags": [],
	"description": "",
	"content": " Temporary type to use only during SQL server\u0026rsquo;s lifetime\nGraphQL schema definition type Provider {\r\rcode: ID! \r\r\rname: String! \r\r\risActive: Boolean \r\r\risPublic: Boolean \r\r}\r\r\rFields code(ID!):\r\r\rname(String!):\r\r\risActive(Boolean):\r\r\risPublic(Boolean):\r\r\r\nRequired by SupplierData: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/schema/query/",
	"title": "Query",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Query {\r\radmin: AdminQuery \r\r\rhotelX: HotelXQuery \r\r\rstats: StatsQuery \r\r\rmappea: MappeaQuery \r\rShow deprecated fields\r\r\rsearch: : Search! // \r\r\r\rquote: : Quote! // \r\r\r\rbooking: : Booking // \r\r\r\rdefaultSettings(\rgroupCode: String!,\r): DefaultSettings \r// deprecated from 2017-11-21. You can find it in query at Admin\r\r\rmapping(\rgroupCode: String!,\r): Mapping! \r// deprecated from 2017-11-21. You can find it in query at Admin\r\r\r}\r\r\rFields admin(AdminQuery):\r\r\rhotelX(HotelXQuery):\r\r\rstats(StatsQuery):\r\r\rmappea(MappeaQuery):\r\r\r\n"
},
{
	"uri": "/getting-started/quickstart/",
	"title": "Quickstart",
	"tags": [],
	"description": "How to get support for using our APIs",
	"content": " Four steps to using our API If you\u0026rsquo;re ready to start searching for a hotel, getting a quote and booking it right away, try out the TravelgateX API by following the steps below: STEP 1: Get to know our APIs. Read through our documentation and test some sample calls in our API Playground.\nSTEP 2: Sign an agreement with hotel suppliers to be using their booking databases.\nSTEP 3: Sign up for TravelgateX API access. Send us an email and tell us who you are and which hotel suppliers you are working with. TravelgateX works with over 600 suppliers, and we are the first certified partner to work with Expedia. We will send you a welcome pack with your login details and further guides on how to make your first integration.\nSTEP 4: Start generating new business! Read through our integration guides and start integrating our HotelX API into your booking applications.\nBONUS STEP: Travelgate is using one of the latest and most advanced API technologies, GraphQL. It is quick to learn and immensely powerful. Check out our free GraphQL guides to learn more about this cutting edge technology.\nJoin the TravelgateX partner program In order to start building your own API, you\u0026rsquo;ll need to join the TravelgateX partner program. You can sign up through us directly to become a partner.\nProduct Quick Start Choose which APIs you would like to use from our constantly growing catalog of travel services.\n HotelX: Search, check availability, compare prices, and book hotels in realtime with our API Stats: (Coming soon!) Track all of your API calls to our travel services, the calls being made, the response times and the status codes. Ideal for managing DevOps for large travel websites. Insights: (Coming soon!) Stand back and get a wider perspective on your travel customers with a forthcoming data API that will reveal the trends and travel patterns of your customer base. All the messages, all the searches, everything you’ve done on TravelgateX will be available in Insight. Mappea: (Coming soon!) The fastest way to display maps of your hotels, travel services and HotelX bookings on your website, in customer communication, and in your client apps.  Interactive, user-friendly documentation All of our endpoint reference documentation is generated from our GraphQL schema. Use the schema column in the navigation of the Playground to see and understand what information will be returned by each query.\nBe part of the community The TravelgateX community of developers are creative, clever, data-driven, fun, and helpful. By being part of our free community forum, you can contribute to the conversation, learn from other developers working in the travel industry, and share your own best practices and unique insights. Feel connected and be part of a bigger industry sector by participating in our forums. It is also a great place to learn and share new GraphQL practices and to learn about our other tools, including our payments platform, and how other developers are connecting with our 600+ suppliers.\nOur developer and support team also actively participates in our forums, so when you post a query, we are quick to respond and solve your integration challenge. The GRaphQL playground has all of our API functionalities baked in, so you can quickly explore making queries and testing calls, but if you need more help, you can post on our forum, or you can contact us through our Jira Service Desk using the username and password that we sent you in your welcome pack. (But don\u0026rsquo;t worry if you can\u0026rsquo;t find it, send us an email and we can send it to you again.)\nAlthough the API has been designed to be very intuitive and easy to read, we are aware that some concepts can be confusing and the process of creating an API overwhelming. That\u0026rsquo;s why we\u0026rsquo;re here to help! You have access to a complete API documentation guide available inside the Playground, a large community with questions being answered by experienced members to help each other and a support team ready to solve any doubts that you might have during the process.\nCan\u0026rsquo;t find your answer? Got any technical questions or need support from our team? We’re here to help. Get in touch through Jira Service Desk using the username and password that has been sent to you together with the welcome pack. Let us know if you haven\u0026rsquo;t received it, or can\u0026rsquo;t find it, so we can send it to your email address again.\n"
},
{
	"uri": "/admin/resources/quotas-limits/",
	"title": "Quotas &amp; Limits",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/hotelx/resources/quotas-limits/",
	"title": "Quotas &amp; Limits",
	"tags": [],
	"description": "",
	"content": "HotelX limits the maximum rate of requests and graph deep. Specific policies vary depending on resource availability, user profile, service usage history, and other factors, and are subject to change without notice\n"
},
{
	"uri": "/travelgatex/resources/quotas-limits/",
	"title": "Quotas &amp; Limits",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/travelgatex/reference/objects/quote/",
	"title": "Quote",
	"tags": [],
	"description": "",
	"content": " Returns the total price and cancellation policies of the Option selected in the previous step (Search).\nGraphQL schema definition type Quote {\rShow deprecated fields\r\r\rhotel(\rcriteria: HotelCriteriaQuoteInput!,\rsettings: HotelSettingsInput,\r): HotelQuote \r// deprecated from 2017-11-21. You can find it in query at HotelX\r\r\r}\r\r\rRequired by Query: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/rateplan/",
	"title": "RatePlan",
	"tags": [],
	"description": "",
	"content": " Information about the rate of the option returned.\nGraphQL schema definition type RatePlan {\r\rcode: String! \r\r\rname: String \r\r\reffectiveDate: Date \r\r\rexpireDate: Date \r\r}\r\r\rFields code(String!):\rSpecifies the rate code.\r\rname(String):\rSpecifies the rate name.\r\reffectiveDate(Date):\rStart date in which the rate becomes effective.\r\rexpireDate(Date):\rExpire date of the rate.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/raterulesfilterinput/",
	"title": "RateRulesFilterInput",
	"tags": [],
	"description": "",
	"content": " If requested, only options with the specified rateRules will be returned\nGraphQL schema definition type RateRulesFilterInput {\r\rincludes: [RateRulesType!] \r\r\rexcludes: [RateRulesType!] \r\r}\r\r\rFields includes([RateRulesType!]):\rif includes not nil: only options without rate rules and options with rate rules found in includes will be returned\r\rexcludes([RateRulesType!]):\rif excludes not nil: only options without rate rules and options with rate rules that haven\u0026#39;t been sent in excludes will be returned\r\r\nRequired by FilterInput: \rFilter that selects the filter criteria which will be used in this availability. Currently you can only choose the accesses. You must choose one of them, include or exclude, or the other alternative isn\u0026#39;t specified anything. If input both, you will receive a validation error that indicates this error.\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/raterulestype/",
	"title": "RateRulesType",
	"tags": [],
	"description": "",
	"content": " Rate Rules\nGraphQL schema definition \renum\rRateRulesType{\r\r\rPACKAGE,\r\r\r\rOLDER55,\r\r\r\rOLDER60,\r\r\r\rOLDER65,\r\r\r\rCANARY_RESIDENT,\r\r\r\rBALEARIC_RESIDENT,\r\r\r\rLARGE_FAMILY,\r\r\r\rHONEYMOON,\r\r\r\rPUBLIC_SERVANT,\r\r\r\rUNEMPLOYED,\r\r\r\rNORMAL,\r\r\r\rNON_REFUNDABLE,\r\r\r} \r "
},
{
	"uri": "/travelgatex/reference/objects/ratios/",
	"title": "Ratios",
	"tags": [],
	"description": "",
	"content": " Details of look to quote and look to book.\nGraphQL schema definition type Ratios {\r\rlookToQuote: Int! \r\r\rlookToBook: Int! \r\r\rquoteToBook: Int! \r\r}\r\r\rFields lookToQuote(Int!):\r\r\rlookToBook(Int!):\r\r\rquoteToBook(Int!):\r\r\r\nRequired by StatsData: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/reference/",
	"title": "Reference",
	"tags": [],
	"description": "",
	"content": " Contains reference codes.\nGraphQL schema definition type Reference {\r\rclient: String \r\r\rsupplier: String \r\r}\r\r\rFields client(String):\rClient reference booking\r\rsupplier(String):\rSupplier reference booking\r\r\nRequired by HotelBookingDetail: \rContains information about booking\r\rHotelCancelDetail: \rContains information about cancel\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/relayinput/",
	"title": "RelayInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RelayInput {\r\rfirst: Int \r\r\rlast: Int \r\r\rbefore: String \r\r\rafter: String \r\r}\r\r\rFields first(Int):\r\r\rlast(Int):\r\r\rbefore(String):\r\r\rafter(String):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/resort/",
	"title": "Resort",
	"tags": [],
	"description": "",
	"content": " Contains information about the Resort.\nGraphQL schema definition type Resort {\r\rcode: String! \r\r\rname: String \r\r\rdescription: String \r\r}\r\r\rFields code(String!):\rSpecifies the resort code.\r\rname(String):\rSpecifies the resort name.\r\rdescription(String):\rSpecifies the resort description.\r\r\nRequired by Supplement: \rSupplement that it can be or its already added to the option returned. Contains all the information about the supplement.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/resource/",
	"title": "Resource",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Resource {\r\rcode: ID! \r\r\rerror: [Error!] \r\r\rresourceData: ResourceData \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\r\r\rerror([Error!]):\r\r\rresourceData(ResourceData):\r\r\rcreatedAt(DateTime!):\r\r\rupdatedAt(DateTime!):\r\r\r\nRequired by ResourceEdge: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/resourceconnection/",
	"title": "ResourceConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceConnection {\r\redges: [ResourceEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([ResourceEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequired by AdminQuery: \r\r\rRoleData: \r\r\rAPIData: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/resourcedata/",
	"title": "ResourceData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceData {\r\rid: ID! \r\r\rcode: ID! \r\r\rlabel: String \r\r\rapis(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): APIConnection \r\r\rroles(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): RoleConnection \r\r}\r\r\rFields id(ID!):\r\r\rcode(ID!):\r\r\rlabel(String):\r\r\rapis(APIConnection):\r\r\rroles(RoleConnection):\r\r\r\nRequired by Resource: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/resourceedge/",
	"title": "ResourceEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ResourceEdge {\r\rcursor: String! \r\r\rnode: Resource \r\r}\r\r\rFields cursor(String!):\r\r\rnode(Resource):\r\r\r\nRequired by ResourceConnection: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/interfaces/response/",
	"title": "Response",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface Response {\r\rstats(\rtoken: String!,\r): StatsRequest \r\r\rauditData: AuditData \r\r\rerrors: [Error!] \r\r\rwarnings: [Warning!] \r\r}\r\r\rFields stats(StatsRequest):\rApplication stats in string format\r\rauditData(AuditData):\rData sent and received in the supplier’s original format.\r\rerrors([Error!]):\rErrors that lead the service to stop\r\rwarnings([Warning!]):\rPotentially harmful situations or errors that do not stop the service\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/role/",
	"title": "Role",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Role {\r\rcode: ID! \r\r\rerror: [Error!] \r\r\rroleData: RoleData \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\r\r\rerror([Error!]):\r\r\rroleData(RoleData):\r\r\rcreatedAt(DateTime!):\r\r\rupdatedAt(DateTime!):\r\r\r\nRequired by RoleEdge: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/roleconnection/",
	"title": "RoleConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleConnection {\r\redges: [RoleEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([RoleEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequired by AdminQuery: \r\r\rMemberData: \r\r\rResourceData: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/roledata/",
	"title": "RoleData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleData {\r\rid: ID! \r\r\rcode: ID! \r\r\rlabel: String \r\r\risCreate: Boolean! \r\r\risRead: Boolean! \r\r\risUpdate: Boolean! \r\r\risDelete: Boolean! \r\r\risEnable: Boolean! \r\r\risExecutable: Boolean! \r\r\risSpecial: Boolean! \r\r\rspecial: String \r\r\rresources(\r\r\r\rcodes: [ID!],\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): ResourceConnection \r\r}\r\r\rFields id(ID!):\r\r\rcode(ID!):\r\r\rlabel(String):\r\r\risCreate(Boolean!):\r\r\risRead(Boolean!):\r\r\risUpdate(Boolean!):\r\r\risDelete(Boolean!):\r\r\risEnable(Boolean!):\r\r\risExecutable(Boolean!):\r\r\risSpecial(Boolean!):\r\r\rspecial(String):\r\r\rresources(ResourceConnection):\r\r\r\nRequired by Role: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/roleedge/",
	"title": "RoleEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type RoleEdge {\r\rcursor: String! \r\r\rnode: Role \r\r}\r\r\rFields cursor(String!):\r\r\rnode(Role):\r\r\r\nRequired by RoleConnection: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/room/",
	"title": "Room",
	"tags": [],
	"description": "",
	"content": " Contains the room information of the option returned.\nGraphQL schema definition type Room {\r\roccupancyRefId: Int! \r\r\rcode: String! \r\r\rdescription: String \r\r\rrefundable: Boolean \r\r\runits: Int \r\r\rroomPrice: RoomPrice! \r\r\rbeds: [Bed!] \r\r\rratePlans: [RatePlan!] \r\r\rpromotions: [Promotion!] \r\r}\r\r\rFields occupancyRefId(Int!):\rID reference to the occupancy\r\rcode(String!):\rIndicates the room code\r\rdescription(String):\rDescription about the room\r\rrefundable(Boolean):\rIdentifies if the room is refundable or not.\r\runits(Int):\rNumber of rooms available with the same type.\r\rroomPrice(RoomPrice!):\rSpecifies the room price.\r\rbeds([Bed!]):\rList of beds.\r\rratePlans([RatePlan!]):\rDaily break downs rate plan.\r\rpromotions([Promotion!]):\rDaily break downs promotions.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/roomconnection/",
	"title": "RoomConnection",
	"tags": [],
	"description": "",
	"content": " RoomList definition\nGraphQL schema definition type RoomConnection {\r\redges: [RoomEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([RoomEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequired by HotelXQuery: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/roomcriteria/",
	"title": "RoomCriteria",
	"tags": [],
	"description": "",
	"content": " Occupancy for a room. It contains a list of pax ages.\nGraphQL schema definition type RoomCriteria {\r\rpaxes: [Pax!]! \r\r}\r\r\rFields paxes([Pax!]!):\rArray of pax ages. The number of items in the array will indicate the pax occupancy.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/roomdata/",
	"title": "RoomData",
	"tags": [],
	"description": "",
	"content": " Room data\nGraphQL schema definition type RoomData {\r\rcode: ID! \r\r\rroomCode: String! \r\r\rtexts(\rlanguages: [Language!],\r): [Text!] \r\r}\r\r\rFields code(ID!):\rInternal code for checking availability\r\rroomCode(String!):\rCode of the hotel in the Supplier selected\r\rtexts([Text!]):\rLabel\r\r\nRequired by RoomStatic: \rRoom Type\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/roomedge/",
	"title": "RoomEdge",
	"tags": [],
	"description": "",
	"content": " RoomList Edge definition\nGraphQL schema definition type RoomEdge {\r\rcursor: String! \r\r\rnode: RoomStatic \r\r}\r\r\rFields cursor(String!):\r\r\rnode(RoomStatic):\r\r\r\nRequired by RoomConnection: \rRoomList definition\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/roominput/",
	"title": "RoomInput",
	"tags": [],
	"description": "",
	"content": " Occupancy for a room. It contains a list of pax ages.\nGraphQL schema definition type RoomInput {\r\rpaxes: [PaxInput!]! \r\r}\r\r\rFields paxes([PaxInput!]!):\rArray of pax ages. The number of items in the array will indicate the pax occupancy.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/roomprice/",
	"title": "RoomPrice",
	"tags": [],
	"description": "",
	"content": " Specifies the room price.\nGraphQL schema definition type RoomPrice {\r\rprice: Price! \r\r\rbreakdown: [PriceBreakdown!] \r\r}\r\r\rFields price(Price!):\rTotal price for all days.\r\rbreakdown([PriceBreakdown!]):\rDaily break downs price.\r\r\nRequired by Room: \rContains the room information of the option returned.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/roomstatic/",
	"title": "RoomStatic",
	"tags": [],
	"description": "",
	"content": " Room Type\nGraphQL schema definition type RoomStatic {\r\rcode: ID! \r\r\rroomData: RoomData \r\r\rerror: [Error!] \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\rRoom ID\r\rroomData(RoomData):\rRoom data\r\rerror([Error!]):\rErrors that abort services\r\rcreatedAt(DateTime!):\rDate created\r\rupdatedAt(DateTime!):\rDate updated\r\r\nRequired by RoomEdge: \rRoomList Edge definition\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/rule/",
	"title": "Rule",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Rule {\r\rid: String! \r\r\rname: String \r\r\rtype: MarkupRuleType! \r\r\rvalue: Float! \r\r}\r\r\rFields id(String!):\rrule identifier\r\rname(String):\rrule name\r\rtype(MarkupRuleType!):\rtype of the value\r\rvalue(Float!):\rvalue applied by this rule\r\r\n"
},
{
	"uri": "/travelgatex/reference/schema/",
	"title": "Schema",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/travelgatex/reference/objects/search/",
	"title": "Search",
	"tags": [],
	"description": "",
	"content": " Available options for a given date and itinerary. It does not filter different classes, times or fares. It will always retrieve all results returned by the suppliers. The availability request is very straight forward.\nGraphQL schema definition type Search {\rShow deprecated fields\r\r\rhotel(\r\r\r\rtoken: String,\r\r\r\r\rcriteria: HotelCriteriaSearchInput,\r\r\r\r\rsettings: HotelSettingsInput,\r\r\r\r\rfilter: FilterInput,\r\r\r\r\r): HotelSearch \r// deprecated from 2017-11-21. You can find it in query at HotelX\r\r\r}\r\r\rRequired by Query: \r\r\r\n"
},
{
	"uri": "/admin/concepts/iam/",
	"title": "Security Model",
	"tags": [],
	"description": "",
	"content": " Overview TravelgateX Identity \u0026amp; Access Management (IAM) lets administrators authorize who can take action on specific resources, giving you full control and visibility to manage resources centrally. IAM provides a unified view into security policy across your entire organization, with built-in auditing to ease compliance processes.\nIAM lets you manage access control by defining who (member) has what access (role) for which resource:\nIdentity and Access Management\u0026lt;b\u0026gt;Identity and Access Management\u0026lt;/b\u0026gt;Members[Not supported by viewer]Roles\n[Not supported by viewer]Usersuserid@mail.com\n[Not supported by viewer]Service Accounts3434fAFE·EFF22\n[Not supported by viewer]owner[Not supported by viewer]viewer[Not supported by viewer]editor[Not supported by viewer]custom[Not supported by viewer]\nConcepts related to identity You grant access to members which can be of following types\n Users: Represents a developer, administrator or any other person who interacts with TravelgateX Platform. Any email address can be an identity.\n Service Accounts: Represents an application instead of to an individual end user. You can create as many service accounts as needed to represent the different logical components of your application.\n  Concepts related to access management When an authenticated member attempts to make a request, IAM makes an authorization decision about whether the member is allowed to perform the operation on a resource.\nResources and Groups You can grant access to member for a resource. Some examples of common resources are Suppliers, Accesses and Clients.\nGroups are organized hierachically, where the organization node is the root node in the hierachy, the folders are the children of the organization and the products are the children of the folders.\nHierarchy assignment Resources are assigned to groups and propagated by groups hierarchically from bottom to top.\nGroup hiereachy\u0026lt;b\u0026gt;Group hiereachy\u0026lt;/b\u0026gt;Organization[Not supported by viewer]organization_0[Not supported by viewer]Folders[Not supported by viewer]folder_0\u0026lt;\u0026lt;Seller Team\u0026gt;\u0026gt;[Not supported by viewer]folder_1\u0026lt;\u0026lt;Buyer Team\u0026gt;\u0026gt;[Not supported by viewer]Products[Not supported by viewer]Stats_0[Not supported by viewer]HotelX_1[Not supported by viewer]HotelX_0[Not supported by viewer]Stats_1[Not supported by viewer]Resources hierachy\u0026lt;b\u0026gt;Resources hierachy\u0026lt;/b\u0026gt;Resources[Not supported by viewer]InheritanceInheritanceInheritanceInheritanceaccess_0[Not supported by viewer]AssignmentAssignment\nPermissions and Roles Permissions determine what operations are allowed on a resource.\nA role is a collection of permissions. You cannot assign a permission to the member directly; instead you grant them a role. When you grant a role to a user, you grant them all the permissions that the role contains.\nYou can grant roles to members, which define who has what type of access. A policy is attached to a resource and identifies which member role is applied in every resource.\nMember permissions[Not supported by viewer]Members[Not supported by viewer]Role\n[Not supported by viewer]User[Not supported by viewer]viewer[Not supported by viewer]Service Account[Not supported by viewer]Belongs toBelongs toGroupsGroupsResourcesResourcesorganizations[Not supported by viewer]folders[Not supported by viewer]products[Not supported by viewer]accesses[Not supported by viewer]suppliers[Not supported by viewer]clients[Not supported by viewer]IAM Policy[Not supported by viewer]\n"
},
{
	"uri": "/travelgatex/reference/objects/serviceapi/",
	"title": "ServiceApi",
	"tags": [],
	"description": "",
	"content": " Information related to a Service API\nGraphQL schema definition type ServiceApi {\r\rcode: ID! \r\r\rname: String! \r\r\roperations: [ServiceOperation] \r\r\rerror: [Error!] \r\r}\r\r\rFields code(ID!):\rService API ID\r\rname(String!):\rService API Name\r\roperations([ServiceOperation]):\rOperations that a Service Api has\r\rerror([Error!]):\rErrors\r\r\nRequired by AdminQuery: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/serviceapifilter/",
	"title": "ServiceApiFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type ServiceApiFilter {\r\rApiName: String \r\r\rOperationName: String \r\r\rOperationType: String \r\r}\r\r\rFields ApiName(String):\r\r\rOperationName(String):\r\r\rOperationType(String):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/serviceapitype/",
	"title": "ServiceApiType",
	"tags": [],
	"description": "",
	"content": " Services Api available.\nGraphQL schema definition \renum\rServiceApiType{\r\r\rHOTEL,\r\r\r\rTRANSPORTATION,\r\r\r\rCAR,\r\r\r\rTRANSFERS,\r\r\r\rACTIVITIES,\r\r\r\rVIRTUALACCOUNT,\r\r\r\rPAYMENT,\r\r\r\rPACKAGE,\r\r\r} \r "
},
{
	"uri": "/travelgatex/reference/objects/serviceoperation/",
	"title": "ServiceOperation",
	"tags": [],
	"description": "",
	"content": " Information related to an API operation\nGraphQL schema definition type ServiceOperation {\r\rcode: ID! \r\r\rname: String! \r\r\rtype: String! \r\r\rtravelOperation: Int! \r\r}\r\r\rFields code(ID!):\rService Operation ID\r\rname(String!):\rService Operation name\r\rtype(String!):\rService Operation type\r\rtravelOperation(Int!):\rService Operation Travel Operation ID (1: avail) (2: reservation) (3: batch) (4: batchLongRun)\r\r\nRequired by ServiceApi: \rInformation related to a Service API\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/serviceoperationtype/",
	"title": "ServiceOperationType",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition \renum\rServiceOperationType{\r\r\rALL,\r\r\r\rSEARCH,\r\r\r\rQUOTE,\r\r\r\rBOOKING,\r\r\r\rOTHER,\r\r\r} \r "
},
{
	"uri": "/travelgatex/reference/objects/servicestatus/",
	"title": "ServiceStatus",
	"tags": [],
	"description": "",
	"content": " Indicates the status of the service\nGraphQL schema definition type ServiceStatus {\r\rcode: String \r\r\rtype: String \r\r\rdescription: String \r\r}\r\r\rFields code(String):\rStatus code\r\rtype(String):\rStatus type\r\rdescription(String):\rStatus description\r\r\nRequired by HotelXQuery: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/servicetype/",
	"title": "ServiceType",
	"tags": [],
	"description": "",
	"content": " Service Type\nGraphQL schema definition \renum\rServiceType{\r\r\rSKI_PASS,\r\r\r} \r "
},
{
	"uri": "/travelgatex/reference/inputobjects/settingsbaseinput/",
	"title": "SettingsBaseInput",
	"tags": [],
	"description": "",
	"content": " Contains the time out and business rules of a supplier or an access.\nGraphQL schema definition type SettingsBaseInput {\r\rtimeout: Int \r\r\rauditTransactions: Boolean \r\r\rbusinessRules: BusinessRulesInput \r\r}\r\r\rFields timeout(Int):\rMilliseconds before the connection is closed.\r\rauditTransactions(Boolean):\rSpecifies if transactions exchanged with the supplier have to be logged or not.\r\rbusinessRules(BusinessRulesInput):\rBusiness rules\r\r\nRequired by HotelXSupplierInput: \rSupplier object. Contains its own settings, code and access.\r\rHotelXAccessInput: \rAccessInput overwrites an existent access in our Back Office or creates a new one to be used in this search query only. An access object contains its own code, configuration and settings.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/stat/",
	"title": "Stat",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Stat {\r\rstart: DateTime! \r\r\rend: DateTime! \r\r\rduration: Float \r\r}\r\r\rFields start(DateTime!):\rStart UTC\r\rend(DateTime!):\rEnd UTC\r\rduration(Float):\rDifference between start and end in miliseconds\r\r\nRequired by StatsRequest: \rContains internal information.\r\rStatPlugin: \r\r\rStatAccess: \r\r\rStatTransaction: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/stataccess/",
	"title": "StatAccess",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatAccess {\r\rname: String! \r\r\rtotal: Stat! \r\r\rstaticConfiguration: Stat \r\r\rhotels: Int! \r\r\rzones: Int! \r\r\rcities: Int! \r\r\rrequestAccess: StatPlugin \r\r\rresponseAccess: StatPlugin \r\r\rtransactions: [StatTransaction!]! \r\r\rplugins: [StatPlugin!] \r\r}\r\r\rFields name(String!):\rAccess name\r\rtotal(Stat!):\rTotal access time\r\rstaticConfiguration(Stat):\rStatic configuration time\r\rhotels(Int!):\rNumber of hotels\r\rzones(Int!):\rNumber of zones\r\rcities(Int!):\rNumber of cities\r\rrequestAccess(StatPlugin):\rAccess request time\r\rresponseAccess(StatPlugin):\rAccess response time\r\rtransactions([StatTransaction!]!):\rDetail transaction time\r\rplugins([StatPlugin!]):\rPlugin execution time\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/statplugin/",
	"title": "StatPlugin",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatPlugin {\r\rname: String! \r\r\rtotal: Stat! \r\r}\r\r\rFields name(String!):\rPlugin name\r\rtotal(Stat!):\rtotal plugin time\r\r\nRequired by StatsRequest: \rContains internal information.\r\rStatAccess: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/stattransaction/",
	"title": "StatTransaction",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatTransaction {\r\rreference: String! \r\r\rtotal: Stat! \r\r\rbuildRequest: Stat! \r\r\rworkerCommunication: Stat! \r\r\rparseResponse: Stat! \r\r}\r\r\rFields reference(String!):\rExtra information about transaction.\r\rtotal(Stat!):\rTotal transaction time\r\rbuildRequest(Stat!):\rBuild request time\r\rworkerCommunication(Stat!):\rWorker connection time\r\rparseResponse(Stat!):\rParse response time\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/stats/",
	"title": "Stats",
	"tags": [],
	"description": "",
	"content": " The service used to access the stats of every connection that uses the HUB\nGraphQL schema definition type Stats {\r\rcode: ID! \r\r\rstatsData: StatsData \r\r\rerror: [Error!] \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\r\r\rstatsData(StatsData):\r\r\rerror([Error!]):\rErrors that abort services\r\rcreatedAt(DateTime!):\rDate created\r\rupdatedAt(DateTime!):\rDate updated\r\r\nRequired by StatsEdge: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/statsassert/",
	"title": "StatsAssert",
	"tags": [],
	"description": "",
	"content": " Assert of an specific error\nGraphQL schema definition type StatsAssert {\r\rstartTime: DateTime! \r\r\rexecTime: Int! \r\r\rurl: URI! \r\r}\r\r\rFields startTime(DateTime!):\r\r\rexecTime(Int!):\r\r\rurl(URI!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/statsconnection/",
	"title": "StatsConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsConnection {\r\redges: [StatsEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([StatsEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequired by StatsQuery: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/statsdata/",
	"title": "StatsData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsData {\r\raccess: Access! \r\r\rclient: Client! \r\r\rfrom: DateTime! \r\r\rto: DateTime! \r\r\rratios: Ratios! \r\r\roperations(\rtype: [ServiceOperationType!],\r): [OperationDetailed!] \r\r}\r\r\rFields access(Access!):\r\r\rclient(Client!):\r\r\rfrom(DateTime!):\rFrom date of search\r\rto(DateTime!):\rTo date of search\r\rratios(Ratios!):\rDetails of look to quote and look to book.\r\roperations([OperationDetailed!]):\r\r\r\nRequired by Stats: \rThe service used to access the stats of every connection that uses the HUB\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/statsedge/",
	"title": "StatsEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsEdge {\r\rcursor: String! \r\r\rnode: Stats \r\r}\r\r\rFields cursor(String!):\r\r\rnode(Stats):\r\r\r\nRequired by StatsConnection: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/statsfilterinput/",
	"title": "StatsFilterInput",
	"tags": [],
	"description": "",
	"content": " Filters needed to do a search. Users (List of users), Suppliers (List of suppliers), ServiceApis (List of service apis), From (Start date of search - YYYY-MM-DD HH:mm:ss), To (End date of search - YYYY-MM-DD HH:mm:ss)\nGraphQL schema definition type StatsFilterInput {\r\rorganizations: [ID!] \r\r\raccesses: [ID!] \r\r\rsuppliers: [ID!] \r\r\rserviceApis: [ServiceApiType!] \r\r\roperation: [ServiceOperationType!] \r\r\rserviceOperations: [ID!] \r\r\rfrom: DateTime! \r\r\rto: DateTime! \r\r}\r\r\rFields organizations([ID!]):\rList of organizations\r\raccesses([ID!]):\rList of accesses\r\rsuppliers([ID!]):\rList of suppliers\r\rserviceApis([ServiceApiType!]):\rList of services apis\r\roperation([ServiceOperationType!]):\rList of services operations\r\rserviceOperations([ID!]):\r\r\rfrom(DateTime!):\rFrom date of search\r\rto(DateTime!):\rTo date of search\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/statsinfo/",
	"title": "StatsInfo",
	"tags": [],
	"description": "",
	"content": " Details of an specific error\nGraphQL schema definition type StatsInfo {\r\rcode: ID! \r\r\rtype: StatsInfoTypes! \r\r\rhits: Int! \r\r\rtime: Int! \r\r\rasserts: [StatsAssert!] \r\r}\r\r\rFields code(ID!):\r\r\rtype(StatsInfoTypes!):\r\r\rhits(Int!):\rTotal hits.\r\rtime(Int!):\rTotal time (ms)\r\rasserts([StatsAssert!]):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/statsinfotypes/",
	"title": "StatsInfoTypes",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition \renum\rStatsInfoTypes{\r\r\rALL,\r\r\r\rOK,\r\r\r\rINTEGRATION,\r\r\r\rPROVIDER,\r\r\r\rCOMMUNICATION,\r\r\r\rHUB,\r\r\r\rOTHER,\r\r\r} \r Required by StatsInfo: \rDetails of an specific error\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/statsquery/",
	"title": "StatsQuery",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type StatsQuery {\r\rreport(\r\r\r\rfilter: StatsFilterInput!,\r\r\r\r\rfirst: Int,\r\r\r\r\rlast: Int,\r\r\r\r\rbefore: String,\r\r\r\r\rafter: String,\r\r\r\r\r): StatsConnection! \r\r}\r\r\rFields report(StatsConnection!):\rThe report query, represents all of the entry points into our object graph\r\r\nRequired by Query: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/statsrequest/",
	"title": "StatsRequest",
	"tags": [],
	"description": "",
	"content": " Contains internal information.\nGraphQL schema definition type StatsRequest {\r\rtotal: Stat! \r\r\rvalidation: Stat! \r\r\rprocess: Stat! \r\r\rconfiguration: Stat! \r\r\rrequest: Stat! \r\r\rresponse: Stat! \r\r\rrequestPlugin: StatPlugin \r\r\rresponsePlugin: StatPlugin \r\r\rhotels: Int! \r\r\rzones: Int! \r\r\rcities: Int! \r\r\rdockerID: String! \r\r\rAccesses: [StatAccess!]! \r\r}\r\r\rFields total(Stat!):\rTotal transaction time\r\rvalidation(Stat!):\rRequest validation time\r\rprocess(Stat!):\rProcess time. Contains communication time, parse time and plugin time.\r\rconfiguration(Stat!):\rBuild access time\r\rrequest(Stat!):\rRequest time\r\rresponse(Stat!):\rResponse time\r\rrequestPlugin(StatPlugin):\rPlugin execution time\r\rresponsePlugin(StatPlugin):\rPlugin execution time\r\rhotels(Int!):\rNumber of hotels\r\rzones(Int!):\rNumber of zones\r\rcities(Int!):\rNumber of cities\r\rdockerID(String!):\rDocker Id\r\rAccesses([StatAccess!]!):\rDetail access time\r\r\nRequired by HotelSearch: \rResults from Avail Hotel; contains all the available options for a given date and itinerary\r\rResponse: \r\r\rHotelQuote: \r\r\rHotelBooking: \r\r\rHotelBookPayload: \r\r\rHotelCancelPayload: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/statustype/",
	"title": "StatusType",
	"tags": [],
	"description": "",
	"content": " Options status\nGraphQL schema definition \renum\rStatusType{\r\r\rOK,\r\r\r\rRQ,\r\r\r} \r Required by HotelOptionSearch: \rAn option includes hotel information, meal plan, total price, conditions and room description\r\rHotelOptionQuote: \rContains information about quote(s)\r\r\n"
},
{
	"uri": "/travelgatex/reference/scalars/string/",
	"title": "String",
	"tags": [],
	"description": "",
	"content": " The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\nGraphQL schema definition scalar String\r\r\rRequired by AccessEdge: \r\r\rError: \rApplication errors\r\rAdviseMessage: \r\r\rAccessData: \r\r\rSupplierData: \r\r\rProvider: \rTemporary type to use only during SQL server\u0026#39;s lifetime\r\rParameter: \rParameters for additional information for the supplier\u0026#39;s configuration.\r\rPageInfo: \r\r\rSupplierEdge: \r\r\rClientEdge: \r\r\rClientData: \r\r\rServiceApiFilter: \r\r\rServiceApi: \rInformation related to a Service API\r\rServiceOperation: \rInformation related to an API operation\r\rOrganizationEdge: \r\r\rOrganizationData: \r\r\rGroupCommonData: \r\r\rGroupEdge: \r\r\rGroupData: \r\r\rMemberData: \r\r\rRoleEdge: \r\r\rRoleData: \r\r\rResourceEdge: \r\r\rResourceData: \r\r\rAPIEdge: \r\r\rAPIData: \r\r\rOperationEdge: \r\r\rOperationData: \r\r\rMemberEdge: \r\r\rProductEdge: \r\r\rProductData: \r\r\rRelayInput: \r\r\rBoardEdge: \rBoardList Edge definition\r\rBoardData: \rBoard data\r\rText: \r\r\rCategoryEdge: \rCategoryList Edge definition\r\rCategoryData: \rCategory data\r\rRoomEdge: \rRoomList Edge definition\r\rRoomData: \rRoom data\r\rHotelConnection: \rHotelList definition\r\rHotelEdge: \rHotelList Edge definition\r\rHotelData: \rHotel data\r\rProperty: \rIndicates Property type\r\rLocation: \rIndicates the location of the hotel\r\rDestinationData: \rInformation about destinantion\r\rContact: \rContact Data.\r\rAmenity: \rAn Amenity is defined as something intended to make life more pleasant or comfortable for people. Examples include: swimming pools, shopping centers, etc.\r\rMedia: \rContains media information.\r\rDestinationConnection: \rDestinationList definition\r\rDestinationEdge: \rDestinationList Edge definition\r\rHotelXDestinationSearcherInput: \r\r\rHotelCriteriaSearchInput: \rSearch criteria contains destination, travel dates and the number of pax in each room. You must preload the other fields in our system by complete the fields absents.\r\rHotelSettingsInput: \rSettings that you can edit for this avail. Values are loaded by default in our Back Office.\r\rHotelXSupplierInput: \rSupplier object. Contains its own settings, code and access.\r\rConfigurationInput: \rThe information and credentials required to access the supplier’s system.\r\rParameterInput: \rParameters Input.\r\rPluginsInput: \rPlugin to execute.\r\rHotelSearch: \rResults from Avail Hotel; contains all the available options for a given date and itinerary\r\rStatsRequest: \rContains internal information.\r\rStatPlugin: \r\r\rStatAccess: \r\r\rStatTransaction: \r\r\rTransactions: \rSupplier transaction\r\rWarning: \rApplication warnings\r\rCriteriaSearch: \rSearch criteria contains destination, travel dates and the number of pax in each room.\r\rHotelOptionSearch: \rAn option includes hotel information, meal plan, total price, conditions and room description\r\rBookableOptionSearch: \r\r\rRoom: \rContains the room information of the option returned.\r\rMarkup: \rInforms markup applied over supplier price.\r\rRule: \r\r\rBed: \rContains information about a bed.\r\rRatePlan: \rInformation about the rate of the option returned.\r\rPromotion: \rInformation about room promotions(offers).\r\rSupplement: \rSupplement that it can be or its already added to the option returned. Contains all the information about the supplement.\r\rResort: \rContains information about the Resort.\r\rSurcharge: \rSurcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.\r\rAddOn: \rAdditional information about the option\r\rHotelCriteriaQuoteInput: \rThe quote criteria contains the option reference id, block and language.\r\rHotelOptionQuote: \rContains information about quote(s)\r\rHotelCriteriaBookingInput: \rCriteria of book contains basic information to find a book or books.\r\rCriteriaBookingReferencesInput: \rCriteria by references\r\rBookReferenceInput: \rReference object that contains the client reference and/or supplier reference.\r\rHotelBookingDetail: \rContains information about booking\r\rReference: \rContains reference codes.\r\rHolder: \rHolder object that contains the occupant\u0026#39;s (pax\u0026#39;s) name and surname.\r\rBookingHotel: \r\r\rBookingRoom: \r\r\rServiceStatus: \rIndicates the status of the service\r\rMappingContext: \rReturns the differents group contexts\r\rMappingEntity: \rMapping about client codes with the equivalence per supplier.\r\rMap: \rMap codes.\r\rStatsEdge: \r\r\rFile: \r\r\rMappeaGetMappeaStatsInput: \r# GetMappeaStats\r\rGetMappeaStatsData: \r\r\rDefaultSettings: \r\r\rMutation: \rMutations are operations that change or update data on the server\r\rAccessInput: \rAccess input\r\rCreateClientInput: \r\r\rUpdateClientInput: \r\r\rCreateOrganizationInput: \r\r\rCreateMemberInput: \r\r\rCreateGroupInput: \r\r\rUpdateMemberInput: \r\r\rUpdateGroupInput: \r\r\rHotelXMutation: \r\r\rHotelBookInput: \rCriteria of book.\r\rPaymentCardInput: \rInput PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information\r\rHolderInput: \rHolder object that contains the occupant\u0026#39;s (pax\u0026#39;s) name and surname.\r\rBookPaxInput: \rInput BookPax contains basic information abaout pax suach as name, surname and age.\r\rHotelCancelInput: \rCancellation Criteria.\r\rHotelCancelDetail: \rContains information about cancel\r\rMappeaUploadFileInput: \r## UploadFile\r\rUploadFileData: \r\r\rDefaultSettingsInput: \r\r\rSupplierGroup: \rgroup related to a supplier\r\rConnectUser: \rData related to a connected user and its groups\r\rConnectUserGroup: \rgroup related to a connect user\r\rAccessConfigurationInput: \rThe information required to access the supplier\u0026#39;s system.\r\rAccessConnectUserInput: \rConnect user input for data access management API\r\rConnectUserGroupInput: \rgroup related to a connect user\r\rAccessSupplierInput: \rSupplier input for data access management API\r\rSupplierGroupInput: \rgroup related to a supplier\r\rIdAccessConfigurationInput: \r\r\rMappeaAddOrganizationInput: \r# AddOrganization\r\rMappeaEditOrganizationInput: \r# EditOrganization\r\rLegacyData: \rThe URI type represents a URI values. A good example mith be an Hotel Image URL. In queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: \u0026#34;http:\\www.travelgatex.com\u0026#34;.\r\r "
},
{
	"uri": "/travelgatex/reference/objects/supplement/",
	"title": "Supplement",
	"tags": [],
	"description": "",
	"content": " Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.\nGraphQL schema definition type Supplement {\r\rcode: String! \r\r\rname: String \r\r\rdescription: String \r\r\rsupplementType: SupplementType! \r\r\rchargeType: ChargeType! \r\r\rmandatory: Boolean! \r\r\rdurationType: DurationType \r\r\rquantity: Int \r\r\runit: UnitTimeType \r\r\reffectiveDate: Date \r\r\rexpireDate: Date \r\r\rresort: Resort \r\r\rprice: Price \r\r}\r\r\rFields code(String!):\rSpecifies the supplement code.\r\rname(String):\rSpecifies the supplement name.\r\rdescription(String):\rSpecifies the supplement description.\r\rsupplementType(SupplementType!):\rIndicates the supplement type. Possible types: Fee, Ski_pass, Lessons, Meals, Equipment, Ticket, Transfers, Gla, Activity or Null.\r\rchargeType(ChargeType!):\rIndicates the charge types. We need to know whether the supplements have to be paid when the consumer gets to the hotel or beforehand. Possible charge types: Include or Exclude. when include: this supplement is mandatory and included in the option\u0026#39;s price when exclude: this supplement is not included in the option\u0026#39;s price\r\rmandatory(Boolean!):\rIndicates if the supplement is mandatory or not. If mandatory, this supplement will be applied to this option if the chargeType is excluded the customer will have to pay it directly at the hotel\r\rdurationType(DurationType):\rSpecifies the duration type. Possible duration types: Range (specified dates) or Open. This field is mandatory for PDI.\r\rquantity(Int):\rIndicates the quantity of field in the element \u0026#34;unit\u0026#34;.\r\runit(UnitTimeType):\rIndicates the unit type. Possible unit types: Day or Hour.\r\reffectiveDate(Date):\rIndicates the effective date of the supplement.\r\rexpireDate(Date):\rIndicates the expire date of the supplement.\r\rresort(Resort):\rContains information about the resort\r\rprice(Price):\rIndicates the supplement price.\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/supplementtype/",
	"title": "SupplementType",
	"tags": [],
	"description": "",
	"content": " Supplement Type\nGraphQL schema definition \renum\rSupplementType{\r\r\rSKI_PASS,\r\r\r\rLESSONS,\r\r\r\rMEALS,\r\r\r\rEQUIPMENT,\r\r\r\rTICKET,\r\r\r\rTRANSFERS,\r\r\r\rGALA,\r\r\r\rACTIVITY,\r\r\r} \r Required by Supplement: \rSupplement that it can be or its already added to the option returned. Contains all the information about the supplement.\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/supplier/",
	"title": "Supplier",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Supplier {\r\rcode: ID! \r\r\rsupplierData: SupplierData \r\r\rerror: [Error!] \r\r\rcreatedAt: DateTime! \r\r\rupdatedAt: DateTime! \r\r}\r\r\rFields code(ID!):\r\r\rsupplierData(SupplierData):\r\r\rerror([Error!]):\rErrors that abort services\r\rcreatedAt(DateTime!):\rDate created\r\rupdatedAt(DateTime!):\rDate updated\r\r\nRequired by AccessData: \r\r\rSupplierEdge: \r\r\rAdminMutation: \r\r\rSupplierDetected: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/supplierconnection/",
	"title": "SupplierConnection",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierConnection {\r\redges: [SupplierEdge] \r\r\rpageInfo: PageInfo! \r\r}\r\r\rFields edges([SupplierEdge]):\r\r\rpageInfo(PageInfo!):\r\r\r\nRequired by AdminQuery: \r\r\rOrganizationData: \r\r\rGroupCommonData: \r\r\rGroupData: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/supplierdata/",
	"title": "SupplierData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierData {\r\rcode: ID! \r\r\rname: String! \r\r\risActive: Boolean! \r\r\rprovider: Provider! \r\r\rcontext: String! \r\r\rserviceApi: Int! \r\r\rsupplierGroup: ID \r\r\raccesses: AccessConnection \r\r}\r\r\rFields code(ID!):\runique identifier of a supplier\r\rname(String!):\rSupplier complete name\r\risActive(Boolean!):\rindicates whether a supplier is active\r\rprovider(Provider!):\rinstance to which this supllier is connected\r\rcontext(String!):\rContext where the Supplier belongs to\r\rserviceApi(Int!):\rService API\r\rsupplierGroup(ID):\rSupplierGroup Internal Supplier grouping\r\raccesses(AccessConnection):\rAccesses where the supplier is referenced\r\r\nRequired by Supplier: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/supplierdetected/",
	"title": "SupplierDetected",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierDetected {\r\rcode: ID! \r\r\rsupplier: Supplier \r\r\rnumberOfHotels: Int! \r\r}\r\r\rFields code(ID!):\r\r\rsupplier(Supplier):\r\r\rnumberOfHotels(Int!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/supplieredge/",
	"title": "SupplierEdge",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierEdge {\r\rcursor: String! \r\r\rnode: Supplier \r\r}\r\r\rFields cursor(String!):\r\r\rnode(Supplier):\r\r\r\nRequired by SupplierConnection: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/supplierfilter/",
	"title": "SupplierFilter",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type SupplierFilter {\r\rsupplierID: [ID] \r\r\raccessID: [ID] \r\r\rgroupID: [ID] \r\r\risActive: Boolean \r\r\rserviceAPI: [Int] \r\r}\r\r\rFields supplierID([ID]):\r\r\raccessID([ID]):\r\r\rgroupID([ID]):\r\r\risActive(Boolean):\r\r\rserviceAPI([Int]):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/suppliergroup/",
	"title": "SupplierGroup",
	"tags": [],
	"description": "",
	"content": " group related to a supplier\nGraphQL schema definition type SupplierGroup {\r\rgroupCode: String! \r\r\risActive: Boolean! \r\r}\r\r\rFields groupCode(String!):\rgroup code of the group related to this supplier\r\risActive(Boolean!):\rIndicates if the supplier is active for its supplier\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/suppliergroupinput/",
	"title": "SupplierGroupInput",
	"tags": [],
	"description": "",
	"content": " group related to a supplier\nGraphQL schema definition type SupplierGroupInput {\r\rgroupCode: String! \r\r\risActive: Boolean! \r\r}\r\r\rFields groupCode(String!):\rgroup code of the group related to this supplier\r\risActive(Boolean!):\rIndicates if the supplier is active for its supplier\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/surcharge/",
	"title": "Surcharge",
	"tags": [],
	"description": "",
	"content": " Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.\nGraphQL schema definition type Surcharge {\r\rchargeType: ChargeType! \r\r\rmandatory: Boolean! \r\r\rprice: Price! \r\r\rdescription: String \r\r}\r\r\rFields chargeType(ChargeType!):\rIndicates the charge types. We need to know whether the supplements have to be paid when the consumer gets to the hotel or beforehand. Possible charge types: Include or Exclude. when include: this surcharge is mandatory and included in the option\u0026#39;s price when exclude: this surcharge is not included in the option\u0026#39;s price\r\rmandatory(Boolean!):\rIndicates if the surcharge is mandatory or not. If mandatory, this surcharge will be applied to this option if the chargeType is excluded the customer will have to pay it directly at the hotel\r\rprice(Price!):\rIndicates the surcharge price.\r\rdescription(String):\rSpecifies the surcharge description.\r\r\n"
},
{
	"uri": "/travelgatex/reference/enums/template/",
	"title": "Template",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition \renum\rTemplate{\r\r\rFOLDER_DEFAULT,\r\r\r} \r Required by CreateGroupInput: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/interfaces/text/",
	"title": "Text",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition interface Text {\r\rtext: String! \r\r\rlanguage: Language! \r\r}\r\r\rFields text(String!):\r\r\rlanguage(Language!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/timeout/",
	"title": "Timeout",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type Timeout {\r\rsearch: Int! \r\r\rquote: Int! \r\r\rbook: Int! \r\r}\r\r\rFields search(Int!):\rMilliseconds before the search connection is closed.\r\rquote(Int!):\rMilliseconds before the quote connection is closed.\r\rbook(Int!):\rMilliseconds before the book connection is closed.\r\r\nRequired by DefaultSettings: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/timeoutinput/",
	"title": "TimeoutInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type TimeoutInput {\r\rsearch: Int! \r\r\rquote: Int! \r\r\rbook: Int! \r\r}\r\r\rFields search(Int!):\rMilliseconds before the search connection is closed.\r\rquote(Int!):\rMilliseconds before the quote connection is closed.\r\rbook(Int!):\rMilliseconds before the book connection is closed.\r\r\nRequired by DefaultSettingsInput: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/transactions/",
	"title": "Transactions",
	"tags": [],
	"description": "",
	"content": " Supplier transaction\nGraphQL schema definition type Transactions {\r\rrequest: String! \r\r\rresponse: String! \r\r\rtimeStamp: DateTime! \r\r}\r\r\rFields request(String!):\rTransaction Request.\r\rresponse(String!):\rTransaction Response.\r\rtimeStamp(DateTime!):\rTime when the request has been processed.\r\r\n"
},
{
	"uri": "/travelgatex/reference/scalars/uri/",
	"title": "URI",
	"tags": [],
	"description": "",
	"content": " The URI type represents a URI values. A good example mith be an Hotel Image URL. In queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: \u0026ldquo;http:\\www.travelgatex.com\u0026rdquo;.\nGraphQL schema definition scalar URI\r\r\rRequired by Urls: \rUrl\u0026#39;s\r\rContact: \rContact Data.\r\rMedia: \rContains media information.\r\rUrlsInput: \rURLs Input\r\rStatsAssert: \rAssert of an specific error\r\r "
},
{
	"uri": "/travelgatex/reference/enums/unittimetype/",
	"title": "UnitTimeType",
	"tags": [],
	"description": "",
	"content": " Unit Time Type\nGraphQL schema definition \renum\rUnitTimeType{\r\r\rDAY,\r\r\r\rHOUR,\r\r\r} \r Required by Supplement: \rSupplement that it can be or its already added to the option returned. Contains all the information about the supplement.\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/updateclientinput/",
	"title": "UpdateClientInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UpdateClientInput {\r\rcode: ID! \r\r\rname: String \r\r\risActive: Boolean \r\r}\r\r\rFields code(ID!):\rID identifier of a Client\r\rname(String):\rClient complete name\r\risActive(Boolean):\rIndicates whether a Client is active or inactive\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/updategroupinput/",
	"title": "UpdateGroupInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UpdateGroupInput {\r\rapi: String! \r\r\rcode: String! \r\r\rinfo: String \r\r\rmethod: Method! \r\r}\r\r\rFields api(String!):\r\r\rcode(String!):\r\r\rinfo(String):\r\r\rmethod(Method!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/updatememberinput/",
	"title": "UpdateMemberInput",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UpdateMemberInput {\r\rcode: String! \r\r\rinfo: String \r\r\rgroup: String! \r\r\rroles: [String!]! \r\r\rresource: String! \r\r\rmethod: Method! \r\r}\r\r\rFields code(String!):\r\r\rinfo(String):\r\r\rgroup(String!):\r\r\rroles([String!]!):\r\r\rresource(String!):\r\r\rmethod(Method!):\r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/uploadfiledata/",
	"title": "UploadFileData",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UploadFileData {\r\rfileId: String! \r\r\rsuppliers: [SupplierDetected!] \r\r\rnumberOfLines: Int \r\r\rnumberOfHotels: Int \r\r}\r\r\rFields fileId(String!):\r\r\rsuppliers([SupplierDetected!]):\r\r\rnumberOfLines(Int):\r\r\rnumberOfHotels(Int):\r\r\r\nRequired by UploadFileResponse: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/uploadfileresponse/",
	"title": "UploadFileResponse",
	"tags": [],
	"description": "",
	"content": " GraphQL schema definition type UploadFileResponse {\r\rdata: UploadFileData \r\r\rerror: Error \r\r\rwarnings: [Warning] \r\r}\r\r\rFields data(UploadFileData):\r\r\rerror(Error):\r\r\rwarnings([Warning]):\r\r\r\nRequired by MappeaMutation: \r\r\r\n"
},
{
	"uri": "/travelgatex/data-automation/uploading-strategies/",
	"title": "Uploading Strategies",
	"tags": [],
	"description": "How to Upload data",
	"content": " How to upload data to the platform There are two ways of uploading data to the platform:\n Secure File Transfer Protocol (SFTP) GraphQL mutation  Secure File Transfer Protocol (SFTP) SFTP, or Secure File Transfer Protocol, is a network protocol that provides a secure access, transfer, and management of data files programmatically. This protocol is used by the largest organizations in finance, technology, and consulting to transfer data such as Personally Identifiable Information (PII) to ensure it remains 100% secure.\nSecurity To ensure the security of your data, we adhere to the highest standards in data security. Some of the advanced security measures we take include:\n Password-based authentication. IP Whitelisting: we whitelist the IP Addresses from where you\u0026rsquo;ll be accessing your SFTP server to ensure you are the only one allowed. Anomaly Detection: to ensure no loss of data, we detect anomalies in your uploads to the SFTP server and immediatly warn you when an upload is about to significantly change your account. Encryption: data is encrypted, keeping your information safe and private.  Setup To get your FTP Credential Details raise a customer care request in Jira Service Desk.\nNaming Conventions Keep in mind that the file is loaded using a specific name depending on the data being uploaded. Remember to always overwrite the last file, because only the last file will be loaded into the platform. If in some case you need to revert to an old version, don\u0026rsquo;t worry because we keep a copy of the old files. For each file name please see the specific file documentation in each product\u0026rsquo;s section.\nGraphQL Mutation Coming soon\r"
},
{
	"uri": "/travelgatex/reference/objects/urls/",
	"title": "Urls",
	"tags": [],
	"description": "",
	"content": " Url\u0026rsquo;s\nGraphQL schema definition type Urls {\r\rsearch: URI \r\r\rquote: URI \r\r\rbook: URI \r\r\rgeneric: URI \r\r}\r\r\rFields search(URI):\rSpecific URL for Availability method.\r\rquote(URI):\rSpecific URL for Reservation method.\r\rbook(URI):\rSpecific URL for Valuation method.\r\rgeneric(URI):\rSupplier URL used for multiple methods.\r\r\nRequired by AccessData: \r\r\r\n"
},
{
	"uri": "/travelgatex/reference/inputobjects/urlsinput/",
	"title": "UrlsInput",
	"tags": [],
	"description": "",
	"content": " URLs Input\nGraphQL schema definition type UrlsInput {\r\rsearch: URI \r\r\rquote: URI \r\r\rbook: URI \r\r\rgeneric: URI \r\r}\r\r\rFields search(URI):\rSpecific URL for Availability method.\r\rquote(URI):\rSpecific URL for Reservation method.\r\rbook(URI):\rSpecific URL for Valuation method.\r\rgeneric(URI):\rSupplier URL used for multiple methods.\r\r\nRequired by ConfigurationInput: \rThe information and credentials required to access the supplier’s system.\r\rAccessInput: \rAccess input\r\r\n"
},
{
	"uri": "/travelgatex/reference/objects/warning/",
	"title": "Warning",
	"tags": [],
	"description": "",
	"content": " Application warnings\nGraphQL schema definition type Warning {\r\rcode: String! \r\r\rtype: String! \r\r\rdescription: String! \r\r}\r\r\rFields code(String!):\rWarning code\r\rtype(String!):\rWarning type\r\rdescription(String!):\rWarning description\r\r\nRequired by GetUploadedFilesResponse: \r## GetUploadedFiles\r\rGetMappeaStatsResponse: \r\r\rOnlyStatusResponse: \r## Common Items\r\rUploadFileResponse: \r\r\r\n"
},
{
	"uri": "/hotelx/plugins/blacklist/",
	"title": "Blacklist",
	"tags": [],
	"description": "hotel codes blacklist",
	"content": " The blacklist are used to ignorer hotel code when we make a search. the are 2 types of blacklist, you can filter hotel code by specific access or by specific provider.\nIn order to load your blacklist you just need to follow the instructions below:\nAccess blacklist Blacklist is applied for specific access\nFile Format The file should be in the below format:\n Encoding: UTF-8\n File Name: access_blacklist.csv\n Header Row: Client, Code, Context, Values\n Client: The client that you want to apply the blacklist, if it is empty, it will apply to all clients in the same group.\n Code: The access code\n Context: The context of hotels codes\n Values: Contain the list of hotel codes, separated by \u0026ldquo;;\u0026rdquo;\n  Delimiter: Comma (“,”)\n Directory: /F[folder code]_[unique code]/HotelX_[unique code]/\n  Sample File Name: access_blacklist.csv\nData:\nClient,Code,Context,Values client1,access1,context1,a;b client2,access2,context2,a;b;c ,access3,context1,a;b;c;d;e  Supplier blacklist Blacklist is applied for specific provider\nFile Format The file should be in the below format:\n Encoding: UTF-8\n File Name: access_blacklist.csv\n Header Row: Client, Code, Context, Values\n Client: The client that you want to apply the blackllist, if it is empty, it will apply to all client from the same group.\n Code: The provider code\n Context: The context of hotels codes\n Values: Contain the list of hotel codes, separated by \u0026ldquo;;\u0026rdquo;\n  Delimiter: Comma (“,”)  Directory: /F[folder code]_[unique code]/HotelX_[unique code]/\n  Sample File Name: supplier_blacklist.csv\nData:\nClient,Code,Context,Values client1,supplier1,context1,a;b client2,supplier2,context2,a;b;c ,supplier3,context1,a;b;c;d;e  "
},
{
	"uri": "/hotelx/concepts/search-mode/booking-flow/",
	"title": "Booking Flow",
	"tags": [],
	"description": "Learn about Transactional Booking flow. Search, Quote and Confirm Reservation",
	"content": " Search, Quote and Book transactions must be executed sequentally in order to book hotel rooms in a Seller.\n --                                            1. SEARCH  2. QUOTE  3. BOOK                            OptionID  WHERE TO NEXT?   QuoteID  OptionID   ConfirmationID  QuoteID      \nSearch Performs a hotel availability search over 1 or more Seller accesses. Depending Seller, search operations implicit use supplier’s cache.\nOperation { \u0026quot;query\u0026quot;: { \u0026quot;hotelX\u0026quot;: { \u0026quot;search\u0026quot;: { } } } }  PlayGround Samples  search   Quote Performs an hotel quote over an option returned in Search Response.\nOperation { \u0026quot;query\u0026quot;: { \u0026quot;hotelX\u0026quot;: { \u0026quot;quote\u0026quot;: { } } } }  PlayGround Samples  quote   Book Performs a book or reservation over an option returned in Quote Response.\nOperation { \u0026quot;mutation\u0026quot;: { \u0026quot;hotelX\u0026quot;: { \u0026quot;book\u0026quot;: { } } } }  PlayGround Samples  book   "
},
{
	"uri": "/admin/concepts/common-resources/",
	"title": "Common Resources",
	"tags": [],
	"description": "",
	"content": " Overview Common resources are used in more than 1 TravelgateX product. So creating, updating or deleting one of them resources can impact on several product behaviors.\nSupplier A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers.\nAccess An Access is a set of credentials and configuration in order to access a Supplier.\nClient Client identify who is doing the request and holds a configuraiotn assigned to it.\n"
},
{
	"uri": "/learning-graphql/overview/",
	"title": "GraphQL Overview",
	"tags": [],
	"description": "",
	"content": " What is GraphQL? GraphQL is a query language for your API. It was first designed by Facebook. It\u0026rsquo;s a new way of dealing with and managing data models via API, and is especially useful for decoupling client from server logic.\n GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools. graphql.org\nGraphQL uses a server-side runtime for executing queries by using a type system you define for your data. GraphQL isn\u0026rsquo;t tied to any specific database or storage engine and is instead backed by your existing code and data. graphql.org/learn\nA GraphQL query is a string that is sent to the server to be interpreted and fulfilled, which then returns JSON back to the client. Lee Byron, Facebook\n GraphQL at TravelgateX GraphQL is a perfect fit for all of our application needs:\n Scalable: GraphQL is able to handle millions of requests. Stable: GraphQL allows us to keep building our API products and introduce new changes to our APIs that do not break existing integrations in client applications. Fast: GraphQL not only allows faster response times by letting you choose exactly what you want, but also is consumes less bandwidth which makes responses lighter.  We are focused on delivering the best APIs to our clients. SOAP APIs are long gone and modelling REST APIs to fit a vast variety of products is not only hard to understand, it also gets harder to manage as the data model gets bigger. At TravelgateX, we\u0026rsquo;re true believers of the Kaisen philosophy. We\u0026rsquo;re constantly researching for new ways to improve.\n \u0026ldquo;GraphQL allows us to think of our APIs as a whole, giving us a coherence across all of our products and services, which are accessible from one single endpoint. It is the ideal showcase for all of our innovative API products.\u0026rdquo; Oscar Perez, CTO\n "
},
{
	"uri": "/hotelx/plugins/mapping/",
	"title": "Mapping",
	"tags": [],
	"description": "Map plugins",
	"content": " The map plugins are used to change the supplier codes to client codes or vice versa. There are four types:\n Hotel map  Board Map  Room Map  Rate Map   Our map formats share a common structure. In order to load your maps you just need to follow the instructions below:\nExample files You can download example for the files structure here\nEntity Maps File Format The file should be in the following format:\n Encoding: UTF-8\n File Name: [Context Source]_[Context Destination]_[entity]_map.csv\n Context Source: correspond to the client code\n Context Destination: correspond to the supplier code\n 1 file for each supplier\n  Header Row: Code Source, Code Destination\n Context Source: correspond to the client codes\n Context Destination: correspond to the supplier codes\n  Delimiter: Comma (\u0026ldquo;,\u0026rdquo;)\n Directory: /F[folder code]_[unique code]/HotelX_[unique code]/Maps/[entity]/\n  File Names All map files must have the same name structure as follow, you need create a file for Context Destionation\n   Entity File Name     Hotel [Context Source]_[Context Destination]_hotel_map.csv   Board [Context Source]_[Context Destination]_board_map.csv   Room [Context Source]_[Context Destination]_room_map.csv   Rate [Context Source]_[Context Destination]_rate_map.csv    Directories    Entity File Name     Hotel /F[folder code]_[unique code]/HotelX_[unique code]/Maps/Hotel/   Board /F[folder code]_[unique code]/HotelX_[unique code]/Maps/Board/   Room /F[folder code]_[unique code]/HotelX_[unique code]/Maps/Room/   Rate /F[folder code]_[unique code]/HotelX_[unique code]/Maps/Rate/    Samples File Suppose we have the follow client code and supplier code, you need create one file for each supplier you have * Client code: GUE\n Supplier Code: BVJ  Name: GUE_BVJ_hotel_map.csv\nCode Source, Code Destination 10,c11\\#10 10000,7604 10000,1274249  Plugin Name    Entity Map Plugin Name     Hotel HotelMapX   Board BoardMapX   Room RoomMapX   Rate RateMapX    Other Maps However, an alternative for room map is also shown below:\nDescription Room Map As a room map alternative, you can generate a room code from a room description. This plugin applies some rules over the description and generates a code. You need to load other files for this plugin.\nFiles We have two files for this plugin:\n Alias Table: it is used to replace some words from the description  Noise Words: it deletes some words from the description   Alias Table Format File The file must be in the below format:\n Encoding: UTF-8  File Name: roomDescriptionMapX_aliasTable.csv  Header Row: ToReplace, ReplaceWith, Order  Delimiter: Comma (“,”)  Directory: /F[folder code]_[unique code]/HotelX_[unique code]/Maps/plugin/  Sample File Name: roomDescriptionMapX_aliasTable.csv\nToReplace,ReplaceWith,Order 1 bed,apt,102 1 bedroom,apt,100 2 bedroom,2-bedroom,200 3 bed,3-bedroom,303 apartment,apt,902  Noise Words Format File The file must be in the below format:\n Encoding: UTF-8  File Name: roomDescriptionMapX_noiseWords.csv  Header Row: ToRemove  Directory: /F[folder code]_[unique code]/HotelX_[unique code]/Maps/plugin/  Sample File Name: roomDescriptionMapX_noiseWords.csv Data:\nToRemove ad b\u0026amp;b breakf  How applies When you execute the plugin the steps are:\n Get room description. Replace strings with roomDescriptionMapX_aliasTable.csv, the order to apply this replace depends on the order column. Sort the description words alphabetically. Remove words with roomDescriptionMapX_noiseWords.csv file.  Get your new code.   Execution example { \u0026quot;plugins\u0026quot;: { \u0026quot;step\u0026quot;: \u0026quot;RESPONSE_OPTION\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;ROOM_MAP\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;mapping_room_description\u0026quot; } ] } }  "
},
{
	"uri": "/travelgatex/reference/objects/",
	"title": "Objects",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/hotelx/quickstart/",
	"title": "Quickstart",
	"tags": [],
	"description": "HotelX Quickstart",
	"content": " This page shows you how to perform a basic hotel booking using GraphQL Playground.\nBefore Starting  Follow the steps in Creating an API Key to get your API Key.  Check the connectivity of your API Key.  Open the sample Playground and modify HTTP HEADERS field Authorization with your API Key and indicated your client into request settings.   { \u0026quot;settings\u0026quot;: { \u0026quot;client\u0026quot;: \u0026quot;yourClient\u0026quot; } }  Step by Step Search a Hotel  Open search  Modify Query Variables with valid dates and send the request. Example in the first and third tab.  You can replay the same search (the same dates, currency, language, market, nationality and occupancies) with the token generated per option, this token return a search only for the option’s hotel. Example in second one tab.   Quote a Hotel  Open quote  In Query Variables modify optionRefId with option id value returned in search response and send the request.  3.In this case you can modify the language, if you don\u0026rsquo;t indicate the language, it uses the same language that in search.   Book a Hotel  Open hotelBook  In Query Variables modify optionRefId with optionRefId value returned in quote response and send the request with the other mandatory information.   Cancel Booking  Open hotelCancel  In Query Variables modify the fields with your data.   Booking List  Open booking  You’re going to found three tabs, modify the fields with your data:  One of them search by booking reference.  Another tab with search by booking date.  And another with search by arrival date.   "
},
{
	"uri": "/travelgatex/resources/release-notes/",
	"title": "Realeases Notes",
	"tags": [],
	"description": "Release Notes and Changelog",
	"content": " Check out this list of new releases and changes applied on the TravelgateX GraphQL API.\n2018-05-03 ✅ Field asserts was added to object type StatsInfo\n✅ Field clients was added to object type GroupData\n✅ Field suppliers was added to object type GroupData\n✅ Field clients was added to object type GroupCommonData\n✅ Field suppliers was added to object type GroupCommonData\n✅ Field clients was added to object type OrganizationData\n✅ Field suppliers was added to object type OrganizationData\n✅ Input field serviceAPI was added to input object type SupplierFilter\n✅ Input field isActive was added to input object type SupplierFilter\n✅ Input field groupID was added to input object type SupplierFilter\n✅ Type StatsAssert was added\n2018-05-02 🛑 Enum value BOOK was removed from enum OperationType\n⚠️ Enum value BOOKING was added to enum OperationType\n✅ Input field accesses was added to input object type StatsFilterInput\n✅ Field accesses was added to object type GroupData\n✅ Field allMembers was added to object type GroupData\n✅ Field accesses was added to object type GroupCommonData\n✅ Field allMembers was added to object type GroupCommonData\n✅ Field accesses was added to object type OrganizationData\n✅ Field allMembers was added to object type OrganizationData\n2018-04-25 ⚠️ Field DestinationData.type changed type from DestinationType! to DestinationType\n⚠️ Field type was removed from object type OperationData\n⚠️ Field memberType was removed from object type MemberData\n⚠️ Argument Last: Int was removed from field AdminQuery.clients\n⚠️ Argument Last: Int was removed from field AdminQuery.suppliers\n⚠️ Argument Last: Int was removed from field AdminQuery.accesses\n✅ Enum value ORG was added to enum GroupType\n✅ Field types was added to object type OperationData\n✅ Argument type: OperationType added to field APIData.operations\n✅ Argument type: GroupType added to field APIData.groups\n✅ Argument type: GroupType added to field MemberData.groups\n✅ Field type was added to object type MemberData\n✅ Argument type: MemberType added to field GroupData.members\n✅ Argument type: MemberType added to field GroupCommonData.members\n✅ Argument type: MemberType added to field OrganizationData.members\n✅ Argument type: OperationType added to field AdminQuery.operations\n✅ Argument last: Int added to field AdminQuery.clients\n✅ Argument last: Int added to field AdminQuery.suppliers\n✅ Argument last: Int added to field AdminQuery.accesses\n2018-04-24 ⚠️ Input field groupUsers was removed from input object type StatsFilterInput\n✅ Input field StatsFilterInput.operation changed type from [ServiceOperationType!]! to [ServiceOperationType!]\n✅ Field OperationData.type description changed from `totype: [OperationType!]!`\n✅ Field error was added to object type ServiceApi\n✅ Input field name was added to input object type ClientFilter\n✅ Type OperationType was added\n2018-04-18 ⚠️ Type for argument input on field AdminMutation.updateClient changed from ClientInput! to UpdateClientInput!\n⚠️ Type for argument input on field AdminMutation.createClient changed from ClientInput! to CreateClientInput!\n⚠️ Field StatsData was removed from object type Stats\n⚠️ ClientInput was removed\n✅ Field statsData was added to object type Stats\n✅ Type MappeaXEditOrganizationInput was added\n✅ Type MappeaXAddOrganizationInput was added\n✅ Type UpdateClientInput was added\n✅ Type CreateClientInput was added\n2018-04-17 ⚠️ Field MemberData.roles changed type from String to RoleConnection\n✅ Field mappea was added to object type Mutation\n✅ Field operations was added to object type APIData\n✅ Field children was added to object type GroupData\n✅ Argument codes: [ID!] added to field MemberData.roles\n✅ Argument after: String added to field MemberData.roles\n✅ Argument before: String added to field MemberData.roles\n✅ Argument last: Int added to field MemberData.roles\n✅ Argument first: Int added to field MemberData.roles\n✅ Field children was added to object type GroupCommonData\n✅ Field children was added to object type OrganizationData\n✅ Field travelOperation was added to object type ServiceOperation\n✅ Field operations was added to object type AdminQuery\n✅ Input field HotelSettingsInput.client description changed from `This field is got only if the authorization header is of the type JWT. It is used for to change the user that\nhas been set by default in the preload.toThis field is got only if the authorization header is of the type JWT. It is used to change the user that has been set by default in the preload.`\n✅ Input field HotelSettingsInput.connectUser description changed from `This field is got only if the authorization header is of the type JWT. It is used for to change the user that\nhas been set by default in the preload.\n@deprecated(reason: \u0026ldquo;deprecated from 2018-03-19. Redundant.\u0026rdquo;)toThis field is got only if the authorization header is of the type JWT. It is used to change the user that has been set by default in the preload.\n@deprecated(reason: \u0026ldquo;deprecated from 2018-03-19. Redundant.\u0026rdquo;)`\n✅ Input field group was added to input object type HotelSettingsInput\n✅ Field mappea was added to object type Query\n✅ Field stats was added to object type Query\n✅ Type LegacyData was added\n✅ Type MappeaXMapSupplierInput was added\n✅ Type MappeaXUploadFileInput was added\n✅ Type SupplierDetected was added\n✅ Type UploadFileData was added\n✅ Type UploadFileResponse was added\n✅ Type MappeaXSupplierConfirmedInput was added\n✅ Type MappeaXConfirmUploadInput was added\n✅ Type OnlyStatusResponse was added\n✅ Type MappeaMutation was added\n✅ Type MappeaXGetMappeaStatsInput was added\n✅ Type GetMappeaStatsData was added\n✅ Type GetMappeaStatsResponse was added\n✅ Type File was added\n✅ Type GetUploadedFilesData was added\n✅ Type GetUploadedFilesResponse was added\n✅ Type MappeaQuery was added\n✅ Type ServiceApiType was added\n✅ Type StatsFilterInput was added\n✅ Type ServiceOperationType was added\n✅ Type StatsInfoTypes was added\n✅ Type StatsInfo was added\n✅ Type OperationDetailed was added\n✅ Type Ratios was added\n✅ Type StatsData was added\n✅ Type Stats was added\n✅ Type StatsEdge was added\n✅ Type StatsConnection was added\n✅ Type StatsQuery was added\n✅ Type OperationData was added\n✅ Type Operation was added\n✅ Type OperationEdge was added\n✅ Type OperationConnection was added\n2018-04-03 ⚠️ Input field accesses was removed from input object type ClientInput\n⚠️ Field accesses was removed from object type ClientData\n✅ Input field groupID was added to input object type ClientFilter\n✅ Field serviceApi was added to object type AdminQuery\n✅ Description for enum value BookStatusType.UNKNOWN changed from `The reservation was completed but due to a supplier error or a timeout, the reservation status is unknown.\nIt is the clientâ€™s responsibility to check if the booking is OKtoThe reservation was completed but due to a supplier error or a timeout, the reservation status is unknown.\nIt is the client’s responsibility to check if the booking is OK`\n✅ Description for enum value BookStatusType.ON_REQUEST changed from `The reservation was completed but the product is still not available, so the reservation goes into a waiting list.\nIt is the clientâ€™s responsibility to check if the booking is OKtoThe reservation was completed but the product is still not available, so the reservation goes into a waiting list.\nIt is the client’s responsibility to check if the booking is OK`\n✅ Description The information and credentials required to access the supplierâ€™s system. on type ConfigurationInput has changed to The information and credentials required to access the supplier’s system.\n✅ Description Data sent \u0026amp; received in the supplierâ€™s native format. on type AuditData has changed to Data sent \u0026amp; received in the supplier’s native format.\n✅ Field Response.auditData description changed from Data sent \u0026amp; received in the supplierâ€™s original format. to Data sent \u0026amp; received in the supplier’s original format.\n✅ Field AdviseMessage.type description changed from `TODO:\nError type: The following types are valid:\nXXX: asd asdÃ±oajskd lÃ±a ldtoTODO:\nError type: The following types are valid:\nXXX: asd asdñoajskd lña ld`\n✅ Type ServiceApiFilter was added\n✅ Type ServiceOperation was added\n✅ Type ServiceApi was added\n2018-03-20 ✅ Input field HotelSettingsInput.connectUser description changed from This field is got only if the authorization header is of the type JWT. It is used for to change the user that has been set by default in the preload. to This field is got only if the authorization header is of the type JWT. It is used for to change the user that has been set by default in the preload. @deprecated(reason: \u0026quot;deprecated from 2018-03-19. Redundant.\u0026quot;)\n✅ Input field client was added to input object type HotelSettingsInput\n2018-03-14 ✅ Deprecation reason on field AddOns.distribute has changed from `todeprecated from 2018-03-12. You can find it in distribution AddOn.`\n✅ Field distribution was added to object type AddOns\n✅ Type AddOn was added\n2018-03-08 ⚠️ Input field DestinationsCodes was removed from input object type HotelXDestinationListInput\n⚠️ Field boardData was removed from object type Destination\n⚠️ Input field ParameterInput.key changed type from ID! to String!\n⚠️ Field DestinationData.code changed type from String! to ID!\n⚠️ WebSearchResult was removed\n✅ Enum value NON_REFUNDABLE was added to enum RateRulesType\n✅ Enum value NORMAL was added to enum RateRulesType\n✅ Input field destinationCodes was added to input object type HotelXDestinationListInput\n✅ Field token was added to object type DestinationConnection\n✅ Field destinationData was added to object type Destination\n✅ Field destinationSearcher was added to object type HotelXQuery\n✅ Field destinations was added to object type HotelXQuery\n✅ Type HotelXDestinationSearcherInput was added\n✅ Type DestinationSearchResult was added\n2018-03-05 ⚠️ Input field AccessInput.parameters changed type from String to [ParameterInput]\n⚠️ Input field name was added to input object type AccessInput\n⚠️ Input field descriptiveInfoLimit was removed from input object type AccessInput\n⚠️ Input field serviceAPI was removed from input object type SupplierFilter\n⚠️ Input field isActive was removed from input object type SupplierFilter\n⚠️ Field updatedAt was removed from object type Parameter\n⚠️ Field createdAt was removed from object type Parameter\n⚠️ Field error was removed from object type Parameter\n⚠️ Field parameterData was removed from object type Parameter\n⚠️ Field code was removed from object type Parameter\n⚠️ Parameter object type no longer implements Node interface\n⚠️ Field SupplierData.accesses changed type from AccessConnection! to AccessConnection\n⚠️ Field legacy was removed from object type SupplierData\n⚠️ Argument after: String was removed from field AccessData.parameters\n⚠️ Argument before: String was removed from field AccessData.parameters\n⚠️ Argument Last: Int was removed from field AccessData.parameters\n⚠️ Argument first: Int was removed from field AccessData.parameters\n⚠️ Field AccessData.parameters changed type from ParameterConnection to [Parameter]\n⚠️ Field descriptiveInfoLimit was removed from object type AccessData\n⚠️ Input field ParameterInput.key changed type from String! to ID!\n⚠️ Input field filter was removed from input object type HotelXHotelListInput\n⚠️ Field Destination.code changed type from String! to ID!\n⚠️ Field texts was removed from object type Destination\n⚠️ Field available was removed from object type Destination\n⚠️ Field Location.closestDestination changed type from Destination! to DestinationData!\n⚠️ Field HotelConnection.token changed type from String! to String\n⚠️ SupplierInput was removed\n⚠️ ProviderInput was removed\n⚠️ LegacyDataInput was removed\n⚠️ ParameterData was removed\n⚠️ ParameterEdge was removed\n⚠️ ParameterConnection was removed\n⚠️ LegacyData was removed\n✅ Destination object implements Node interface\n✅ Input field isTest was added to input object type AccessInput\n✅ Field updateClient was added to object type AdminMutation\n✅ Field createClient was added to object type AdminMutation\n✅ Description `on typeParameterhas changed toParameters for additional information for the supplier\u0026rsquo;s configuration.`\n✅ Field value was added to object type Parameter\n✅ Field key was added to object type Parameter\n✅ Description TGX Platform API implementation on type Provider has changed to Temporary type to use only during SQL server's lifetime\n✅ Field SupplierData.accesses description changed from Accesses in a Supplier to Accesses where the supplier is referenced\n✅ Field SupplierData.supplierGroup description changed from SupplierGroup to SupplierGroup Internal Supplier grouping\n✅ Field isTest was added to object type AccessData\n✅ Field name was added to object type AccessData\n✅ Field clients was added to object type AdminQuery\n✅ Description Parameters for additional information for the supplier's configuration. on type ParameterInput has changed to Parameters Input.\n✅ Input field ParameterInput.value description changed from Contains the parameter values. to `Contains the parameter values.\nThis information is mandatory.`\n✅ Input field ParameterInput.key description changed from Contains the keyword/Id to identify a parameter. to `Contains the keyword/Id to identify a parameter.\nThis information is mandatory.`\n✅ Description Url's Input on type UrlsInput has changed to Urls Input\n✅ Input field destinationCodes was added to input object type HotelXHotelListInput\n✅ Description Information about destinantion on type Destination has changed to Destination Type\n✅ Field Destination.code description changed from Destination Code to Destination ID\n✅ Field updatedAt was added to object type Destination\n✅ Field createdAt was added to object type Destination\n✅ Field error was added to object type Destination\n✅ Field boardData was added to object type Destination\n✅ Type HotelXDestinationListInput was added\n✅ Type WebSearchResult was added\n✅ Type DestinationEdge was added\n✅ Type DestinationConnection was added\n✅ Type ClientInput was added\n✅ Type ClientFilter was added\n✅ Type ClientData was added\n✅ Type Client was added\n✅ Type ClientEdge was added\n✅ Type ClientConnection was added\n✅ Type DestinationType was added\n✅ Type DestinationData was added\n2018-02-21 ⚠️ Field updateHotel was removed from object type HotelXMutation\n⚠️ Input field SupplierFilter.serviceAPI changed type from Int to [Int]\n⚠️ Field avail was removed from object type Destination\n⚠️ Field name was removed from object type Destination\n⚠️ Field Contact.web changed type from URI! to URI\n⚠️ Field Location.zipCode changed type from String! to String\n⚠️ Field Location.city changed type from String! to String\n⚠️ Field Location.address changed type from String! to String\n⚠️ Field geocode was removed from object type Location\n⚠️ Field Amenity.code changed type from ID! to String!\n⚠️ Field updatedAt was removed from object type Amenity\n⚠️ Field createdAt was removed from object type Amenity\n⚠️ Field error was removed from object type Amenity\n⚠️ Field AmenityData was removed from object type Amenity\n⚠️ Amenity object type no longer implements Node interface\n⚠️ Field Media.code changed type from ID! to String\n⚠️ Field createdAt was removed from object type Media\n⚠️ Field error was removed from object type Media\n⚠️ Field mediaData was removed from object type Media\n⚠️ Media object type no longer implements Node interface\n⚠️ Field HotelData.rank changed type from Rank! to [Int!]!\n⚠️ Field HotelData.contact changed type from Contact! to Contact\n⚠️ Argument after: String was removed from field HotelData.amenities\n⚠️ Argument before: String was removed from field HotelData.amenities\n⚠️ Argument last: Int was removed from field HotelData.amenities\n⚠️ Argument first: Int was removed from field HotelData.amenities\n⚠️ Argument language: String was removed from field HotelData.amenities\n⚠️ Field HotelData.amenities changed type from AmenityConnection to [Amenity!]\n⚠️ Argument after: String was removed from field HotelData.medias\n⚠️ Argument before: String was removed from field HotelData.medias\n⚠️ Argument last: Int was removed from field HotelData.medias\n⚠️ Argument first: Int was removed from field HotelData.medias\n⚠️ Argument type: ApplicationArea was removed from field HotelData.medias\n⚠️ Field HotelData.medias changed type from MediaConnection to [Media!]\n⚠️ Field destination was removed from object type HotelData\n⚠️ Field generalDescription was removed from object type HotelData\n⚠️ Field additionalInformation was removed from object type HotelData\n⚠️ Field name was removed from object type HotelData\n⚠️ Type for argument relay on field HotelXQuery.hotels changed from RelayInput to RelayInput!\n⚠️ Argument criteria: HotelXHotelListInput! added to field HotelXQuery.hotels\n⚠️ Argument hotels: HotelXHotelQueryInput was removed from field HotelXQuery.hotels\n⚠️ StatusResponse was removed\n⚠️ HotelStatus was removed\n⚠️ GiataID was removed\n⚠️ HotelXHotelDataInput was removed\n⚠️ HotelXHotelMutationInput was removed\n⚠️ RankInput was removed\n⚠️ HotelXHotelQueryInput was removed\n⚠️ Rank was removed\n⚠️ Geocode was removed\n⚠️ Information was removed\n⚠️ AmenityData was removed\n⚠️ AmenityEdge was removed\n⚠️ AmenityConnection was removed\n⚠️ ApplicationArea was removed\n⚠️ MediaData was removed\n⚠️ MediaEdge was removed\n⚠️ MediaConnection was removed\n✅ Field accesses was added to object type SupplierData\n✅ Description Destination type on type Destination has changed to Information about destinantion\n✅ Field Destination.code changed type from String to String!\n✅ Field Destination.code description changed from Destination code. to Destination Code\n✅ Field texts was added to object type Destination\n✅ Field available was added to object type Destination\n✅ Description Contact type on type Contact has changed to Contact Data.\n✅ Field Contact.web description changed from Web. to Web\n✅ Field Contact.fax description changed from Fax. to Fax\n✅ Field Contact.telephone description changed from Telephone. to Telephone\n✅ Field Contact.email description changed from Email. to Email\n✅ Description Location on type Location has changed to Indicates the location of the hotel.\n✅ Field Location.country description changed from Country ISO Code to Country where is the Hotel.\n✅ Field Location.zipCode description changed from Zip Code to Contains the zipCode.\n✅ Field Location.city description changed from City to Contains the city\n✅ Field Location.address description changed from Street Address to Contains Hotel Address\n✅ Field closestDestination was added to object type Location\n✅ Field coordinates was added to object type Location\n✅ Description `on typeAmenityhas changed toSomething, such as a swimming pool or shopping centre, that is intended to make life more pleasant or comfortable for the people.`\n✅ Field Amenity.code description changed from `toCode`\n✅ Field texts was added to object type Amenity\n✅ Field type was added to object type Amenity\n✅ Description `on typeMediahas changed toContains media information.`\n✅ Field Media.updatedAt description changed from Update date to Update date.\n✅ Field Media.code description changed from `toCode.`\n✅ Field texts was added to object type Media\n✅ Field url was added to object type Media\n✅ Field type was added to object type Media\n✅ Field order was added to object type Media\n✅ Field HotelData.rank description changed from `toRank indicates the supplier categorization.`\n✅ Field HotelData.contact description changed from Contact information. to Contact cotains information about hotel contact.\n✅ Field HotelData.location description changed from `toIndicates the location of the hotel.`\n✅ Field HotelData.amenities description changed from `toAmenities`\n✅ Field HotelData.medias description changed from `toMedias`\n✅ Field HotelData.hotelCode description changed from Code of the hotel in the Supplier selected. to Code to perform availability.\n✅ Field HotelData.code description changed from Internal code to perform availability to Internal code.\n✅ Field descriptions was added to object type HotelData\n✅ Field cardTypes was added to object type HotelData\n✅ Field chainCode was added to object type HotelData\n✅ Field property was added to object type HotelData\n✅ Field hotelName was added to object type HotelData\n✅ Field hotelCodeSupplier was added to object type HotelData\n✅ Description Hotel type on type Hotel has changed to Hotel Type\n✅ Field token was added to object type HotelConnection\n✅ Argument token: String added to field HotelXQuery.hotels\n✅ Field rooms was added to object type HotelXQuery\n✅ Field categories was added to object type HotelXQuery\n✅ Field boards was added to object type HotelXQuery\n✅ Type HotelXRoomQueryInput was added\n✅ Type RoomData was added\n✅ Type RoomStatic was added\n✅ Type RoomEdge was added\n✅ Type RoomConnection was added\n✅ Type HotelXHotelListInput was added\n✅ Type DescriptionType was added\n✅ Type Description was added\n✅ Type ApplicationAreaType was added\n✅ Type Coordinates was added\n✅ Type Property was added\n✅ Type HotelXCategoryQueryInput was added\n✅ Type CategoryData was added\n✅ Type Category was added\n✅ Type CategoryEdge was added\n✅ Type CategoryConnection was added\n✅ Type HotelXBoardQueryInput was added\n✅ Type Text was added\n✅ Type BoardData was added\n✅ Type Board was added\n✅ Type BoardEdge was added\n✅ Type BoardConnection was added\n2018-01-30 ⚠️ Input field hotelCode was added to input object type HotelXHotelDataInput\n⚠️ Input field supplierCode was removed from input object type HotelXHotelDataInput\n⚠️ Field rsAccess was removed from object type StatAccess\n⚠️ Field rqAccess was removed from object type StatAccess\n⚠️ Field dockerID was removed from object type StatAccess\n⚠️ Field dockerID was removed from object type StatPlugin\n⚠️ Field rsPlugin was removed from object type StatsRequest\n⚠️ Field rqPlugin was removed from object type StatsRequest\n⚠️ Field rs was removed from object type StatsRequest\n⚠️ Field rq was removed from object type StatsRequest\n⚠️ Field config was removed from object type StatsRequest\n⚠️ Field supplierCode was removed from object type HotelData\n✅ Description for enum value BookStatusType.UNKNOWN changed from The status of the booking is unknown to `The reservation was completed but due to a supplier error or a timeout, the reservation status is unknown.\nIt is the client\u0026rsquo;s responsibility to check if the booking is OK`\n✅ Description for enum value BookStatusType.ON_REQUEST changed from The status of the booking is on request to `The reservation was completed but the product is still not available, so the reservation goes into a waiting list.\nIt is the client\u0026rsquo;s responsibility to check if the booking is OK`\n✅ Description for enum value BookStatusType.OK changed from The status of the booking is available to The reservation was completed with no problems\n✅ Field StatTransaction.parseResponse description changed from `toParse response time`\n✅ Field StatTransaction.workerCommunication description changed from `toWorker connection time`\n✅ Field StatTransaction.buildRequest description changed from `toBuild request time`\n✅ Field StatTransaction.total description changed from `toTotal transaction time`\n✅ Field StatTransaction.reference description changed from `toExtra information about transaction.`\n✅ Field StatAccess.plugins description changed from `toPlugin execution time`\n✅ Field StatAccess.transactions description changed from `toDetail transaction time`\n✅ Field StatAccess.cities description changed from `toNumber of cities`\n✅ Field StatAccess.zones description changed from `toNumber of zones`\n✅ Field StatAccess.hotels description changed from `toNumber of hotels`\n✅ Field StatAccess.staticConfiguration description changed from `toStatic configuration time`\n✅ Field StatAccess.total description changed from `toTotal access time`\n✅ Field StatAccess.name description changed from `toAccess name`\n✅ Field responseAccess was added to object type StatAccess\n✅ Field requestAccess was added to object type StatAccess\n✅ Field StatPlugin.total description changed from `tototal plugin time`\n✅ Field StatPlugin.name description changed from `toPlugin name`\n✅ Field StatsRequest.Accesses description changed from `toDetail access time`\n✅ Field StatsRequest.dockerID description changed from `toDocker Id`\n✅ Field StatsRequest.cities description changed from `toNumber of cities`\n✅ Field StatsRequest.zones description changed from `toNumber of zones`\n✅ Field StatsRequest.hotels description changed from `toNumber of hotels`\n✅ Field StatsRequest.process description changed from `toProcess time. Contains communication time, parse time and plugin time.`\n✅ Field StatsRequest.validation description changed from `toRequest validation time`\n✅ Field StatsRequest.total description changed from `toTotal transaction time`\n✅ Field responsePlugin was added to object type StatsRequest\n✅ Field requestPlugin was added to object type StatsRequest\n✅ Field response was added to object type StatsRequest\n✅ Field request was added to object type StatsRequest\n✅ Field configuration was added to object type StatsRequest\n✅ Field hotelCode was added to object type HotelData\n2018-01-29 ⚠️ Field HotelCancelPayload.stats changed type from RequestStats to StatsRequest\n⚠️ Field HotelBookPayload.stats changed type from RequestStats to StatsRequest\n⚠️ Input field supplierCode was added to input object type HotelXHotelDataInput\n⚠️ Input field code was removed from input object type HotelXHotelDataInput\n⚠️ Type for argument relay on field HotelXMutation.updateHotel changed from HotelXRelayInput to RelayInput\n⚠️ Field HotelBooking.stats changed type from RequestStats to StatsRequest\n⚠️ Field HotelQuote.stats changed type from RequestStats to StatsRequest\n⚠️ Field external was removed from object type StatAccess\n⚠️ Field Response.stats changed type from RequestStats to StatsRequest\n⚠️ Field HotelSearch.stats changed type from RequestStats to StatsRequest\n⚠️ Input field codes was removed from input object type HotelXHotelQueryInput\n⚠️ Type for argument language on field HotelData.generalDescription changed from Language to String\n⚠️ Type for argument language on field HotelData.additionalInformation changed from Language to String\n⚠️ Type for argument language on field HotelData.amenities changed from Language to String\n⚠️ Type for argument relay on field HotelXQuery.hotels changed from HotelXRelayInput to RelayInput\n⚠️ RequestStats was removed\n⚠️ HotelXRelayInput was removed\n✅ Input field supplierGroup was added to input object type SupplierInput\n✅ Input field serviceAPI was added to input object type SupplierFilter\n✅ Input field isActive was added to input object type SupplierFilter\n✅ Field supplierGroup was added to object type SupplierData\n✅ Description Url's on type UrlsInput has changed to Url's Input\n✅ Field plugins was added to object type StatAccess\n✅ Field rsAccess was added to object type StatAccess\n✅ Field rqAccess was added to object type StatAccess\n✅ Field dockerID was added to object type StatAccess\n✅ Field cities was added to object type StatAccess\n✅ Field zones was added to object type StatAccess\n✅ Field hotels was added to object type StatAccess\n✅ Input field supplierCodes was added to input object type HotelXHotelQueryInput\n✅ Field HotelData.code description changed from Internal code to perform availability and/or supplier code. to Internal code to perform availability\n✅ Field supplierCode was added to object type HotelData\n✅ Type StatPlugin was added\n✅ Type StatsRequest was added\n✅ Type RelayInput was added\n2018-01-17 ⚠️ Field AccessEdge.node changed type from Supplier to Access\n⚠️ Field value was removed from object type Parameter\n⚠️ Field key was removed from object type Parameter\n⚠️ Field supplierGroups was removed from object type SupplierData\n⚠️ Field hotelCodes was removed from object type SupplierData\n⚠️ Field dll was removed from object type SupplierData\n⚠️ Field Supplier.supplierData changed type from SupplierData! to SupplierData\n⚠️ Field AccessData.parameters changed type from [Parameter!] to ParameterConnection\n⚠️ Field AccessData.urls changed type from Urls! to Urls\n⚠️ Field AccessData.supplier changed type from String! to Supplier!\n⚠️ Field AccessData.code changed type from String! to ID!\n⚠️ Field id was removed from object type AccessData\n⚠️ Field suppliers was removed from object type AccessData\n⚠️ Field Access.accessData changed type from AccessData! to AccessData\n✅ Parameter object implements Node interface\n✅ Description Parameters for additional information for the supplier's configuration. on type Parameter has changed to ``\n✅ Field updatedAt was added to object type Parameter\n✅ Field createdAt was added to object type Parameter\n✅ Field error was added to object type Parameter\n✅ Field parameterData was added to object type Parameter\n✅ Field code was added to object type Parameter\n✅ Field legacy was added to object type SupplierData\n✅ Field serviceApi was added to object type SupplierData\n✅ Field context was added to object type SupplierData\n✅ Field provider was added to object type SupplierData\n✅ Field name was added to object type SupplierData\n✅ Argument after: String added to field AccessData.parameters\n✅ Argument before: String added to field AccessData.parameters\n✅ Argument Last: Int added to field AccessData.parameters\n✅ Argument first: Int added to field AccessData.parameters\n✅ Field AccessData.code description changed from Access code. to Unique AccessConfiguration identifier\n✅ Field shared was added to object type AccessData\n✅ Field rateRules was added to object type AccessData\n✅ Field descriptiveInfoLimit was added to object type AccessData\n✅ Field deleteSupplierFromGroup was added to object type AdminMutation\n✅ Field grantSupplierToGroup was added to object type AdminMutation\n✅ Field deleteAccessFromGroup was added to object type AdminMutation\n✅ Field grantAccessToGroup was added to object type AdminMutation\n✅ Field updateAccess was added to object type AdminMutation\n✅ Field createAccess was added to object type AdminMutation\n✅ Input field RankInput.rank4 changed type from Boolean! to Boolean\n✅ Input field RankInput.rank3 changed type from Boolean! to Boolean\n✅ Input field RankInput.rank2 changed type from Boolean! to Boolean\n✅ Input field RankInput.rank1 changed type from Boolean! to Boolean\n✅ Field suppliers was added to object type AdminQuery\n✅ Field accesses was added to object type AdminQuery\n✅ Field CancelPolicy.refundable description changed from Indicates if the option is refundable or not. This information is mandatory. to Indicates if the option is refundable or not.\n✅ Input field ranks was added to input object type HotelXHotelQueryInput\n✅ Type SupplierInput was added\n✅ Type ProviderInput was added\n✅ Type LegacyDataInput was added\n✅ Type Context was added\n✅ Type GroupInput was added\n✅ Type AccessInput was added\n✅ Type SupplierFilter was added\n✅ Type SupplierEdge was added\n✅ Type SupplierConnection was added\n✅ Type AccessFilter was added\n✅ Type ParameterData was added\n✅ Type ParameterEdge was added\n✅ Type ParameterConnection was added\n✅ Type LegacyData was added\n✅ Type Provider was added\n2018-01-11 ⚠️ Field codes was removed from object type Map\n⚠️ Field supplierCode was removed from object type Map\n⚠️ Field maps was removed from object type MappingEntity\n⚠️ Argument BoardCodes: [String!] was removed from field MappingContext.boards\n⚠️ Argument roomCodes: [String!] was removed from field MappingContext.rooms\n⚠️ Argument hotelCodes: [String!] was removed from field MappingContext.hotels\n⚠️ Field rates was removed from object type MappingContext\n⚠️ Field contextCode was removed from object type MappingContext\n⚠️ Argument supplierCodes: [String!] was removed from field Mapping.contexts\n⚠️ Argument contextCodes: [String!] was removed from field Mapping.contexts\n⚠️ Field DefaultSettings.market changed type from String! to String\n⚠️ Field DefaultSettings.connectUser changed type from String! to String\n⚠️ Input field HotelSettingsInput.suppliers changed type from [SupplierInput!] to [HotelXSupplierInput!]\n⚠️ Field HotelSearch.requestCriteria changed type from CriteriaSearch! to CriteriaSearch\n⚠️ Field HotelSearch.context changed type from String! to String\n⚠️ Field Geocode.longitude changed type from String! to Float!\n⚠️ Field Geocode.latitude changed type from String! to Float!\n⚠️ Argument after: String was removed from field HotelXQuery.hotels\n⚠️ Argument before: String was removed from field HotelXQuery.hotels\n⚠️ Argument last: Int was removed from field HotelXQuery.hotels\n⚠️ Argument first: Int was removed from field HotelXQuery.hotels\n⚠️ Argument language: String was removed from field HotelXQuery.hotels\n⚠️ Argument codes: [String!] was removed from field HotelXQuery.hotels\n⚠️ HotelInput was removed\n⚠️ AccessInput was removed\n⚠️ SupplierInput was removed\n✅ Field loadFile was added to object type HotelXMutation\n✅ Field updateHotel was added to object type HotelXMutation\n✅ Field maps was added to object type Map\n✅ Field code was added to object type Map\n✅ Field contexts was added to object type MappingEntity\n✅ Argument codes: [String!] added to field MappingContext.boards\n✅ Field MappingContext.boards description changed from Mapping of boards. Filter by board code. to Mapping of boards, you can filter by board code.\n✅ Argument codes: [String!] added to field MappingContext.rooms ✅ Field MappingContext.rooms description changed from Mapping of rooms. Filter by room code. to Mapping of rooms, you can filter by room code.\n✅ Argument codes: [String!] added to field MappingContext.hotels ✅ Field MappingContext.hotels description changed from Mapping of hotels. Filter by hotel code. to Mapping of hotels, you can filter by hotel code.\n✅ Field code was added to object type MappingContext\n✅ Argument codes: [String!] added to field Mapping.contexts\n✅ Field warnings was added to object type Mapping\n✅ Field errors was added to object type Mapping\n✅ Argument type: GroupType added to field AdminQuery.groups\n✅ Argument type: MemberType added to field AdminQuery.members\n✅ Field rank was added to object type HotelData\n✅ Argument relay: HotelXRelayInput added to field HotelXQuery.hotels\n✅ Argument hotels: HotelXHotelQueryInput added to field HotelXQuery.hotels\n✅ Field mapping was added to object type HotelXQuery\n✅ Type StatusResponse was added\n✅ Type HotelStatus was added\n✅ Type RankInput was added\n✅ Type HotelXHotelDataInput was added\n✅ Type HotelXHotelMutationInput was added\n✅ Type HotelXAccessInput was added\n✅ Type HotelXSupplierInput was added\n✅ Type HotelXRelayInput was added\n✅ Type HotelXHotelQueryInput was added\n✅ Type Rank was added\n"
},
{
	"uri": "/travelgatex/reference/",
	"title": "Reference",
	"tags": [],
	"description": "Reference Documentation",
	"content": ""
},
{
	"uri": "/admin/resources/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/hotelx/resources/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": "This page documents production updates to HotelX. We recommend that HotelX developers periodically check this list for any new announcements.\n"
},
{
	"uri": "/admin/resources/roadmap/",
	"title": "Roadmap",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/hotelx/resources/roadmap/",
	"title": "Roadmap",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/travelgatex/resources/roadmap/",
	"title": "Roadmap",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/travelgatex/security/",
	"title": "Security",
	"tags": [],
	"description": "Authorization &amp; Authentication",
	"content": "\rOverview\rLearn Platform Security\n\r\r\r\r"
},
{
	"uri": "/travelgatex/",
	"title": "TravelgateX",
	"tags": [],
	"description": "TravelgateX - The Ultimate Platform For The Travel Trade",
	"content": "The TravelgateX platform lets you build lightening fast applications and websites that connect to a wide range of travel suppliers in realtime. Integrations to new suppliers take less than 2 days to connect, rather than 2 weeks. Once the integration is in place, response times for showing hotel bookings is in the milliseconds, regardless of the size of the hotel booking database.\n\t\rOverview\rTravelgateX Platform Information\n\r\r\r\t\rReference\rReference Documentation\n\r\r\r\t\rSecurity\rAuthorization \u0026amp; Authentication\n\r\r\r\t\rData Automation\rAutomate bulk data operations\n\r\r\r\t\rTutorials\rWalkthrouhgs of common applications\n\r\r\r\t\rResources\rNew Updates \u0026amp; Releases\n\r\r\r\r"
},
{
	"uri": "/hotelx/plugins/aggregation/",
	"title": "Aggregation",
	"tags": [],
	"description": "Aggregation plugins",
	"content": " Aggregation plugins extends HotelX allowing filtering Supplier options and responses using different business rules.\nKeyFilter Filters Supplier options based on field keys applying a selector function over field values.\nIt\u0026rsquo;s based on SQL Aggregate Functions but filtering, not aggregating.\n Field Keys as a combination of:\n SupplierCode  HotelCode BoardCode RoomCode Refundable Market PaymentType Promotion Supplement Surcharges Rate rules   Functions:\n Min Max  Field Values:\n PriceNet PriceGross   Parameters    key value type condition description     primaryKey string mandatory is the criteria used to aggregate, the value is a set of criteria separated by commas, the possible values are:\nexample: “hotel,supplier,room”   function string optional possible values: “min” and “max”, min is the default value.\nThe chosen option will be the cheapest when min function, and the expensivest when max function   priceField string optional possible values: “net” or “gross”, net is the default value.\nThe function will operate over the field determined by this parameter   currency string optional exchanges a price’s currency before applicating the filter. In order to make use of this functionality, the same setup in the CurrencyX plugin is needed.   size int optional number of options in each aggregation group, the default value is 1    Processor (Pre Step and Post Step) Processor plugins extends HotelX allowing multiple operation types. It can modify request and response messages, allowing a full range of operations:\n Split arrays Join arrays  Modify object values  Add or remove object instances   "
},
{
	"uri": "/learning-graphql/basic_concepts/",
	"title": "Basic Concepts",
	"tags": [],
	"description": "",
	"content": " What are Queries \u0026amp; Mutations  At its simplest, GraphQL is about requesting specific fields on objects. Let\u0026rsquo;s start by looking at a very simple query and the result we get when we run it http://graphql.org/learn/queries/?utm_source=docs.travelgatex.com\n There are two basic operations in GraphQL schemas: * Queries: Requesting data from a data model * Mutations: Making changes and carrying out transactions on data in the data model\nQueries Just like a RESTful GET method, queries query the system. This operation reads values from the server using a Graph Object and returns JSON text as a response.\nUnlike a RESTful service, queries are interactive. They allow the user to choose exactly what data you want to get returned. This way, if the API owner makes a change to the API, the client will not be affected as long as the query does not change. Think of it like a good old SQL query. As long as you send the same one, the result is always predictable. This makes versioning totally unnecessary in GraphQL APIs. There\u0026rsquo;s no need to specify which version you want to consume, beacuse you are in charge of deciding which fields you want to retrieve.\nAs a bonus, the GraphQL specification includes handling of deprecated fields and marks a field as is-deprecated by adding a deprecationReason to the field.\nQuery example\nEJEMPLO PEQUE DE DISPO TODO: Falta ejemplo!!\rMutations Mutations are methods that change the data on the server. That is, mutations make a physical change to the data. This can include inserting a new object in a database, or deleting, or updating a data record. Mutations are like the POST, PUT and DELETE methods in a REST API or INSERT, UPDATE and DELETE in SQL.\nMutation example:\n"
},
{
	"uri": "/hotelx/concepts/search-mode/",
	"title": "Booking Flow",
	"tags": [],
	"description": "Learn about Transactional Booking flow. Search, Quote and Confirm Reservation",
	"content": ""
},
{
	"uri": "/admin/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "Understand TravelgateX basic concepts",
	"content": "\rSecurity Model\r\r\r\rCommon Resources\r\r\r\r\r"
},
{
	"uri": "/getting-started/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "Basic concepts for all of the TravelgateX platform",
	"content": " The TravelgateX platform and APIs all use a consistent set of basic concepts so that whatever API you use on our platform, you can be confident that it will work with the same definitions as all of the others you are familiar with.\nHere is an overview of the key concepts of our platform.\nAPI Gateway Our API gateway is stable, secure, fault tolerant and load balanced between many datacenters from four different cloud providers: Microsoft Azure, Google Cloud Platform, Hetzner and TotalUptime. We provide realtime details of our uptime and status on our Status page and work at maintaining a minimum 99.99% service performance level.\nOur API gateway provides a single GraphQL endpoint which can be used to make queries against all of our APIs and travel services. This makes it easier for your clients (websites, applications and any other interface) to only call for the exact data that is needed, without parsing a heap of extra information in each API call. (Check out our GraphQL resources to learn more!)\nProduct A Product is a TravelgateX platform API which is available for the consumption of Resources. We organize our APIs by similarity and common features. Our HotelX API is our first product now available for use in production environments.\nEntities Entities or core resources define common objects that are consistent across all of our API products.\nPartner A Partner interacts with the TravelgateX API platform. A partners can be a User (that is, a person) or a Service Account (that is, an application). A partner is a member of an Organization, and can be a member of mutiple organizations.\nOrganization An Organization is made up of Partners, Resources, Settings, Permissions and other Metadata.\nProfile An Organization uses profiles to determine what type of interaction is required on TravelgateX. At present, profiles are either a Buyer or a Supplier.\nBuyer A Buyer Profile uses the TravelgateX platform to book travel services such as hotels for their customers. Buyers include online travel agents, tour operators, niche travel service providers, and travel and pricing apps.\nSupplier A Supplier Profile uses the TravelgateX platfrom to make travel services available to buyers. Sellers can be suppliers with realtime databases of hotel room vacancies, tours, car rental providers, adventure and activity service suppliers, travel insurance providers or other travel industry service suppliers.\nContext A Context refers to the Supplier codes the request is using. It\u0026rsquo;s a way of specifiying which Supplier codes are being used so they can be transformed and standardized.\nAccess An Access is a set of credentials and the authentication configuration that enables a Buyer to access a Supplier. To gain access, a Buyer needs to confirm with TravelgateX that they have an agreement in place with each Supplier with whom they want to integrate.\n"
},
{
	"uri": "/hotelx/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "Understand TravelgateX basic concepts",
	"content": "\rAccess, Supplier and Context\rLearn about Core Entities used in TravelgateX\n\r\r\rBooking Flow\rLearn about Transactional Booking flow. Search, Quote and Confirm Reservation\n\r\r\rBooking Flow:\rLearn about Transactional Booking flow. Search, Quote and Confirm Reservation\r\r\rSearch Single Mode \u0026amp; Multi Mode:\rLearn about Transactional Booking flow. Search, Quote and Confirm Reservation\r\r\r\r\r\rManagement Flow\rLearn about Management Flow. Cancellations and Booking List\n\r\r\rHotel Content\rLearn about how manage content data to manage in your site. Hotel, Boards, Categories...\n\r\r\r\r"
},
{
	"uri": "/admin/resources/frequently-asked-questions/",
	"title": "Frequendly Asked Questions",
	"tags": [],
	"description": "Common questions regarding HotelX",
	"content": ""
},
{
	"uri": "/hotelx/resources/frequently-asked-questions/",
	"title": "Frequendly Asked Questions",
	"tags": [],
	"description": "Common questions regarding HotelX",
	"content": " Search Which Apikey do I have to use?  I already have the TGX Welcome Pack: Then you should use the Api Key facilitated. I did not receive TGX Welcome Pack: Then you should use our dummy Api Key facilitated on our sample Playground.  Do I have access to all the hotels in the test environment? No, we use a test supplier, so there is a limited number of hotels in the data base to be used.\nWhich are the languages allowed in the new aggregator? The new aggregator allows each language, it will depend from each supplier.\nHow many hotels code are allowed to request at the same time? We recommend a maximum of 200 hotels, the new aggregator will split to each supplier the maximum hotels allowed in different batches in order to request to the supplier all the hotels. Please take note: The current formula and rate limit are subject to change.\nWhich are the possible filters in the Search Request? Right now the only option is by hotel code. In the future will be possible to request by Destination or by Geocode.\nThe main search methods will be: - Hotel code - Destination (Coming soon) - Geocode (Coming soon)\nIt is possible to use GIATA codes? Yes, It is possible request availability using GIATA codes, first of all you need to provide us your GIATA credentials in order to set up your Apikey. After that you will be able to request using GIATA codes, receive the availability response with GIATA codes, etc…\nHow can I get the names of the countries? The response of the hotelX query contains location.country in ISO standard format.\nCan I get Daily-prices in Search Response? It will depend if the supplier offer the information. In case that the information is returned by the supplier, you will find it through Roomprice string\u0026ndash;\u0026gt;PriceBreakdown.\nWhat happen if I request availability with a currency that the supplier doesn´t have it? For these cases you will have two options: - Apply the exchange rates using a pluggin (this pluggin contains the exchange rates previously loaded by you) - Don´t apply any exchange rate and you will receive the supplier´s currency.\nHow is the response time of the different providers managed in the aggregator mode? HotelX will return information from all the suppliers at the same time, once all the responses have been obtained by them. The requests that have timed out, will be signaled by a warning in the response.\nIn aggregator mode is it possible to set a time out for each provider? No, the time out will be applied to all providers, using the parameter setting: timeout\n"
},
{
	"uri": "/travelgatex/resources/frequently-asked-questions/",
	"title": "Frequendly Asked Questions",
	"tags": [],
	"description": "Common questions",
	"content": "Do you have specific questions about TravelgateX GraphQL API? Check out the FAQs.\n"
},
{
	"uri": "/hotelx/plugins/markup/",
	"title": "Markup",
	"tags": [],
	"description": "Markup plugins",
	"content": " Markups type plugins permits to apply markup percentages over a price, markup is a field in price composed of a set of rules and a new price with an added percentage, the percentage is the sum of every rule applied.\nAlthough this plugin can be customized, we already offer an implementation.\nMarkupX This markup implementation is supported by our web application which permits the management of an organization\u0026rsquo;s rules, the modification of these rules are applied in your product at real time.\nIn this plugin, a rule is a set of criteria with an associated percentage, an option will apply a rule when it matches every rule’s criteria.\nThe available criteria of a rule are:\n supplier  hotel, city or zone  board  market  price range  cancellation Policies (refundable or not refundable)  rate (b2b or b2c)  check in date  booking date  channel   Additionally, a rule has an ‘override’ flag that permits it to be the only rule applied (ignoring the rest) when set to true. We only let a rule to be overriding when it contains at least the criterion: hotel, city or zone. If multiple override rules are valid for an option, the rule with the heavier weight is applied. The hotel criterion is heavier than city, and city is heavier than zone.\nParameters    key value type condition description     channel string optional channel is a rule criterion   applyNegativeCom bool optional if not set or set to false, if the sum of rules percentages is negative the percentage won’t apply   rules json optional an array of rules in json is expected, if found, those rules will apply to each option, doesn’t matter if an option matches the criteria, it will have the rules applied    Files Format In order to manage city and zone criteria, a previous batch load must be done to make a relation with hotel codes.\nTwo file are needed:\nFrom hotel code to his minimum city code:  Encoding: UTF-8  File Name: [Context Source]_Porfolio.csv  Header Row: HotelCode, CityCode Delimiter: Comma (“,”)  Directory: /F[folder code]_[unique code]/HotelX_[unique code]/Markup  Destination trees:  Encoding: UTF-8  File Name: [Context Source]_DestinationsTree.csv  Header Row: DestinationCode, ParentCode, ISOCountryCode  Delimiter: Comma (“,”)  Directory: /F[folder code]_[unique code]/HotelX_[unique code]/Markup   Execution example { \u0026quot;plugins\u0026quot;: { \u0026quot;step\u0026quot;: \u0026quot;RESPONSE\\_OPTION\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;MARKUP\u0026quot; \u0026quot;name\u0026quot;: \u0026quot;markupX\u0026quot;, \u0026quot;parameters\u0026quot;: [ { \u0026quot;key\u0026quot;: \u0026quot;channel\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;1000\u0026quot; }, { \u0026quot;key\u0026quot;: \u0026quot;applyNegativeCom\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;true\u0026quot; } ] } ] } }  "
},
{
	"uri": "/getting-started/playground/",
	"title": "Playground",
	"tags": [],
	"description": "Try our API now",
	"content": " Try it For Yourself API Playground is an interactive, fun, and super quick way to get to know our APIs.\nIn the API Playground, as you start to type the query, it will autocomplete with the fields available to complete your query parameters. You can also click on the green Schema button on the right of the Playground window to learn more about our data model and to see all of the options available for building your query.\nYou can set Query variables in the bottom left pane of the Playground. This lets you customize the response you will receive so that only the fields you need are returned in the response.\n(insert a GIF like the one in the launchpad blog post)\nYour First Query Try to make a query now for searching for hotels available:\nquery (hotels in Mallorca)  Click on the big play button in the middle of the playground to see the response.\nYou should get the following:\n(put in query response)  More Queries Now try these query examples:\n1. Add query variables to search for a particular date range - explain/show\n2. Search for hotels in Mallorca with a swimming pool - explain/show\nOnce you are comfortable with making queries in the API Playground, you can use the same query structure in your applications. Check out the pages Learning GraphQL to learn more about including queries in the code of your client applications.\nFurther Reading  https://dev-blog.apollodata.com/4-simple-ways-to-call-a-graphql-api-a6807bcdb355 https://medium.com/graphql-mastery/graphql-quick-tip-how-to-pass-variables-into-a-mutation-in-graphiql-23ecff4add57  "
},
{
	"uri": "/travelgatex/reference/scalars/",
	"title": "Scalars",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/hotelx/concepts/search-mode/search-single-mode/",
	"title": "Search Single Mode &amp; Multi Mode",
	"tags": [],
	"description": "Learn about Transactional Booking flow. Search, Quote and Confirm Reservation",
	"content": " On this page you will learn about Transactional Booking Flow to Search, quote and confirm a reservation. You will also see the difference between the Search Single Mode VS Search Multi Mode.\nSearch Single Mode This mode is used when the client only wants to get options from a single access, for this, the client must indicate in the request the code of the access that them want to use. In the request have to use the access filter, you can find a sample here:\n{ \u0026quot;filter\u0026quot;: { \u0026quot;access\u0026quot;: { \u0026quot;includes\u0026quot;: [\u0026quot;yourAccess\u0026quot;] } } }                                                                   \nSearch Multi Mode If you don’t have any filter in the request and you have permissions for multimode, the search is multimode. By default, the request is for all the accesses that you have configured in the product, if you want to apply some filter, you have to use the filter and to indicate the rules that you want. Is important to know that you only can use includes or excludes in the same request, but never both in the same request.\n                                                                        \nIncludes Sample { \u0026quot;filter\u0026quot;: { \u0026quot;access\u0026quot;: { \u0026quot;includes\u0026quot;: [\u0026quot;yourAccess\u0026quot;,\u0026quot;yourAccess2\u0026quot;] } } }  Excludes Sample { \u0026quot;filter\u0026quot;: { \u0026quot;access\u0026quot;: { \u0026quot;excludes\u0026quot;: [\u0026quot;yourAccess\u0026quot;] } } }  "
},
{
	"uri": "/hotelx/plugins/converter/",
	"title": "Currency Converter",
	"tags": [],
	"description": "Converter plugins",
	"content": " Currency converter is an optional plugin and permits to apply currency conversion over all the prices in one Option.\nCurrencyX This plugin receives an Option and a currency and returns the same option with currency conversion applied over all the prices. It reads the information about rates from a file allocated in our ftp. Is mandatory that this file exists in the ftp and satisfy all the requirements below. In other cases, an error will be returned.\nFile Format The file should be in the below format:\n Encoding: UTF-8  File Name: currency_map.csv  Header Row: Code, Rate  Decimal separator for rate must be point (\u0026ldquo;.\u0026rdquo;)  Delimiter: Comma (“,”)  Directory: /[folder code]_[unique code]/HotelX_[unique code]/  Sample File Name: currency_map.csv\nData:\nCode,Rate AED,4.74 CAD,1.61 CHF,1.26 EUR,1.09 GBP,1.00 INR,84.40 MAD,12.17 THB,42.91 USD,1.29  The rate with value 1.00 is the base rate. Other rates are calculated from it.\nThe value of step, type, and name is always the specified in the example below. The two parameters are mandatory and its value means:\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026ldquo;currency\u0026rdquo;: is a string value in ISO 4217 standard (\u0026ldquo;XXX\u0026rdquo;). Is the currency to which you want to convert.\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026ldquo;exclude\u0026rdquo;: is a Boolean value (true / false). This parameter only has an effect on the search query. It determine, if the options on which the currency change can not be applied (no currency found in ftp), are excluded. In addition, is necessary that option and parameter currencies are in ftp file.\nExecution example { \u0026quot;plugins\u0026quot;: { \u0026quot;step\u0026quot;: \u0026quot;RESPONSE_OPTION\u0026quot;, \u0026quot;pluginsType\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;CURRENCY_CONVERSION\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;currency_exchange\u0026quot;, \u0026quot;parameters\u0026quot;: [ { \u0026quot;key\u0026quot;: \u0026quot;currency\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;GBP\u0026quot; }, { \u0026quot;key\u0026quot;: \u0026quot;exclude\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;true\u0026quot; } ] } } }  "
},
{
	"uri": "/travelgatex/data-automation/",
	"title": "Data Automation",
	"tags": [],
	"description": "Automate bulk data operations",
	"content": " Bulk Data Automation Many of TravelgateX\u0026rsquo;s products use client\u0026rsquo;s data in order to perform tasks. You can upload these data to our platform either by uploading it via SFTP or via a mutation. It\u0026rsquo;s up to you to decide how to get the data to our servers.\nOur APIs have been built from the ground up with performance in mind, this means that we must store data inside the application in order to keep the response time to a minimum.\nThe data we must store per product is the following:\nHotelX  Mappings Custom hotel lists  Uploading Strategies\rHow to Upload data\n\r\r\r\r"
},
{
	"uri": "/hotelx/",
	"title": "HotelX",
	"tags": [],
	"description": "HotelX: NextGen Hotel Search API",
	"content": "HotelX connects you to multiple sellers addding business logic solving most of the problems commonly found in the travel business in an elegant and efficient way.\nThere are no integration costs and you can operate with hundreds of hotel sellers. HotelX has been designed from the ground up to be fast, reliable and scales to millions of requests.\n\t\rOverview\rHotelX Information\n\r\r\r\t\rQuickstart\rHotelX Quickstart\n\r\r\r\t\rConcepts\rUnderstand TravelgateX basic concepts\n\r\r\r\t\rHow-to Guides\rPerform specific tasks\n\r\r\r\t\rPlugins\rAdditional logic to your App\n\r\r\r\t\rReference\rReference Documentation\n\r\r\r\t\rResources\rQuotas, release notes\n\r\r\r\r"
},
{
	"uri": "/admin/howtos/",
	"title": "How-to Admin Guides",
	"tags": [],
	"description": "Perform specific tasks",
	"content": "How-to Guides\n"
},
{
	"uri": "/hotelx/howtos/",
	"title": "How-to Guides",
	"tags": [],
	"description": "Perform specific tasks",
	"content": "How-to Guides\n"
},
{
	"uri": "/travelgatex/reference/interfaces/",
	"title": "Interfaces",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/hotelx/concepts/management-flow/",
	"title": "Management Flow",
	"tags": [],
	"description": "Learn about Management Flow. Cancellations and Booking List",
	"content": " On this page you will learn how to manage and control bookings and management flow. Managing operations can be used in order to operate above Seller\u0026rsquo;s bookings.\nCancellation Performs a Seller booking cancellation.\nOperation { \u0026quot;mutation\u0026quot;: { \u0026quot;hotelX\u0026quot;: { \u0026quot;cancel\u0026quot;: { } } } }  PlayGround Samples  cancel   Booking Performs a seller booking list.\nIn this case you can search the bookings with references or by dates, the dates can be arrival dates or booking dates.\nOperation { \u0026quot;query\u0026quot;: { \u0026quot;hotelX\u0026quot;: { \u0026quot;booking\u0026quot;: { } } } }  PlayGround Samples  booking   "
},
{
	"uri": "/hotelx/plugins/net-price/",
	"title": "Net Price",
	"tags": [],
	"description": "",
	"content": " Net Price is an optional plugin and allows to net all the prices in an option.\nNetPriceX This plugin receives an Option by parameter and returns an Option with all the prices with net value. This plugin reads information of commissions from ftp. Is mandatory to load at least, suppliers commission file. Depending of the files in ftp, this plugin can apply two different commission values over prices. Suppliers commission file specifies the commission applied to supplier’s prices. Hotel commission file specifies the commission applied to concrete hotel’s price. In one hand, if no hotels commission file is loaded in ftp, is applied net with the commission specified in commissions suppliers file. In other hand, if hotels commission file is loaded, this have preference over suppliers file. These files have to accomplish requirements below. In other cases, an error will be returned.\nFile Format The file should be in the below format:\n Encoding: UTF-8  File Name: commission_supplier.csv  Header Row: Supplier, Commission Delimiter: Comma (“,”)  Directory: /F[folder code]_[unique code]/HotelX_[unique code]/  Headers:\n Supplier → supplier code  Commission → commission value, decimal separator must be point (\u0026ldquo;.\u0026rdquo;)  Sample File Name: commission_supplier.csv\nData:\nSupplier,Commission AXI,0 AXI2,0  Hotel Commission File Format The hotel commission file should be in the below format:\n Encoding: UTF-8  File Name: commission_hotel.csv  Header Row: Supplier, Hotel, Commission Delimiter: Comma (“,”)  Directory: /F[folder code]_[unique code]/HotelX_[unique code]/  Headers:\n Supplier → supplier code  Hotel → hotel code  Commission → commission value, decimal separator must be point (\u0026ldquo;.\u0026rdquo;)  Sample File Name: commission_supplier.csv\nData:\nSupplier,Hotel,Commission HOTELTEST,1,19 TTHOTTEST,1,11  Execution example { \u0026quot;plugins\u0026quot;: { \u0026quot;step\u0026quot;: \u0026quot;RESPONSE\\_OPTION\u0026quot;, \u0026quot;pluginsType\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;CURRENCY\\_CONVERSION\u0026quot; \u0026quot;name\u0026quot;: \u0026quot;net\\_priceX\u0026quot; } ] } }  "
},
{
	"uri": "/travelgatex/security/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Learn Platform Security",
	"content": " Introduction TravelgateX offers a fine-grained access control and visibility for centrally managing resources, which are granted to Partners belonging to Organizations.\nAuthentication Authentication is the process of authorizing or making sure that the Partner is the correct one. Every request to TravelgateX GraphQL API must carry an Access Token whether it\u0026rsquo;s an API Key or a JSON Web Token.\nAPI Key The API key takes cares of the authentication of applications, normally created as Service Account with limited scopes. The correct way to send it to GraphQL server is via HTTP Header:\n API key: \u0026quot;Authorization: Apikey xxxxxxxxx\u0026quot;  curl -X\\ POST\\ -H \u0026quot;Content-Type: application/json\u0026quot; \\ -H \u0026quot;Authorization: Apikey q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\u0026quot; \\ --data '{\u0026quot;query\u0026quot;:\u0026quot;{searchStatusService{code description}}\u0026quot;}' \\ --compressed \\ https://api.travelgatex.com  Creating an API Key For development purposes please use the following test Api Key q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\nJSON Web Token (JWT) The JSON Web Token takes cares of the authentication of users, normally created as User.\nWhenever the user wants to access a protected resource, the user agent should send the JWT, in the Authorization header using the Bearer schema. The content of the header should look like the following:\n JWT: \u0026quot;Authorization: Bearer xxxxxxxxx\u0026quot;  Authorization Once the Member is authenticated we must authorize the partner to use the requested Resource.\nIAM lets partners administrators authorize who can take action on specific resources, giving you full control and visilibity to manage resources centrally.\nFurther Reading  Authentication JWT  "
},
{
	"uri": "/hotelx/plugins/processor/",
	"title": "Processor",
	"tags": [],
	"description": "Processor plugins",
	"content": "Processor plugins extends HotelX allowing multiple operation types. It can modify request and response messages, allowing a full range of operations:\n Split arrays Join arrays Modify object values Add or remove object instances  "
},
{
	"uri": "/learning-graphql/thinking_in_graphql/",
	"title": "Thinking in GraphQL",
	"tags": [],
	"description": "",
	"content": " A Paradigm Shift GraphQL is a query language, and as such it does exactly that: it queries servers in order to get results back and ee get to choose exactly what data we want to retrieve. As opposed to JSON, each piece of data has its own type, so we know exactly what to expect, it\u0026rsquo;s a typed language. This gives it a lot of predictability, something we really appreciate, especially when dealing with third party APIs, where we have no control of what\u0026rsquo;s going on on the other side.\nBuilding GraphQL Schemas In GraphQL, the API specifications are called schemas. A GraphQL Schema is like a contract between the client and the server. It\u0026rsquo;s the way how they talk to each other and what they expect from each other. This way, both know exactly what they can and cannot send to each other and what they\u0026rsquo;ll get in response to that. This makes a lot of a difference when creating our schemas, we have to get used to think in a Schema First way.\n A particularly interesting pattern seems to be emerging. Over and over again, I hear developers describing a way of approaching product development we’re calling “GraphQL First.”https://dev-blog.apollodata.com/graphql-first-a-better-way-to-build-modern-apps-b5a04f7121a0\n First, we model our data, thinking of all the different uses we can give to it. And only then, we\u0026rsquo;ll think of where we are going to get it from. It could even be from different services, like a database or another node from a third party provider.\nAnother great feature of GraphQL is that the specification ensures that we write documentation while writing the schema. Not only is it cool to see your text in the GraphiQL window, but while you\u0026rsquo;re typing your query, it helps you to think of each and every node and why you\u0026rsquo;re putting it there. Tools such as APIs Guru\u0026rsquo;s graphql-faker makes it possible to write the schema in one scree while in the other you see the results.\nGraphQL schemas also support inheritance by using the same objects for different queries. For example, in our business domain, just like in most businesses, we have to return the price of the Hotel or Flight and with GraphQL we are able to use exactly the same element in both, and just extend it if needed. This makes the job much easier and faster for the developer who are implementing our service.\nIf you wish to see TravelgateX schema implementation, simply follow the practices explained here\nBuilding Queries  Componentes de la query Componentes de la respuesta Respuesta Como lo hacemos Paginacion  Building Mutations  Componentes de la query Componentes de la respuesta Respuesta Como lo hacemos Paginacion  TODO: Falta chicha!!\r"
},
{
	"uri": "/flightx/",
	"title": "FlightX",
	"tags": [],
	"description": "",
	"content": "FlightX connects you to multiple sellers addding business logic solving most of the problems commonly found in the travel business in an elegant and efficient way.\nThere are no integration investments and you can operate with hundreds of hotel sellers. FlightX has been desined to be fast, reliable and offer strong performance.\n\t\rOverview\rFlightX Information\n\r\r\r\r"
},
{
	"uri": "/hotelx/concepts/content/",
	"title": "Hotel Content",
	"tags": [],
	"description": "Learn about how manage content data to manage in your site. Hotel, Boards, Categories...",
	"content": " On this page you will learn how to manage content data in your site such as hotel, boards, categories, etc.\nHotels Hotels query returns a hotel list of the one supplier access. This entity contains static data about the hotel like code, name, location, information about the hotel information, etc\u0026hellip; You can find all fields in the graph. You can get the hotels with hotel codes or with minimal destination codes. Also you can filter the result with the rank.\nPlayground Samples  hotels   Hotels Ranking Hotel Content operations allow changes to be made to static methods on HotelX. A system where hotels can be divided into different rankings or priorities in order to facilitate the mapping process.\nThe main goal of this process is to create a hotel ranking and divide the whole portfolio so the hotel list is more manageable. Each classification or sub-list responds to specific commercial criteria, such as, the hotels directly contracted, the best offers, the best sales hotels, etc.\nOnce the hotel ranking file(s) have been uploaded, the static hotel list method can filter hotels according to this ranking. To set up hotel ranking lists you must upload a file in csv format using a specific name to identify the ranking in your organisation’s FTP.\nFile Names (mandatory) Each file can have different meanings. It’s up to the file creator to give it a meaning according to his/her business needs. In order to process files correctly, they must be named according to the following naming convention:\n   File Nane Description     rank1.csv Rank 1, for example direct contracts   rank2.csv Rank 2, for example best deals   rank3.csv Rank 3, for example top sales   rank4.csv Rank 4, for example competitive hotels   rankN.csv Rank N, any type of information.    Header fields (mandatory) In order to be correctly processed, the header fields must have the following format:\n   Field Name Data Type     provider_id string   hotel_code string   rank boolean [1,0]    Example:    provider_id hotel_code rank     travelgatex 2018 1   travelgatey 2017 1    Process file To process the file, it must be uploaded to your organization’s FTP folder in the TravelgateX Platform. More info on how to upload files please refer to the data automation section.\nTemplate File For your convinience you can download a template CSV file.\nDestinations Destination query returns a list of static data about destinations for a supplier access. By default if you don’t set the destination codes are all the codes. Like than hotels you can get the other pages with the continuation token.\nPlayground Samples  destinations   Boards Board static data returns a simple map of the boards that can be returned with its translation to other languages.\nPlayground Samples  boards   Rooms Room static data returns a simple map of the rooms that can be returned with its translation to other languages.\nPlayground Samples  rooms   Categories Category static data returns a simple map of the categories that can be returned with its translation to other languages.\nPlayground Samples  categories   "
},
{
	"uri": "/travelgatex/reference/inputobjects/",
	"title": "Input objects",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/hotelx/plugins/",
	"title": "Plugins",
	"tags": [],
	"description": "Additional logic to your App",
	"content": "Customize your additional features.\n\t\rOverview\rPlugins workflow execution\n\r\r\r\t\rBlacklist\rhotel codes blacklist\n\r\r\r\t\rMapping\rMap plugins\n\r\r\r\t\rAggregation\rAggregation plugins\n\r\r\r\t\rMarkup\rMarkup plugins\n\r\r\r\t\rCurrency Converter\rConverter plugins\n\r\r\r\t\rNet Price\r\r\r\r\t\rProcessor\rProcessor plugins\n\r\r\r\t\rDevelopment\rDevelop your own plugins\n\r\r\r\r"
},
{
	"uri": "/stats/",
	"title": "StatsX",
	"tags": [],
	"description": "",
	"content": "\r\t\rOverview\rStatsX Information\n\r\r\r\r"
},
{
	"uri": "/learning-graphql/tooling/",
	"title": "Tools",
	"tags": [],
	"description": "",
	"content": " Top tools to develop in GraphQL Here is a collection of tools we\u0026rsquo;ve been using that have help us develop in GraphQL:\nTo design Schemas  APIs Guru\u0026rsquo;s graphql-faker: https://github.com/APIs-guru/graphql-faker  TODO: Falta chicha!!\rGo Packages Nowadays most our APIS are written in Go, mainly because of speed, ability to handle very high load while using low resources. Also because of the ability to develop plugins. We\u0026rsquo;ve used many libraries and packages to help us, hereby our list:\n Redis: https://godoc.org/github.com/garyburd/redigo/redis  TODO: Falta chicha!!\rNodeJS Packages Other pieces of our software are written in NodeJS. Mainly because some packages are wither not avaialble in Go, or because the Go package is not as performant as the Node alternative. These are the packages we use:\nTODO: Falta chicha!!\rSchema Visualizers It\u0026rsquo;s nice to be able to see your schema and be able to navigate through it.\n GraphQL Voyager - Represent any GraphQL API as an interactive graph  Documentation Generators Generate beaultiful static documentation sites directly from schema or introspection query\n Graph Docs Graphdoc  GraphQL Clients Build, create and play with queries, it\u0026rsquo;s fun!\n Insomnia: our favorite \u0026#9825; graphql-playground: favorite online client GraphiQL: the original  TODO: Falta chicha!!\rBig List Here\u0026rsquo;s even more tools, resources, etc.\n Awesome GraphQL  "
},
{
	"uri": "/travelgatex/tutorials/",
	"title": "Tutorials",
	"tags": [],
	"description": "Walkthrouhgs of common applications",
	"content": "What you can build on TravelgateX\u0026rsquo;s platform Build An OTA\rBuild Your Own Full Fledged OTA\n\r\r\r\r"
},
{
	"uri": "/hotelx/plugins/development/",
	"title": "Development",
	"tags": [],
	"description": "Develop your own plugins",
	"content": "On this page you will learn how to develop your own HotelX plugin.\n"
},
{
	"uri": "/travelgatex/reference/enums/",
	"title": "Enums",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/mappea/",
	"title": "MappeaX",
	"tags": [],
	"description": "",
	"content": "\r\t\rOverview\rFlightX Information\n\r\r\r\r"
},
{
	"uri": "/admin/reference/",
	"title": "Reference",
	"tags": [],
	"description": "Reference Documentation",
	"content": " Reference "
},
{
	"uri": "/hotelx/reference/",
	"title": "Reference",
	"tags": [],
	"description": "Reference Documentation",
	"content": " Reference "
},
{
	"uri": "/travelgatex/resources/",
	"title": "Resources",
	"tags": [],
	"description": "New Updates &amp; Releases",
	"content": "\rQuotas \u0026amp; Limits\r\r\r\rRealeases Notes\rRelease Notes and Changelog\n\r\r\rRoadmap\r\r\r\rFrequendly Asked Questions\rCommon questions\n\r\r\r\r"
},
{
	"uri": "/learning-graphql/tutorials_resources/",
	"title": "Tutorials &amp; Resources",
	"tags": [],
	"description": "",
	"content": " As you can see GraphQL is a fast growing ecosystem. Apart from Facebook\u0026rsquo;s and Graphql.org\u0026rsquo;s official documentation, there are more and more development teams embracing this technology and you can now find a lot of articles, tutorial and videos talking about it.\nHowever we want to be part of this community and help you discover this new technology and its features. That\u0026rsquo;s why we have gathered some of the best tutorials for you to learn, step by step, how to use it. Have a look at the list bellow and click on any of the resources, materials, podcast and documentation to start.\nEnjoy it!\nGraphQL Tutorials  https://github.com/blog/2412-learn-graphql-with-github  TODO: Falta chicha!!\rGraphQL Resources  GraphQL official documentation Apollo Relay official documentation Schema first development - Johannes Schickling Schema-first development with GraphQL GraphQL First in practice at Quri GraphQL First: A better way to build modern apps GraphQL User List  "
},
{
	"uri": "/travelgatex/reference/changelog/",
	"title": "Changelog",
	"tags": [],
	"description": "",
	"content": " Deprecations \r2018-03-19\r\r\r\rconnectUser This field is occurs only if the authorization header is of the type JWT.. It is used to change the user that has been set by default in the preload. @deprecated(reason: \u0026#34;deprecated from 2018-03-19. Redundant.\u0026#34;)\r\r\r\r\r2017-12-12\r\r\r\ruseContext Indicates if you want use context, or not, by default is true. @deprecated(reason: \u0026#34;deprecated from 2017-12-12. Redundant.\u0026#34;)\r\r\r\r"
},
{
	"uri": "/insights/",
	"title": "InsightsX",
	"tags": [],
	"description": "",
	"content": "\r\t\rOverview\rFlightX Information\n\r\r\r\r"
},
{
	"uri": "/admin/resources/",
	"title": "Resources",
	"tags": [],
	"description": "Quotas, release notes",
	"content": "\rQuotas \u0026amp; Limits\r\r\r\rRelease Notes\r\r\r\rRoadmap\r\r\r\rFrequendly Asked Questions\rCommon questions regarding HotelX\n\r\r\r\r"
},
{
	"uri": "/hotelx/resources/",
	"title": "Resources",
	"tags": [],
	"description": "Quotas, release notes",
	"content": " Resources "
},
{
	"uri": "/admin/",
	"title": "Admin",
	"tags": [],
	"description": "",
	"content": "\r\t\rOverview\rAdmin Information\n\r\r\r\t\rConcepts\rUnderstand TravelgateX basic concepts\n\r\r\r\t\rHow-to Admin Guides\rPerform specific tasks\n\r\r\r\t\rReference\rReference Documentation\n\r\r\r\t\rResources\rQuotas, release notes\n\r\r\r\r"
},
{
	"uri": "/learning-graphql/",
	"title": "Learning GraphQL",
	"tags": [],
	"description": "",
	"content": "\r\rGraphQL Overview\r\r\r\r\rBasic Concepts\r\r\r\r\rThinking in GraphQL\r\r\r\r\rTools\r\r\r\r\rTutorials \u0026amp; Resources\r\r\r\r\r"
},
{
	"uri": "/_footer/",
	"title": "footer",
	"tags": [],
	"description": "",
	"content": "Lorem ipsum dolor sit amet.\n"
},
{
	"uri": "/_header/",
	"title": "header",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/guion/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Getting Started pagetitle = \u0026ldquo;\u0026rdquo; GOAL: información basica para empezar a desarrollar\nOverview GOAL: Explicar el who, why, how de la plataforma\n WHO: Equipos tecnicos para consumir servicios de travel\n WHY: search \u0026amp; book travel multi-products \u0026amp; multi-source\n WHY: Using the Storefront API, you can:\n HOW: Plataforma: Multi-Producto \u0026amp; Multi-Source\n HOW: Diagrama Platforma\n HOW: Utilización de GraphQL: EndPoint único\n WHY: Fast. Scalable. Reliable.\n Resumen: Ventajas GraphQL\n Get Engaged: comunidad, docuemntación y jira\n CALL2ACTION: Quickstart busqueda hoteles\n  QuickStart GOAL: minimo indispensable para hacer una petición\n INTRO: empezar en 1min   API Key test Ejemplo de búsqueda de HotelX inline   Product QuickStarts\n CALL2ACTION: Try HotelX Playground\n  Concepts GOAL: Glosario de conceptos\nINTRO: Explicar pq necesitamos estos conceptos y donde se utilizan\n Partner API Organization Buyer Seller Access Product Permission Plugin  CALL2ACTION: Read More about the Platform\nPlatform GOAL: Como funciona la plataforma a nivel técnico\nOverview GOAL: explicar utilizacion de la plataforma con GraphQL\nINTRO: Explica lo que se necesita saber para utilizar un producto, se utiliza como referencia de la documentación de los demás productos\n WHO: Developers de empresas de travel que quieran integrarse para comprar/vender productos de travel\n WHY: unificar en 1 API sencilla todos los servicios que se puedan vender o comprar en una empresa de productos turisticos\n WHY: Que puede hacer con la plataforma: \u0026ndash; Fetch data about a single product or a collection of products to display on any website or device. \u0026ndash; Create unique checkout experiences with full control over the shopping cart. \u0026ndash; Connect to more than 600 sellers of travel products. \u0026ndash; Allow customers to search \u0026amp; book through a number of sellers \u0026ndash; Gain complete control of the number and quality of requests sent and received \u0026ndash; Map new sellers to your existing hotel codes\n HOW: implementación API en GraphQL\n HOW: como funciona? \u0026ndash; HOW: breve explicación GraphQL \u0026ndash; HOW: endpoint unico \u0026ndash; HOW: GraphQL requests \u0026ndash; HOW: Security \u0026ndash; HOW: Data Automation \u0026ndash; HOW: API Reference \u0026ndash; HOW: Resources \u0026mdash; HOW: Quotas \u0026amp; Limits \u0026mdash; HOW: Release Notes\n  CALL2ACTION: Get Started With our Products\nSecurity GOAL: Explicar en detalle como fuciona INTRO: CONTENIDO:\nData Automation GOAL: INTRO: CONTENIDO:\nAPI Reference GOAL: INTRO: CONTENIDO:\nQuotas \u0026amp; Limits GOAL: INTRO: CONTENIDO:\nRelease Notes GOAL: INTRO: CONTENIDO:\nTutorials TravelB2B Stats Dashboard HotelX GOAL: información basica para empezar a desarrollar\nOverview GOAL: Explicar el who, why, how de la hotelX\n WHO: Equipos tecnicos para consumir apis de diferentes proveedores de acomodación\n WHY: search \u0026amp; book travel hotels multi-source\n WHY: Using the Storefront API, you can:\n HOW: Plataforma: Multi-Producto \u0026amp; Multi-Source\n HOW: Diagrama Platforma\n HOW: Utilización de GraphQL: EndPoint único\n WHY: Fast. Scalable. Reliable.\n Resumen: Ventajas GraphQL\n Get Engaged: comunidad, docuemntación y jira\n CALL2ACTION: Quickstart busqueda hoteles\n  QuickStart GOAL: minimo indispensable para hacer una petición\n INTRO: empezar en 1min   API Key test Ejemplo de búsqueda de HotelX inline   Product QuickStarts\n CALL2ACTION: Try HotelX Playground\n  Concepts GOAL: Glosario de conceptos\nINTRO: Explicar pq necesitamos estos conceptos y donde se utilizan\n Partner API Organization Buyer Seller Access Product Permission Plugin  CALL2ACTION: Read More about the Platform\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/credits/",
	"title": "Credits",
	"tags": [],
	"description": "contributors and packages used by hugo-theme-docdock",
	"content": " github contributors .ghContributors{\rdisplay:flex;\rflex-flow: wrap;\ralign-content: flex-start\r}\r.ghContributors  div{\rwidth: 50% ;\rdisplay: inline-flex;\rmargin-bottom: 5px;\r}\r.ghContributors  div label{\rpadding-left: 4px ;\r}\r.ghContributors  div span{\rfont-size: x-small;\rpadding-left: 4px ;\r}\r\r\r@vjeantet\r246 commits\r\r\r@matcornic\r49 commits\r\r\r@W-Floyd\r24 commits\r\r\r@gwleclerc\r21 commits\r\r\r@lierdakil\r16 commits\r\r\r@Pilskalns\r12 commits\r\r\r@jose-oc\r8 commits\r\r\r@SiamKreative\r6 commits\r\r\r@Xipas\r5 commits\r\r\r@altinnadmin\r4 commits\r\r\r@FMuro\r2 commits\r\r\r@EnigmaCurry\r2 commits\r\r\r@aral\r2 commits\r\r\r@adamlamar\r1 commits\r\r\r@byzheng\r1 commits\r\r\r@zivbk1\r1 commits\r\r\r@damoon\r1 commits\r\r\r@vielmetti\r1 commits\r\r\r@erikjasiak\r1 commits\r\r\r@giuliov\r1 commits\r\r\r@farmergreg\r1 commits\r\r\r@jodumont\r1 commits\r\r\r@tarpdalton\r1 commits\r\r\r@jamestharpe\r1 commits\r\r\r@JohnBlood\r1 commits\r\r\r@kamilchm\r1 commits\r\r\r@ripienaar\r1 commits\r\r\r@shazic\r1 commits\r\r\r@viertaxa\r1 commits\r\r\r@uweschaefer\r1 commits\r\r\r@eyoder\r1 commits\r\r\r@justin-yan\r1 commits\r\r\r@karlmacklin\r1 commits\r\r\r@petzi53\r1 commits\r\r\r@remi31000\r1 commits\r\r\r@xxxtonixxx\r1 commits\r\r Other contributors  @bep supports and advices   Packages and libraries  Bootstrap - front-end framework mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services\u0026hellip; JavaScript-autoComplete - An extremely lightweight and powerful vanilla JavaScript completion suggester. clipboard.js - copy text to clipboard highlight.js - Javascript syntax highlighter modernizr - A JavaScript toolkit that allows web developers to use new CSS3 and HTML5 features while maintaining a fine level of control over browsers that don\u0026rsquo;t support reveal-js - The HTML Presentation Framework  Tooling  Netlify - Continuous deployement and hosting of this documentation Hugo \r  "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/",
	"title": "TravelgateX Documentation",
	"tags": [],
	"description": "",
	"content": ""
}]