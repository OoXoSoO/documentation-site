[
{
	"uri": "/hotelx/reference/api-reference/",
	"title": "API Reference",
	"tags": [],
	"description": "",
	"content": " This API reference is organized by graphql operations related to product.\nQuery Operations Mutation Operations Documentation Schema documentation\nSamples  Search, Quote, Book, Cancel and Retrieve bookings  "
},
{
	"uri": "/travelgatex/reference/api-reference/",
	"title": "API Reference",
	"tags": [],
	"description": "",
	"content": " This API reference is organized by graphql operations related to product.\nQuery Operations Mutation Operations Custom Scalar Types TravelgateX GraphQL schema implementation defines custom scalar types.\nJSON Sometimes it\u0026rsquo;s necessary to manage arbitrary JSON values for loosely structured data. The JSON type makes sure that it is actually valid JSON and returns the value as a parsed JSON object/array instead of a string.\nIn queries or mutations, JSON fields have to be specified with enclosing double quotes. Special characters have to be escaped: \u0026quot;{\\\u0026quot;int\\\u0026quot;: 1, \\\u0026quot;string\\\u0026quot;: \\\u0026quot;value\\\u0026quot;}\u0026quot;.\nDateTime The DateTime type represents DateTime values. A good example might be a transaction TimeSpan.\nIn queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: \u0026quot;2017-10-22T13:57:31.123Z\u0026quot;.\nDate The Date type represents Date values. A good example might be a Hotel CheckIn Date.\nIn queries or mutations, DateTime fields have to be specified in ISO 8601 format with enclosing double quotes: \u0026quot;2017-10-22\u0026quot;.\nURI The URI type represents a URI values. A good example mith be an Hotel Image URL.\nIn queries or mutations, URI fields have to be specified in RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string format with enclosing double quotes: \u0026quot;http:\\\\www.travelgatex.com\u0026quot;.\nCountry The Country type represents Country values. A good example might be a Passenger Nationality.\nIn queries or mutations, Country fields have to be specified in ISO 3166-1 alpha-2 format with enclosing double quotes \u0026quot;ES\u0026quot;.\nLanguage The Language type represents Language values. A good example might be a Hotel Description Language.\nIn queries or mutations, Language fields have to be specified in ISO 3166-1 alpha-2 format with enclosing double quotes \u0026quot;es\u0026quot;.\nCurrency The Currenty type represents Currency values. A good example might be a Rate Price Currency.\nIn queries or mutations, Currency fields have to be specified in ISO 4217 format with enclosing double quotes \u0026quot;EUR\u0026quot;.\nDocumentation Schema documentation\nSamples  Search, Quote, Book, Cancel and Retrieve bookings  "
},
{
	"uri": "/hotelx/concepts/accesses-supplier-context/",
	"title": "Accesses, `Sellers` and Context",
	"tags": [],
	"description": "Learn about Core Entities used in TravelgateX",
	"content": ""
},
{
	"uri": "/hotelx/howtos/howto-book/",
	"title": "Book",
	"tags": [],
	"description": "",
	"content": "Flow to book\n"
},
{
	"uri": "/travelgatex/tutorials/ota-site/",
	"title": "Build An OTA",
	"tags": [],
	"description": "",
	"content": " Build Your Own Full Fledged OTA "
},
{
	"uri": "/getting-started/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": "Information to start developing \t Overview TravelgateX Information\n   \t Quickstart Learn in 5 minutes\n   \t Concepts Understand concepts\n   \t Playground Test inline\n    "
},
{
	"uri": "/adminx/overview/",
	"title": "Overview",
	"tags": [],
	"description": "AdminX Information",
	"content": "This page shows you how to perform basic hotel book using GraphQL Playground.\n"
},
{
	"uri": "/flightx/overview/",
	"title": "Overview",
	"tags": [],
	"description": "FlightX Information",
	"content": "This page shows you how to perform basic hotel book using GraphQL Playground.\n"
},
{
	"uri": "/getting-started/overview/",
	"title": "Overview",
	"tags": [],
	"description": "TravelgateX Information",
	"content": " Become a TravelgateX Partner The first step towards building your next travel API is to become a TravelgateX registered partner.\nAt this moment, please contact us in order to become a partner.\nWe will be publishing a registration website so each developer can register for an account with us. Please bear with us.\nProduct Quick Start Although there\u0026rsquo;s only one endpoint, our GraphQL API models all the products and services we offer. Please navigate to the desired product documentation in order to start building your app.\n ConnectX Hotel: Next generation hotel search \u0026amp; booking API. ConnectX Flights: Next generation NDC compliant flight search \u0026amp; booking API. Stats: All the requests sent and received, their response times and status codes. Insights: Become a true data-first decision maker by leveraging our rich Insights API. All the requests, all the searches, everything you\u0026rsquo;ve made with us available here. Mappea: Collaborative Hotel Mapping. Use this API to map your sellers or to make that everything you have mapped is accurate.  Documentation Documentation is generated from GraphQL schema.You can useÂ multiple columns and keyboard-based navigation via the Playground\n  Get Engaged You are not alone! The API is designed to be very intuitive and easy to read. Nevertheless, although we strive to keep things simple, some concepts can be confusing and we understand learning a new API can be overwhelming. There are many ways of getting help. The Playground contains the API\u0026rsquo;s documentation. As an alternative you can get help from the community or raise a ticket and our support staff will be delighted to solve any doubts, complaints or suggestions you might have.\nCommunity We use discourse to run our community forum. It\u0026rsquo;s completely free and you can access it here. Please use your own travelgatex.com username and password in order to log in discourse.\nJira Service Desk Our Customer Care Team runs the show using Jira Service Desk. Please raise any questions, complaints, suggestions or any other issues here.\nThe login has been given to you together in the welcome pack. Let us know if you haven\u0026rsquo;t received it or can\u0026rsquo;t find it so we can send it to your email address.\n"
},
{
	"uri": "/hotelx/overview/",
	"title": "Overview",
	"tags": [],
	"description": "HotelX Information",
	"content": " Overview HotelX is the ultimate connectivity solution, it not only connects you to multiple Sellers, but also adds business logic solving most of the problems commonly found in the travel business in an elegant and efficient way.\n Each and every layer discribed in the this figure is explained as follows:\nBusiness Logic We\u0026rsquo;ve added a new layer of business logic in front of the pure transformation API, very fast and totally scalable. It\u0026rsquo;s very flexible, everything can be overridden at the request level, or be left as is. The API is completely written in Go and Redis for performance and scalability. There\u0026rsquo;s also the possibility of writing plugins (in Go) in order to add any logic or add an extra functionality. The main funcionalities of the business logic layer includes, but not limited to:\n Configuration and access management Hotel Mapping Room Type Mapping Sort \u0026amp; Filter results Add pricing/markups Currency Exchange Plugins  Plugins ConnectX introduces a new concept to the industry: Plugins. In a nutshell, a plugin is a piece of code that is executed inside our application. There are a few points in the request lifetime where anyone can develop a plugin. It receives the request or response as an input and outputs the changed request or response. Plugins are a core package in the Go Programming language and more info about it can be found here.\nFor more information and how to write and build plugins please go to the relevant ConnectX Plugin Documentation Page: Hotel or Flight.\nTransformation The transformation layer takes care of the actual trasformation into the Seller\u0026rsquo;s specific format and back. It generates requests to the supplier in an optimal way, we call it Optimal Connector. The Optimal connector is the result of years of interacting with the Sellers and learning from them and from experience how to send requests to them. Each different supplier has a different logic, and is more efficient in one way. We use this now how to send exactly the request which the supplier will handle more effectively, being that a per hotel list, or destination or anythign that over the time we0ve learned from their responses. The transformation layer keeps each and every Seller integration in an optimal level. If a new version is released, we will update our integration. Our team is constantly monitoring the traffic, both automatically and manually in order to make sure the connectivity just works.\n[Optional] Cache Layer Our cache layer, called Speed does exactly what the name says, it caches results so that we don\u0026rsquo;t knock out the Sellers. From a high level perspective it is just a cache. Our secret sauce is how we expire the cache. We use advanced Machine Learning models to predict how long each cached item will be valid from taking into account a large number of variables set in the request. The cache is hosted in Google\u0026rsquo;s BigTable, a \u0026ldquo;Massively Scalable NoSQL\u0026rdquo; database built with performance and scalability in mind.\nSellers Each and every Seller works in a different way. Most are old, legacy SOAP APIs, very few are RESTful APIs and none of them is GraphQL. We have developed them all, and suffered learned from all of them.\nWe connect seemlessly to more than 600 Sellers.\n"
},
{
	"uri": "/insightsx/overview/",
	"title": "Overview",
	"tags": [],
	"description": "FlightX Information",
	"content": "This page shows you how to perform basic hotel book using GraphQL Playground.\n"
},
{
	"uri": "/mappeax/overview/",
	"title": "Overview",
	"tags": [],
	"description": "FlightX Information",
	"content": "This page shows you how to perform basic hotel book using GraphQL Playground.\n"
},
{
	"uri": "/statsx/overview/",
	"title": "Overview",
	"tags": [],
	"description": "StatsX Information",
	"content": "This page shows you how to perform basic hotel book using GraphQL Playground.\n"
},
{
	"uri": "/travelgatex/overview/",
	"title": "Overview",
	"tags": [],
	"description": "Platform information",
	"content": " This page provides an overview of travelgateX platform. It\u0026rsquo;s used as reference\nGraphQL Gateway ConnectX is the first-in-the-industry travel API completely based in GraphQL. Most travel APIs are old legacy XML Soap APIs. We know that, because we\u0026rsquo;ve integrated too many of them. The problems with that technology are well-known and we won\u0026rsquo;t get into details here. One of the things we really like about GraphQL, is that each client is ultimately responsible over what it wants to be returned. For the full reasoning behind working with GraphQL please click here.\nThe architecture doest not differ from many modern APIs. There\u0026rsquo;s an API Gateway, which takes care of basic stuff like authentication and authorization. It also acts like a shield protecting us from DoS attacks and handles throttling. Analytics takes also an important part in the gateway. Moreover, our Gateway is the only endpoint to access all of our APIs.\nIt is written in NodeJS, fast, stable, secure and fault tolerant load balanced between many datacenters from 4 different cloud providers, namely Microsoft Azure, Google Cloud Platform, Hetzner and TotalUptime.\nUsing the API The two types of allowed operations in TravelgateX GraphQL API are:\n Queries Mutations  For more information about using a GraphQL API click here.\nGraphQL Endpoint One of the great things we love about GraphQL is that there\u0026rsquo;s only one single endpoint. Use this endpoint for all operations you want to perform:\nhttps://api.travelgatex.com Communicate with Server To communicate with the GraphQL server, you\u0026rsquo;ll need an access token with the right scopes.\nThis access token could be an API Key or a JSON Web Token, and the correct way to send it to GraphQL server is via HTTP Header:\n API key:Â \u0026quot;Authorization: Apikey xxxxxxxxx\u0026quot; JWT: \u0026quot;Authorization: Bearer xxxxxxxxx\u0026quot;  Follow the steps in Creating an access token to create a token.\nMaking Requests Because GraphQL operations consist of multiple operations and schemas, we recommend using theÂ ExplorerÂ to make GraphQL calls. There are some alternatives to use GraphQL builtin explorerÂ like GraphQL Playground.Â You can also use cURL or any other HTTP-speaking library.\nAll LIVE traffic MUST enable GZIP compression in the HTTP header Accept-Encoding: gzip  To query GraphQL using cURL, make aÂ POSTÂ request with a JSON payload. The payload must contain a string calledÂ query:\ncurl -X\\ POST\\ -H \u0026quot;Content-Type: application/json\u0026quot; \\ -H \u0026quot;Authorization: Apikey q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\u0026quot; \\ --data '{\u0026quot;query\u0026quot;:\u0026quot;{searchStatusService{code description}}\u0026quot;}' \\ --compressed \\ https://api.travelgatex.com  View the Graph Using graphql-voyager, we represent our GraphQL API as an interactive graph.\n  Quick navigation on graph Left panel which provides more detailed information about every type \u0026ldquo;Skip Relay\u0026rdquo; option that simplifies graph by removing Relay wrapper classes Ability to choose any type to be a root of the graph   Open in a new tab here\n  Examples We share GraphQL Playgrounds with common scenarios using products. Playgrounds are shared in product reference sections, for example you can use ConnectX Hotel Playground\nIt\u0026rsquo;s important to use the correct Headers. If you want to use test headers, insert \u0026quot;Authorization\u0026quot;:\u0026quot;ApikeyÂ q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\u0026quot;\nYou can easily share your Queries with others by clicking on the \u0026ldquo;Share\u0026rdquo; button and sharing the generated link. You can think about GraphQL Bin like Pastebin for your GraphQL queries including the context (endpoint, HTTP headers, open tabs etc).\nConventions TravelgateX follow some conventions about schema definition:\n Relay schema requirements Definition of custom scalar types Token Based Authentication  Relay Implementation TravelgateX uses Relay schema requirements for own Resources. Other resources, like Seller search response, are not modeled with Relay practices.\nRelay helps TravelgateX API in order to standarize:\n Standards for querying paginated collections (\u0026ldquo;Connections\u0026rdquo; and \u0026ldquo;Edges\u0026rdquo;) Identifying objects directly from the root of a query (avoiding long nested queries) Provide mutation input data  "
},
{
	"uri": "/getting-started/quickstart/",
	"title": "Quickstart",
	"tags": [],
	"description": "Learn in 5 minutes",
	"content": " Become a TravelgateX Partner The first step towards building your next travel API is to become a TravelgateX registered partner.\nAt this moment, please contact us in order to become a partner.\nWe will be publishing a registration website so each developer can register for an account with us. Please bear with us.\nProduct Quick Start Although there\u0026rsquo;s only one endpoint, our GraphQL API models all the products and services we offer. Please navigate to the desired product documentation in order to start building your app.\n ConnectX Hotel: Next generation hotel search \u0026amp; booking API. ConnectX Flights: Next generation NDC compliant flight search \u0026amp; booking API. Stats: All the requests sent and received, their response times and status codes. Insights: Become a true data-first decision maker by leveraging our rich Insights API. All the requests, all the searches, everything you\u0026rsquo;ve made with us available here. Mappea: Collaborative Hotel Mapping. Use this API to map your sellers or to make that everything you have mapped is accurate.  Documentation Documentation is generated from GraphQL schema.You can useÂ multiple columns and keyboard-based navigation via the Playground\n  Get Engaged You are not alone! The API is designed to be very intuitive and easy to read. Nevertheless, although we strive to keep things simple, some concepts can be confusing and we understand learning a new API can be overwhelming. There are many ways of getting help. The Playground contains the API\u0026rsquo;s documentation. As an alternative you can get help from the community or raise a ticket and our support staff will be delighted to solve any doubts, complaints or suggestions you might have.\nCommunity We use discourse to run our community forum. It\u0026rsquo;s completely free and you can access it here. Please use your own travelgatex.com username and password in order to log in discourse.\nJira Service Desk Our Customer Care Team runs the show using Jira Service Desk. Please raise any questions, complaints, suggestions or any other issues here.\nThe login has been given to you together in the welcome pack. Let us know if you haven\u0026rsquo;t received it or can\u0026rsquo;t find it so we can send it to your email address.\n"
},
{
	"uri": "/hotelx/resources/quotas-limits/",
	"title": "Quotas &amp; Limits",
	"tags": [],
	"description": "",
	"content": "ConnectX Hotel limits the maximum rate of requests adn graph deep. Specific policies vary depending on resource availability, user profile, service usage history, and other factors, and are subject to change without notice.\n"
},
{
	"uri": "/travelgatex/data-automation/ftp/",
	"title": "SFTP",
	"tags": [],
	"description": "",
	"content": " Introduction SFTP, or Secure File Transfer Protocol, is a network protocol that provides completely secure access, transfer, and management of data files programmatically. This protocol is used by the largest organizations in Finance, Technology, and Consulting to transfer data such as Personally Identifiable Information (PII) to ensure it remains 100% secure.\nSecurity To ensure the security of your data, we adhere to the highest standards in data security. The advanced security measures we take include:\n Password-based authentication. IP Whitelisting: We whitelist the IP Addresses you will be accessing your SFTP server from to ensure you, and only you, have access. Anomaly Detection: To ensure no loss of data, we detect anomalies in your uploads to the SFTP server and warn you when an upload would significantly change your account. Encryption: Data is encrypted, keeping your information safe and private.  Setup To get your FTP Credential Details raise a customer care request in Jira Service Desk.\n"
},
{
	"uri": "/hotelx/plugins/validators/",
	"title": "Validator",
	"tags": [],
	"description": "Validate plugins",
	"content": " Validators  Validate Request  "
},
{
	"uri": "/travelgatex/tutorials/stats-dashboard/",
	"title": "Build a Dashboard",
	"tags": [],
	"description": "",
	"content": " Build Your Own Full Fledged OTA "
},
{
	"uri": "/learning-graphql/overview/",
	"title": "GraphQL Overview",
	"tags": [],
	"description": "",
	"content": " A query language for your API Designed by Facebook, GraphQL is a new way of dealing and managing APIs, specially useful for decoupling client\u0026rsquo;s from server\u0026rsquo;s logic.\nStraight from the horse\u0026rsquo;s mouth:  A GraphQL query is a string that is sent to a server to be interpreted and fulfilled, which then returns JSON back to the client. Lee Byron, Facebook\n Official Definition  GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools. graphql.org\n More specifically:  GraphQL is a query language for your API, and a server-side runtime for executing queries by using a type system you define for your data. GraphQL isn\u0026rsquo;t tied to any specific database or storage engine and is instead backed by your existing code and data. graphql.org/learn\n GraphQL at TravelgateX GraphQL is a perfect fit for each and every need of our applications:\n Scalable: we must be able to handle millions of requests. Stable: a change in the API must not break the client. Fast: GraphQL not only allows faster response times by letting you choose exactly what you want, but also is consumes less bandwidth which makes responses lighter.  We\u0026rsquo;re a company focused in providing APIs for our clients. SOAP APIs are long gone and modelling REST APIs to fit a vast variety of products is not only hard, but the bigger it gets, the more unmanageable it becomes.\nAt TravelgateX, we\u0026rsquo;re true believers of the Kaisen philosophy. We\u0026rsquo;re constantly researching for new ways of improvement.\n GraphQL allows us to think of our APIs as a whole, giving a coherence in all our products \u0026amp; services, accessible from one single endpoint. It\u0026rsquo;s like a showcase for our APIs. Oscar Perez, CTO\n "
},
{
	"uri": "/hotelx/plugins/mappings/",
	"title": "Mapping",
	"tags": [],
	"description": "Map plugins",
	"content": " Map plugins\nInput Mapping  Mapping Hotel  Output Mapping  Mapping Room  "
},
{
	"uri": "/hotelx/quickstart/",
	"title": "Quickstart",
	"tags": [],
	"description": "Playground Quickstart",
	"content": " This page shows you how to perform basic hotel book using GraphQL Playground.\nBefore you begin  Follow the steps in Creating an access token to create your API Key. Check connectivity for your API Key. Open Sample Playground and modify HTTP HEADERS field Authorization with your API Key.  Search Hotel  Click on search tab Modify Query Variables with valid dates and send the request.  Quote Hotel  Click on quote tab In Query Variables modify optionRefId with option id value returned in search response and send the request.  Book Hotel  Click on hotelBook tab In Query Variables modify optionRefId with optionRefId value returned in quote response and send the request. Next other information you can chek for book Seller reference  "
},
{
	"uri": "/hotelx/resources/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": "This page documents production updates to connectX Hotel. We recommend that connectX hotel developers periodically check this list for any new announcements.\n"
},
{
	"uri": "/travelgatex/resources/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": "This page contains release notes for features and updates to the travelgaX GraphQL API.\n"
},
{
	"uri": "/travelgatex/security/",
	"title": "Security",
	"tags": [],
	"description": "Authorization and authentication",
	"content": " Authenticating Learn Platform Security\n    "
},
{
	"uri": "/travelgatex/",
	"title": "TravelgateX",
	"tags": [],
	"description": "",
	"content": "Run your applications using TravelgateX platform. \t Overview Platform information\n   \t Security Authorization and authentication\n   \t Data Automation Automate data bulk operations\n   \t Reference Reference Documentation\n   \t Tutorials Walkthrouhgs of common applications\n   \t Resources Quotas, release notes\n    "
},
{
	"uri": "/adminx/",
	"title": "AdminX",
	"tags": [],
	"description": "",
	"content": "FlightX connects you to multiple sellers addding business logic solving most of the problems commonly found in the travel business in an elegant and efficient way.\nThere are no integration investments and you can operate with hundreds of hotel sellers. FlightX has been desined to be fast, reliable and offer strong performance.\n\t Overview AdminX Information\n    "
},
{
	"uri": "/hotelx/plugins/aggregation/",
	"title": "Aggregation",
	"tags": [],
	"description": "Aggregate plugins",
	"content": " Aggregator Access  Price Aggregate  Aggregator  Price Aggregate  "
},
{
	"uri": "/learning-graphql/basic_concepts/",
	"title": "Basic Concepts",
	"tags": [],
	"description": "",
	"content": " Queries and Mutations  At its simplest, GraphQL is about asking for specific fields on objects. Let\u0026rsquo;s start by looking at a very simple query and the result we get when we run it http://graphql.org/learn/queries/?utm_source=docs.travelgatex.com\n There are 2 basic operations in GraphQL schemas:\nQueries http://graphql.org/learn/queries/?utm_source=docs.travelgatex.com\nJust like a RESTful Get method, queries query the system. This operation reads values from the server using a Graph Object and gets a JSON as a response.\nUnlike a RESTful service, queries are interactive, it allows the user to choose exactly what he wants to get returned. This way, if the API owner makes a change to the API, the client will not be affected as long as the query does not change. Think of it like a good\u0026rsquo;ol SQL query. As long as you send the same one, the results is always predictable.\nThis fact makes versioning totally unnecessary in GraphQL APIs. There\u0026rsquo;s no need to specify which version you want to consume, since it\u0026rsquo;s you who are in charge of deciding which fields you want to retrieve.\nAs a bonus, the GraphQL specification includes handling of deprecated fields and marks a field as is-deprecated by adding a deprecationReason to the field.\nQuery example\nEJEMPLO PEQUE DE DISPO TODO: Falta ejemplo!! Mutations http://graphql.org/learn/queries/#mutations?utm_source=docs.travelgatex.com\nMutations are methods that change the server. It makes a physical change to the data. Could be inserting a new object in a database, deleting or updating. Queries take care of POST, PUT and DELETE methods in a REST API or INSERT, UPDATE and DELETE in SQL.\nMutation example:\n"
},
{
	"uri": "/hotelx/concepts/booking-flow/",
	"title": "Booking Flow",
	"tags": [],
	"description": "Learn about Transactional Booking flow. Search, Quote and Confirm Reservation",
	"content": " Search, Quote and Book transactions must be executed sequentally in order to book hotel rooms in a Seller.\nSearch Performs an hotel availability search over 1 or more Seller accesses\nDepending Seller, search operations implitiy use supplier\u0026rsquo;s cache.\nOperation { \u0026quot;query\u0026quot;: { \u0026quot;search\u0026quot;: { \u0026quot;hotel\u0026quot;: { } } } }  PlayGround Samples  search  Quote Performs an hotel quote over an option returned in Search Response.\nOperation { \u0026quot;query\u0026quot;: { \u0026quot;quote\u0026quot;: { \u0026quot;hotel\u0026quot;: { } } } }  PlayGround Samples  quote  Book Performs a book or reservation over an option returned in Quote Response\nOperation { \u0026quot;mutation\u0026quot;: { \u0026quot;hotelBook\u0026quot;: { } } }  PlayGround Samples  hotelBook  "
},
{
	"uri": "/getting-started/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "Understand concepts",
	"content": " TravelgateX offers a set of Products ready to be integrated using a single GraphQL endpoint.\nGraphQL API TravelgateX is the first-in-the-industry travel API completely based in GraphQL. Most travel APIs are old legacy XML Soap APIs. We know that, because we\u0026rsquo;ve integrated too many of them. The problems with that technology are well-known and we won\u0026rsquo;t get into details here. One of the things we really like about GraphQL, is that each client is ultimately responsible over what it wants to be returned.\nIt is a stable, secure and fault tolerant load balanced between many datacenters from 4 different cloud providers, namely Microsoft Azure, Google Cloud Platform, Hetzner and TotalUptime. For the full reasoning behind working with GraphQL please click here.\nFor explanation about using TravelgateX GraphQL API please click here.\nPartner A Partner is someone or something that can interact with any TravelgateX APIs or apps. It can be either a User, which identifies a person, or Service Account which is identified by an API Key.\nOrganization Each Partner belongs to one or more Organizations.\nAn Organization is made up of Partners, Resources, Settings, Permissions and other Metadata.\nProduct We organize our APIs by similarity and common features. A Product is an API domain which is available for the consumption of Resources.\nFor detailed Product information please click here.\nEntities Entities or core resources are entities that define common objects in all our API domains.\nBuyer A Buyer is a Partner who is connected to TravelgateX in the demand side in order to buy travel products from Sellers.\nSeller A Seller is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected BuyersMa.\nTech Platform Many Partners, Buyers or Sellers use a third party platform in order to buy or sell travel products. These are usually tech companies specialized in developing custom software to other companies.\nContext A Context refers to the Seller codes the request is using. It\u0026rsquo;s a way of specifiying which Seller codes is being used so it can be transformed and standardized.\nAccess An Access is a set of credentials and configuration in order to access a Seller.\n"
},
{
	"uri": "/hotelx/concepts/",
	"title": "Concepts",
	"tags": [],
	"description": "Understand TravelgateX concepts",
	"content": " Concepts Each and every Seller works in a different way. Most are old, legacy SOAP APIs, very few are RESTful APIs and none of them is GraphQL. We have developed them all, and suffered learned from all of them.\nWe connect seemlessly to more than 600 Sellers.\nAccesses, `Sellers` and Context Learn about Core Entities used in TravelgateX\n   Booking Flow Learn about Transactional Booking flow. Search, Quote and Confirm Reservation\n   Management Flow Learn about Management Flow. Cancellations and Booking List\n   Content Learn about how manage content data to manage in your site. Hotel, Boards, Categories...\n    "
},
{
	"uri": "/getting-started/playground/",
	"title": "Playground",
	"tags": [],
	"description": "Test inline",
	"content": " Try it For Yourself Or open in a new tab here\n"
},
{
	"uri": "/travelgatex/security/authenticating/",
	"title": "Authenticating",
	"tags": [],
	"description": "Learn Platform Security",
	"content": " Introduction Products and Resources are granted to Partners belonging to Organizations.\nAuthorized Partners can manage security rules to allow or deny Resources and Products.\nAuthentication Authentication is the process of authorizing or making sure that the Partner is who is supposed to be. This can be ensured either by login credentials or by API Key.\nEvery request to TravelgateX GraphQL API must carry an Authorization header with a JSON Web Token or API Key inside.\nJSON Web Tokens API Keys Creating an access token For development purposes please use the following test Api KeyÂ q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ\nAuthorization Once the Partner is authenticated we must authorize the partner to use the requested Resource.\nRole based access control (RBAC) is the de facto standard for authorization. However, it introduces many complexities for practical applications: roles can be inflexible to change and additional mapping between users and roles must be maintained separately.\nTravelgateX permissions are Resource Group Assigned rules, defined using GraphQL API and determined at runtime by the data graph of the application.\nFurther Reading  https://hackernoon.com/how-do-you-authenticate-mate-f2b70904cc3a   "
},
{
	"uri": "/travelgatex/data-automation/",
	"title": "Data Automation",
	"tags": [],
	"description": "Automate data bulk operations",
	"content": " SFTP     "
},
{
	"uri": "/hotelx/",
	"title": "HotelX",
	"tags": [],
	"description": "",
	"content": "ConnectX Hotel connects you to multiple sellers addding business logic solving most of the problems commonly found in the travel business in an elegant and efficient way.\nThere are no integration investments and you can operate with hundreds of hotel sellers. ConnectX Hotel has been desined to be fast, reliable and offer strong performance.\n\t Overview HotelX Information\n   \t Quickstart Playground Quickstart\n   \t Concepts Understand TravelgateX concepts\n   \t How-to Guides Perform specific tasks\n   \t Plugins Additional logic to your App\n   \t Reference Reference Documentation\n   \t Resources Quotas, release notes\n    "
},
{
	"uri": "/hotelx/howtos/",
	"title": "How-to Guides",
	"tags": [],
	"description": "Perform specific tasks",
	"content": "How-to Guides\n"
},
{
	"uri": "/hotelx/concepts/management-flow/",
	"title": "Management Flow",
	"tags": [],
	"description": "Learn about Management Flow. Cancellations and Booking List",
	"content": " Manage operations can be used in order to operate above Seller\u0026rsquo;s bookings.\nCancel Performs a Seller booking cancellation.\nOperation { \u0026quot;mutation\u0026quot;: { \u0026quot;hotelCancel\u0026quot;: { } } } }  PlayGround Samples  hotelCancel  Booking Performs a Seller booking list or detail.\nOperation { \u0026quot;query\u0026quot;: { \u0026quot;booking\u0026quot;: { \u0026quot;hotel\u0026quot;: { } } } }  PlayGround Samples  booking  "
},
{
	"uri": "/travelgatex/reference/",
	"title": "Reference",
	"tags": [],
	"description": "Reference Documentation",
	"content": " Reference "
},
{
	"uri": "/learning-graphql/thinking_in_graphql/",
	"title": "Thinking in GraphQL",
	"tags": [],
	"description": "",
	"content": " A Paradigm Shift GraphQL is a query language, and as such it does exactly that: it queries servers in order to get results back. And we get to choose exactly what data we want to retrieve. As opposed to JSON, each piece of data has its own type, so we get to know exactly what to expect, it\u0026rsquo;s a typed language. This gives it a lot of predictability, something we can really appreciate, especially when dealing with third party APIs, where we have no control of what\u0026rsquo;s going on in the other side.\nBuilding GraphQL Schemas In GraphQL, the API specifications are called schemas. A GraphQL Schema is like a contract between the client and the server. It\u0026rsquo;s the definition of how they talk to each other, what they expect from each other so each of them can know exactly what they can and cannot send to each other and what they\u0026rsquo;ll get in response to that. This makes a lot of a difference when creating our schemas, we have to get used to think in a Schema First way.\n A particularly interesting pattern seems to be emerging. Over and over again, I hear developers describing a way of approaching product development weâre calling âGraphQL First.âhttps://dev-blog.apollodata.com/graphql-first-a-better-way-to-build-modern-apps-b5a04f7121a0\n First, we model our data, thinking of all the different uses we can give to it. And only then, we\u0026rsquo;ll think of where we going to get it from. It could even be from different services, like a database and another node from a third party provider.\nAnother great feature is that the GraphQL specification ensures we write documentation while writing the schema. Apart from being really cool to see your text in the GraphiQL window while you\u0026rsquo;re typing your query, it really helps you to think of each and every node and why you\u0026rsquo;re putting it there. We use APIs Guru\u0026rsquo;s graphql-faker. In one screen you write the schema, and in the other you try what you\u0026rsquo;ve just written, including the help text or documentation you\u0026rsquo;ve just created.\nFurthermore GraphQL schemas support inheritance, we can use the same objects for different queries. For example, in our business domain, and in most businesses for that matter, we have to return the price of the Hotel, or Flight. We can use exactly the same element in both, and just extend it if needed. This makes the job much easier and faster for the developer who\u0026rsquo;s implementing our service.\nTravelgateX schema implementation follow practices explained here\nBuilding Queries  Componentes de la query Componentes de la respuesta Respuesta Como lo hacemos Paginacion  Building Mutations  Componentes de la query Componentes de la respuesta Respuesta Como lo hacemos Paginacion  TODO: Falta chicha!! "
},
{
	"uri": "/hotelx/concepts/content/",
	"title": "Content",
	"tags": [],
	"description": "Learn about how manage content data to manage in your site. Hotel, Boards, Categories...",
	"content": ""
},
{
	"uri": "/hotelx/plugins/converter/",
	"title": "Exchange",
	"tags": [],
	"description": "Exchange plugins",
	"content": " Aggregator Access  Price Aggregate  Aggregator  Price Aggregate  "
},
{
	"uri": "/flightx/",
	"title": "FlightX",
	"tags": [],
	"description": "",
	"content": "FlightX connects you to multiple sellers addding business logic solving most of the problems commonly found in the travel business in an elegant and efficient way.\nThere are no integration investments and you can operate with hundreds of hotel sellers. FlightX has been desined to be fast, reliable and offer strong performance.\n\t Overview FlightX Information\n    "
},
{
	"uri": "/hotelx/plugins/",
	"title": "Plugins",
	"tags": [],
	"description": "Additional logic to your App",
	"content": " \t Validator Validate plugins\n   \t Mapping Map plugins\n   \t Aggregation Aggregate plugins\n   \t Exchange Exchange plugins\n   \t Markup Markup plugins\n    "
},
{
	"uri": "/statsx/",
	"title": "StatsX",
	"tags": [],
	"description": "",
	"content": " \t Overview StatsX Information\n    "
},
{
	"uri": "/learning-graphql/tooling/",
	"title": "Tooling",
	"tags": [],
	"description": "",
	"content": " Tooling Please find below a collection of tools we\u0026rsquo;ve been using to help us develop in GraphQL. We have curated this list with the different goals each of the tools is for:\nDesigning Schemas We follow the Schema First methodology. There are many tools, the ones we tried and like most nowadays are:\n APIs Guru\u0026rsquo;s graphql-faker: https://github.com/APIs-guru/graphql-faker  TODO: Falta chicha!! Go Packages Nowadays most our APIS are written in Go, mainly because of speed, ability to handle very high load while using low resources. Also because of the ability to develop plugins. We\u0026rsquo;ve used many libraries and packages to help us, hereby our list:\n Redis: https://godoc.org/github.com/garyburd/redigo/redis  TODO: Falta chicha!! NodeJS Packages Other pieces of our software are written in NodeJS. Mainly because some packages are wither not avaialble in Go, or because the Go package is not as performant as the Node alternative. These are the packages we use:\nTODO: Falta chicha!! Schema Visualizers It\u0026rsquo;s nice to be able to see your schema and be able to navigate through it.\n GraphQL Voyager - Represent any GraphQL API as an interactive graph  Documentation Generators Generate beaultiful static documentation sites directly from schema or introspection query\n Graph Docs Graphdoc  GraphQL Clients Build, create and play with queries, it\u0026rsquo;s fun!\n Insomnia: our favorite \u0026#9825; graphql-playground: favorite online client GraphiQL: the original  TODO: Falta chicha!! Big List Very curated list full of different tools, resources, etc\n Awesome GraphQL  "
},
{
	"uri": "/travelgatex/tutorials/",
	"title": "Tutorials",
	"tags": [],
	"description": "Walkthrouhgs of common applications",
	"content": "What you can build on TravelgateX\u0026rsquo;s platform Build An OTA    Build a Dashboard     "
},
{
	"uri": "/mappeax/",
	"title": "MappeaX",
	"tags": [],
	"description": "",
	"content": " \t Overview FlightX Information\n    "
},
{
	"uri": "/hotelx/plugins/markup/",
	"title": "Markup",
	"tags": [],
	"description": "Markup plugins",
	"content": " Processor Access  Markup  "
},
{
	"uri": "/hotelx/reference/",
	"title": "Reference",
	"tags": [],
	"description": "Reference Documentation",
	"content": " Reference "
},
{
	"uri": "/travelgatex/resources/",
	"title": "Resources",
	"tags": [],
	"description": "Quotas, release notes",
	"content": " Release Notes     "
},
{
	"uri": "/learning-graphql/tutorials_resources/",
	"title": "Tutorials &amp; Resources",
	"tags": [],
	"description": "",
	"content": " The GraphQL ecosystem is growing fast. Apart from facebook\u0026rsquo;s and Graphql.org\u0026rsquo;s official documentation, each day as more and more development teams embrace the technology new blog posts, articles, tutorials, videos and learning material in general is published online.\nThis list is intended to serve as a examples we\u0026rsquo;ve used and found useful when adopting the technology. We\u0026rsquo;ve separated between tutorials get-your-hands-dirty full action kind to resources, which are reading materials, podcasts or any other kind of documentation, written or not, which will help you to Think in GraphQL.\nWe hope you enjoy!\nTutorials  https://github.com/blog/2412-learn-graphql-with-github  TODO: Falta chicha!! Resources  GraphQL official documentation Apollo Relay official documentation Schema first development - Johannes Schickling Schema-first development with GraphQL GraphQL First in practice at Quri GraphQL First: A better way to build modern apps  "
},
{
	"uri": "/insightsx/",
	"title": "InsightsX",
	"tags": [],
	"description": "",
	"content": " \t Overview FlightX Information\n    "
},
{
	"uri": "/hotelx/resources/",
	"title": "Resources",
	"tags": [],
	"description": "Quotas, release notes",
	"content": " Resources "
},
{
	"uri": "/learning-graphql/",
	"title": "Learning GraphQL",
	"tags": [],
	"description": "",
	"content": "  GraphQL Overview     Basic Concepts     Thinking in GraphQL     Tooling     Tutorials \u0026amp; Resources     "
},
{
	"uri": "/_footer/",
	"title": "footer",
	"tags": [],
	"description": "",
	"content": "Lorem ipsum dolor sit amet.\n"
},
{
	"uri": "/_header/",
	"title": "header",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/guion/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Getting Started pagetitle = \u0026ldquo;\u0026rdquo; GOAL: informaciÃ³n basica para empezar a desarrollar\nOverview GOAL: Explicar el who, why, how de la plataforma\n WHO: Equipos tecnicos para consumir servicios de travel\n WHY: search \u0026amp; book travel multi-products \u0026amp; multi-source\n WHY: Using the Storefront API, you can:\n HOW: Plataforma: Multi-Producto \u0026amp; Multi-Source\n HOW: Diagrama Platforma\n HOW: UtilizaciÃ³n de GraphQL: EndPoint Ãºnico\n WHY: Fast. Scalable. Reliable.\n Resumen: Ventajas GraphQL\n Get Engaged: comunidad, docuemntaciÃ³n y jira\n CALL2ACTION: Quickstart busqueda hoteles\n  QuickStart GOAL: minimo indispensable para hacer una peticiÃ³n\n INTRO: empezar en 1min   API Key test Ejemplo de bÃºsqueda de ConnectX inline   Product QuickStarts\n CALL2ACTION: Try ConnectX Playground\n  Concepts GOAL: Glosario de conceptos\nINTRO: Explicar pq necesitamos estos conceptos y donde se utilizan\n Partner API Organization Buyer Seller Access Product Permission Plugin  CALL2ACTION: Read More about the Platform\nPlatform GOAL: Como funciona la plataforma a nivel tÃ©cnico\nOverview GOAL: explicar utilizacion de la plataforma con GraphQL\nINTRO: Explica lo que se necesita saber para utilizar un producto, se utiliza como referencia de la documentaciÃ³n de los demÃ¡s productos\n WHO: Developers de empresas de travel que quieran integrarse para comprar/vender productos de travel\n WHY: unificar en 1 API sencilla todos los servicios que se puedan vender o comprar en una empresa de productos turisticos\n WHY: Que puede hacer con la plataforma: \u0026ndash; Fetch data about a single product or a collection of products to display on any website or device. \u0026ndash; Create unique checkout experiences with full control over the shopping cart. \u0026ndash; Connect to more than 600 sellers of travel products. \u0026ndash; Allow customers to search \u0026amp; book through a number of sellers \u0026ndash; Gain complete control of the number and quality of requests sent and received \u0026ndash; Map new sellers to your existing hotel codes\n HOW: implementaciÃ³n API en GraphQL\n HOW: como funciona? \u0026ndash; HOW: breve explicaciÃ³n GraphQL \u0026ndash; HOW: endpoint unico \u0026ndash; HOW: GraphQL requests \u0026ndash; HOW: Security \u0026ndash; HOW: Data Automation \u0026ndash; HOW: API Reference \u0026ndash; HOW: Resources \u0026mdash; HOW: Quotas \u0026amp; Limits \u0026mdash; HOW: Release Notes\n  CALL2ACTION: Get Started With our Products\nSecurity GOAL: Explicar en detalle como fuciona INTRO: CONTENIDO:\nData Automation GOAL: INTRO: CONTENIDO:\nAPI Reference GOAL: INTRO: CONTENIDO:\nQuotas \u0026amp; Limits GOAL: INTRO: CONTENIDO:\nRelease Notes GOAL: INTRO: CONTENIDO:\nTutorials TravelB2B Stats Dashboard HotelX GOAL: informaciÃ³n basica para empezar a desarrollar\nOverview GOAL: Explicar el who, why, how de la hotelX\n WHO: Equipos tecnicos para consumir apis de diferentes proveedores de acomodaciÃ³n\n WHY: search \u0026amp; book travel hotels multi-source\n WHY: Using the Storefront API, you can:\n HOW: Plataforma: Multi-Producto \u0026amp; Multi-Source\n HOW: Diagrama Platforma\n HOW: UtilizaciÃ³n de GraphQL: EndPoint Ãºnico\n WHY: Fast. Scalable. Reliable.\n Resumen: Ventajas GraphQL\n Get Engaged: comunidad, docuemntaciÃ³n y jira\n CALL2ACTION: Quickstart busqueda hoteles\n  QuickStart GOAL: minimo indispensable para hacer una peticiÃ³n\n INTRO: empezar en 1min   API Key test Ejemplo de bÃºsqueda de ConnectX inline   Product QuickStarts\n CALL2ACTION: Try ConnectX Playground\n  Concepts GOAL: Glosario de conceptos\nINTRO: Explicar pq necesitamos estos conceptos y donde se utilizan\n Partner API Organization Buyer Seller Access Product Permission Plugin  CALL2ACTION: Read More about the Platform\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/credits/",
	"title": "Credits",
	"tags": [],
	"description": "contributors and packages used by hugo-theme-docdock",
	"content": " github contributors .ghContributors{ display:flex; flex-flow: wrap; align-content: flex-start } .ghContributors  div{ width: 50% ; display: inline-flex; margin-bottom: 5px; } .ghContributors  div label{ padding-left: 4px ; } .ghContributors  div span{ font-size: x-small; padding-left: 4px ; }   @vjeantet 225 commits   @matcornic 49 commits   @W-Floyd 24 commits   @gwleclerc 21 commits   @lierdakil 16 commits   @Pilskalns 12 commits   @SiamKreative 6 commits   @jose-oc 6 commits   @Xipas 5 commits   @altinnadmin 4 commits   @FMuro 2 commits   @Thiht 2 commits   @EnigmaCurry 2 commits   @adamlamar 1 commits   @byzheng 1 commits   @zivbk1 1 commits   @vielmetti 1 commits   @erikjasiak 1 commits   @giuliov 1 commits   @farmergreg 1 commits   @tarpdalton 1 commits   @JohnBlood 1 commits   @kamilchm 1 commits   @ripienaar 1 commits   @shazic 1 commits   @viertaxa 1 commits   @uweschaefer 1 commits   @justin-yan 1 commits   @karlmacklin 1 commits   @petzi53 1 commits   @remi31000 1 commits   @xxxtonixxx 1 commits   Other contributors  @bep supports and advices   Packages and libraries  Bootstrap - front-end framework mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services\u0026hellip; JavaScript-autoComplete - An extremely lightweight and powerful vanilla JavaScript completion suggester. clipboard.js - copy text to clipboard highlight.js - Javascript syntax highlighter modernizr - A JavaScript toolkit that allows web developers to use new CSS3 and HTML5 features while maintaining a fine level of control over browsers that don\u0026rsquo;t support reveal-js - The HTML Presentation Framework  Tooling  Netlify - Continuous deployement and hosting of this documentation Hugo    "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/",
	"title": "TravelgateX Documentation",
	"tags": [],
	"description": "",
	"content": ""
}]