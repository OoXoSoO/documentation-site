<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TravelgateX Documentation</title>
    <link>/</link>
    <description>Recent content on TravelgateX Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 Apr 2017 18:36:24 +0200</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Accesses, Suppliers and Context</title>
      <link>/product/connectx/hotel/concepts/accesses-supplier-context/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/product/connectx/hotel/concepts/accesses-supplier-context/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Authentication</title>
      <link>/admin/security/authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/admin/security/authentication/</guid>
      <description>Authentication Authentication allows you to know who is the current user, to log user in and to register new users.
Every request to travelgateX GraphQL API may contain a Authorization header with a JSON Web Token or API Key inside.
JSON Web Tokens API Keys Creating an access token For development purposes you can use ApikeyÂ q8ggxpoVDW76Kw918hwnnRvxlZmAP2QZ</description>
    </item>
    
    <item>
      <title>Common Resources</title>
      <link>/admin/resources/common-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/admin/resources/common-resources/</guid>
      <description> Suppliers Each and every supplier works in a different way. Most are old, legacy SOAP APIs, very few are RESTful APIs and none of them is GraphQL. We have developed them all, and suffered learned from all of them.
We connect seemlessly to more than 600 suppliers.
Accesses Each supplier can be accessed in different ways.
Context </description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/graphql-api/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/graphql-api/overview/</guid>
      <description>The basic idea of travelgateX GraphQL API is to provide a single entry point to manage all products.
travelgateX follow some conventions about schema definition:
 Relay schema requirements Definition of custom scalar types  </description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/plattform/overview/plattform-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/plattform/overview/plattform-overview/</guid>
      <description>TravelgateX offers a set of Products ready to be integrated using a single GraphQL endpoint.
GraphQL API TravelgateX is the first-in-the-industry travel API completely based in GraphQL. Most travel APIs are old legacy XML Soap APIs. We know that, because we&amp;rsquo;ve integrated too many of them. The problems with that technology are well-known and we won&amp;rsquo;t get into details here. One of the things we really like about GraphQL, is that each client is ultimately responsible over what it wants to be returned.</description>
    </item>
    
    <item>
      <title>Quickstart Using Playground</title>
      <link>/product/connectx/hotel/quickstarts/using-playground/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/product/connectx/hotel/quickstarts/using-playground/</guid>
      <description>This page shows you how to perform basic hotel book using GraphQL Playground.
Before you begin  Follow the steps in Creating an access token to create your API Key. Check connectivity for your API Key. Open Sample Playground and modify HTTP HEADERS field Authorization with your API Key.  Search Hotel  Click on search tab Modify Query Variables with valid dates and send the request.  Quote Hotel  Click on quote tab In Query Variables modify optionRefId with option id value returned in search response and send the request.</description>
    </item>
    
    <item>
      <title>What&#39;s ConnectX</title>
      <link>/product/connectx/what-is-connectx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/product/connectx/what-is-connectx/</guid>
      <description>What&amp;rsquo;s ConnectX? ConnectX is the ultimate connectivity solution, it not only connects you to multiple suppliers, but also adds business logic solving most of the problems commonly found in the travel business in an elegant and efficient way.
 Each and every layer discribed in the this figure is explained as follows:
GraphQL Gateway ConnectX is the first-in-the-industry travel API completely based in GraphQL. Most travel APIs are old legacy XML Soap APIs.</description>
    </item>
    
    <item>
      <title>Authorization</title>
      <link>/admin/security/authorization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/admin/security/authorization/</guid>
      <description>Authorization An important part of the security of your application is authorization. You need to control what data which users can access in your app.
Role based access control (RBAC) is the de facto standard for authorization. However, it introduces many complexities for practical applications: roles can be inflexible to change and additional mapping between users and roles must be maintained separately.
TravelgateX permissions are Resource Group Assigned rules, defined using GraphQL API and make use of the data graph of the application the determine access at runtime.</description>
    </item>
    
    <item>
      <title>GraphQL Overview</title>
      <link>/learning-graphql/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/learning-graphql/overview/</guid>
      <description>A query language for your API Designed by Facebook, GraphQL is a new way of dealing and managing APIs, specially useful for decoupling client&amp;rsquo;s from server&amp;rsquo;s logic.
Straight from the horse&amp;rsquo;s mouth:  A GraphQL query is a string that is sent to a server to be interpreted and fulfilled, which then returns JSON back to the client. Lee Byron, Facebook
 Official Definition  GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data.</description>
    </item>
    
    <item>
      <title>Basic Concepts</title>
      <link>/learning-graphql/basic_concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/learning-graphql/basic_concepts/</guid>
      <description>Queries and Mutations  At its simplest, GraphQL is about asking for specific fields on objects. Let&amp;rsquo;s start by looking at a very simple query and the result we get when we run it http://graphql.org/learn/queries/?utm_source=docs.travelgatex.com
 There are 2 basic operations in GraphQL schemas:
Queries http://graphql.org/learn/queries/?utm_source=docs.travelgatex.com Just like a RESTful Get method, queries query the system. This operation reads values from the server using a Graph Object and gets a JSON as a response.</description>
    </item>
    
    <item>
      <title>Book Transactions</title>
      <link>/product/connectx/hotel/concepts/book-transactions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/product/connectx/hotel/concepts/book-transactions/</guid>
      <description>Search, Quote and Book transactions must be executed sequentally in order to book hotel rooms in a supplier.
Search Performs an hotel availability search over 1 or more supplier accesses
Depending supplier, search operations implitiy use supplier&amp;rsquo;s cache.
Operation { &amp;quot;query&amp;quot;: { &amp;quot;search&amp;quot;: { &amp;quot;hotel&amp;quot;: { } } } }  PlayGround Samples  search  Quote Performs an hotel quote over an option returned in Search Response.
Operation { &amp;quot;query&amp;quot;: { &amp;quot;quote&amp;quot;: { &amp;quot;hotel&amp;quot;: { } } } }  PlayGround Samples  quote  Book Performs a book or reservation over an option returned in Quote Response</description>
    </item>
    
    <item>
      <title>Relay</title>
      <link>/graphql-api/relay/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/graphql-api/relay/</guid>
      <description>TravelgateX uses Relay schema requirements for own Resources. Other resources, like supplier search response, are not modeled with Relay practices.
Relay helps travelgateX API in order to standarize:
 Standards for querying paginated collections (&amp;ldquo;Connections&amp;rdquo; and &amp;ldquo;Edges&amp;rdquo;) Identifying objects directly from the root of a query (avoiding long nested queries) Provide mutation input data  </description>
    </item>
    
    <item>
      <title>Custom Scalar Types</title>
      <link>/graphql-api/custom-scalar-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/graphql-api/custom-scalar-types/</guid>
      <description>TravelgateX GraphQL schema implementation defines custom scalar types.
JSON Sometimes it&amp;rsquo;s necessary to manage arbitrary JSON values for loosely structured data. The JSON type makes sure that it is actually valid JSON and returns the value as a parsed JSON object/array instead of a string.
In queries or mutations, JSON fields have to be specified with enclosing double quotes. Special characters have to be escaped: &amp;quot;{\&amp;quot;int\&amp;quot;: 1, \&amp;quot;string\&amp;quot;: \&amp;quot;value\&amp;quot;}&amp;quot;.</description>
    </item>
    
    <item>
      <title>Operative Transactions</title>
      <link>/product/connectx/hotel/concepts/operative-transactions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/product/connectx/hotel/concepts/operative-transactions/</guid>
      <description> Operative transactions can be used in order to operate above supplier&amp;rsquo;s bookings.
Cancel Performs a supplier booking cancellation.
Operation { &amp;quot;mutation&amp;quot;: { &amp;quot;hotelCancel&amp;quot;: { } } } }  PlayGround Samples  hotelCancel  Booking Performs a supplier booking list or detail.
Operation { &amp;quot;query&amp;quot;: { &amp;quot;booking&amp;quot;: { &amp;quot;hotel&amp;quot;: { } } } }  PlayGround Samples  booking  </description>
    </item>
    
    <item>
      <title>Thinking in GraphQL</title>
      <link>/learning-graphql/thinking_in_graphql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/learning-graphql/thinking_in_graphql/</guid>
      <description>A Paradigm Shift GraphQL is not a drop-in-replacement for REST APIs. It has to make sense to use it, it&amp;rsquo;s not a one size-fits-all technology.
In order to determine if it is the right tool for the job or not, we have to learn how to Think in GraphQL. GraphQL is a query language, and as such it does exactly that: it queries servers in order to get results back.</description>
    </item>
    
    <item>
      <title>Using the API</title>
      <link>/graphql-api/travelgatex-graphql-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/graphql-api/travelgatex-graphql-api/</guid>
      <description>Authenticating To communicate with the GraphQL server, you&amp;rsquo;ll need an access token with the right scopes.
This access token could be an API Key or a JSON Web Token, and the correct way to send it to GraphQL server is via HTTP Header:
 API key:Â &amp;quot;Authorization: Apikey xxxxxxxxx&amp;quot; JWT: &amp;quot;Authorization: Bearer xxxxxxxxx&amp;quot;  Follow the steps in Creating an access token to create a token.
GraphQL Endpoint Single endpoint which remains constant no matter what operation you perform: https://api.</description>
    </item>
    
    <item>
      <title>Data Transactions</title>
      <link>/product/connectx/hotel/concepts/data-transactions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/product/connectx/hotel/concepts/data-transactions/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Plugins</title>
      <link>/product/connectx/hotel/concepts/plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/product/connectx/hotel/concepts/plugins/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tooling</title>
      <link>/learning-graphql/tooling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/learning-graphql/tooling/</guid>
      <description>Tooling Please find below a collection of tools we&amp;rsquo;ve been using to help us develop in GraphQL. We have curated this list with the different goals each of the tools is for:
Designing Schemas We follow the Schema First methodology. There are many tools, the ones we tried and like most nowadays are:
 APIs Guru&amp;rsquo;s graphql-faker: https://github.com/APIs-guru/graphql-faker  TODO: Falta chicha!! Go Packages Nowadays most our APIS are written in Go, mainly because of speed, ability to handle very high load while using low resources.</description>
    </item>
    
    <item>
      <title>Tutorials &amp; Resources</title>
      <link>/learning-graphql/tutorials_resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/learning-graphql/tutorials_resources/</guid>
      <description>The GraphQL ecosystem is growing fast. Apart from facebook&amp;rsquo;s and Graphql.org&amp;rsquo;s official documentation, each day as more and more development teams embrace the technology new blog posts, articles, tutorials, videos and learning material in general is published online.
This list is intended to serve as a examples we&amp;rsquo;ve used and found useful when adopting the technology. We&amp;rsquo;ve separated between tutorials get-your-hands-dirty full action kind to resources, which are reading materials, podcasts or any other kind of documentation, written or not, which will help you to Think in GraphQL.</description>
    </item>
    
    <item>
      <title>footer</title>
      <link>/_footer/</link>
      <pubDate>Mon, 24 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>/_footer/</guid>
      <description>Lorem ipsum dolor sit amet.</description>
    </item>
    
    <item>
      <title>header</title>
      <link>/_header/</link>
      <pubDate>Mon, 24 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>/_header/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Credits</title>
      <link>/credits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/credits/</guid>
      <description>github contributors .ghContributors{ display:flex; flex-flow: wrap; align-content: flex-start } .ghContributors  div{ width: 50% ; display: inline-flex; margin-bottom: 5px; } .ghContributors  div label{ padding-left: 4px ; } .ghContributors  div span{ font-size: x-small; padding-left: 4px ; }   @vjeantet 225 commits   @matcornic 49 commits   @W-Floyd 24 commits   @gwleclerc 21 commits   @lierdakil 16 commits   @Pilskalns 12 commits   @SiamKreative 6 commits   @jose-oc 6 commits   @Xipas 5 commits   @altinnadmin 4 commits   @FMuro 2 commits   @Thiht 2 commits   @EnigmaCurry 2 commits   @adamlamar 1 commits   @byzheng 1 commits   @zivbk1 1 commits   @vielmetti 1 commits   @erikjasiak 1 commits   @giuliov 1 commits   @farmergreg 1 commits   @tarpdalton 1 commits   @JohnBlood 1 commits   @kamilchm 1 commits   @ripienaar 1 commits   @shazic 1 commits   @viertaxa 1 commits   @uweschaefer 1 commits   @justin-yan 1 commits   @karlmacklin 1 commits   @petzi53 1 commits   @remi31000 1 commits   @xxxtonixxx 1 commits   Other contributors  @bep supports and advices   Packages and libraries  Bootstrap - front-end framework mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services&amp;hellip; JavaScript-autoComplete - An extremely lightweight and powerful vanilla JavaScript completion suggester.</description>
    </item>
    
  </channel>
</rss>