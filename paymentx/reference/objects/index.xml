<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Objects on TravelgateX Documentation</title>
    <link>/paymentx/reference/objects/</link>
    <description>Recent content in Objects on TravelgateX Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/paymentx/reference/objects/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ExpireDate</title>
      <link>/paymentx/reference/objects/expiredate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/expiredate/</guid>
      <description>The card expiration date
GraphQL schema definition type ExpireDate {month: Int! year: Int! Show deprecated fields}window.onload = _ = {const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0];if (deprecatedContainer.children.length) {const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0];list.style.display = &#39;block&#39;;console.log(list.style);}}Fields month(Int!):Month MMyear(Int!):Year yy
Required by PaymentCard: Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information</description>
    </item>
    
    <item>
      <title>ExternalMessage</title>
      <link>/paymentx/reference/objects/externalmessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/externalmessage/</guid>
      <description>GraphQL schema definition type ExternalMessage {code: String message: String! Show deprecated fields}window.onload = _ = {const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0];if (deprecatedContainer.children.length) {const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0];list.style.display = &#39;block&#39;;console.log(list.style);}}Fields code(String):External Codemessage(String!):External Message
Required by AdviseMessage: List of advise messages.</description>
    </item>
    
    <item>
      <title>Holder</title>
      <link>/paymentx/reference/objects/holder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/holder/</guid>
      <description>Holder object that contains the occupant&amp;rsquo;s (pax&amp;rsquo;s) name and surname.
GraphQL schema definition type Holder {name: String! surname: String! Show deprecated fields}window.onload = _ = {const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0];if (deprecatedContainer.children.length) {const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0];list.style.display = &#39;block&#39;;console.log(list.style);}}Fields name(String!):Holder&amp;#39;s namesurname(String!):Holder&amp;#39;s surname
Required by PaymentCard: Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information</description>
    </item>
    
    <item>
      <title>PageInfo</title>
      <link>/paymentx/reference/objects/pageinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/pageinfo/</guid>
      <description>GraphQL schema definition type PageInfo {hasNextPage: Boolean! hasPreviousPage: Boolean! startCursor: String! endCursor: String! Show deprecated fields}window.onload = _ = {const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0];if (deprecatedContainer.children.length) {const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0];list.style.display = &#39;block&#39;;console.log(list.style);}}Fields hasNextPage(Boolean!):hasPreviousPage(Boolean!):startCursor(String!):endCursor(String!):</description>
    </item>
    
    <item>
      <title>PaymentCard</title>
      <link>/paymentx/reference/objects/paymentcard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/paymentcard/</guid>
      <description>Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information
GraphQL schema definition type PaymentCard {cardType: String! holder: Holder! number: CardNumber! CVC: CVC! expire: ExpireDate! Show deprecated fields}window.onload = _ = {const deprecatedContainer = document.</description>
    </item>
    
    <item>
      <title>PaymentXBookingInfo</title>
      <link>/paymentx/reference/objects/paymentxbookinginfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/paymentxbookinginfo/</guid>
      <description>GraphQL schema definition type PaymentXBookingInfo {organization: String! pointOfSale: PointOfSale! bookingReference: String! checkOut: Date! checkIn: Date! Show deprecated fields}window.onload = _ = {const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0];if (deprecatedContainer.children.length) {const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0];list.style.display = &#39;block&#39;;console.log(list.style);}}Fields organization(String!):Responsible organization of the booked property.</description>
    </item>
    
    <item>
      <title>PointOfSale</title>
      <link>/paymentx/reference/objects/pointofsale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/pointofsale/</guid>
      <description>GraphQL schema definition type PointOfSale {code: ID! pointOfSaleData: PointOfSaleData createdAt: DateTime! updatedAt: DateTime! adviseMessage(level: [AdviseMessageLevel],): [AdviseMessage!] Show deprecated fields}window.onload = _ = {const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0];if (deprecatedContainer.children.length) {const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0];list.style.display = &#39;block&#39;;console.log(list.style);}}Fields code(ID!):pointOfSaleData(PointOfSaleData):createdAt(DateTime!</description>
    </item>
    
    <item>
      <title>PointOfSaleData</title>
      <link>/paymentx/reference/objects/pointofsaledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/pointofsaledata/</guid>
      <description>GraphQL schema definition type PointOfSaleData {code: ID! name: String Show deprecated fields}window.onload = _ = {const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0];if (deprecatedContainer.children.length) {const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0];list.style.display = &#39;block&#39;;console.log(list.style);}}Fields code(ID!):POS Identifiername(String):POS Name
Required by PointOfSale:</description>
    </item>
    
    <item>
      <title>ServiceStatus</title>
      <link>/paymentx/reference/objects/servicestatus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/servicestatus/</guid>
      <description>Indicates the status of the service
GraphQL schema definition type ServiceStatus {code: String type: String description: String Show deprecated fields}window.onload = _ = {const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0];if (deprecatedContainer.children.length) {const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0];list.style.display = &#39;block&#39;;console.log(list.style);}}Fields code(String):Status codetype(String):Status typedescription(String):Status description</description>
    </item>
    
    <item>
      <title>StoredCard</title>
      <link>/paymentx/reference/objects/storedcard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/storedcard/</guid>
      <description>GraphQL schema definition type StoredCard {code: ID! storedCardData: StoredCardData createdAt: DateTime! updatedAt: DateTime! adviseMessage(level: [AdviseMessageLevel],): [AdviseMessage!] Show deprecated fields}window.onload = _ = {const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0];if (deprecatedContainer.children.length) {const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0];list.style.display = &#39;block&#39;;console.log(list.style);}}Fields code(ID!):storedCardData(StoredCardData):createdAt(DateTime!</description>
    </item>
    
    <item>
      <title>StoredCardConnection</title>
      <link>/paymentx/reference/objects/storedcardconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/storedcardconnection/</guid>
      <description>GraphQL schema definition type StoredCardConnection {edges: [StoredCardEdge] pageInfo: PageInfo! Show deprecated fields}window.onload = _ = {const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0];if (deprecatedContainer.children.length) {const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0];list.style.display = &#39;block&#39;;console.log(list.style);}}Fields edges([StoredCardEdge]):pageInfo(PageInfo!):
Required by PaymentXQuery:</description>
    </item>
    
    <item>
      <title>StoredCardData</title>
      <link>/paymentx/reference/objects/storedcarddata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/storedcarddata/</guid>
      <description>GraphQL schema definition type StoredCardData {bookingInfo: PaymentXBookingInfo! card: PaymentCard! Show deprecated fields}window.onload = _ = {const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0];if (deprecatedContainer.children.length) {const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0];list.style.display = &#39;block&#39;;console.log(list.style);}}Fields bookingInfo(PaymentXBookingInfo!):card(PaymentCard!):
Required by StoredCard:</description>
    </item>
    
    <item>
      <title>StoredCardEdge</title>
      <link>/paymentx/reference/objects/storedcardedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/paymentx/reference/objects/storedcardedge/</guid>
      <description>GraphQL schema definition type StoredCardEdge {cursor: String! node: StoredCard Show deprecated fields}window.onload = _ = {const deprecatedContainer = document.querySelectorAll(&#39;div.deprecated-entities-container&#39;)[0];if (deprecatedContainer.children.length) {const list = document.querySelectorAll(&#39;li.deprecated-button-container&#39;)[0];list.style.display = &#39;block&#39;;console.log(list.style);}}Fields cursor(String!):node(StoredCard):
Required by StoredCardConnection:</description>
    </item>
    
  </channel>
</rss>