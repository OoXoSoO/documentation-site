<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Objects on TravelgateX Documentation</title>
    <link>/travelgatex/reference/objects/</link>
    <description>Recent content in Objects on TravelgateX Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/travelgatex/reference/objects/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>API</title>
      <link>/travelgatex/reference/objects/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/api/</guid>
      <description>GraphQL schema definition type API {  code: ID!    apiData: APIData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!):   apiData(APIData):   error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  
Required by APIEdge:    OperationData:</description>
    </item>
    
    <item>
      <title>APIConnection</title>
      <link>/travelgatex/reference/objects/apiconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/apiconnection/</guid>
      <description>GraphQL schema definition type APIConnection {  edges: [APIEdge]    pageInfo: PageInfo!   }   Fields edges([APIEdge]):   pageInfo(PageInfo!):   
Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  OrganizationData:    GroupCommonData:    GroupData:    ResourceData:    ProductData:</description>
    </item>
    
    <item>
      <title>APIData</title>
      <link>/travelgatex/reference/objects/apidata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/apidata/</guid>
      <description>GraphQL schema definition type APIData {  code: ID!    id: ID!    isEditable: Boolean!    label: String    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    resources(    codes: [ID!</description>
    </item>
    
    <item>
      <title>APIEdge</title>
      <link>/travelgatex/reference/objects/apiedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/apiedge/</guid>
      <description>GraphQL schema definition type APIEdge {  cursor: String!    node: API   }   Fields cursor(String!):   node(API):   
Required by APIConnection:</description>
    </item>
    
    <item>
      <title>Access</title>
      <link>/travelgatex/reference/objects/access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/access/</guid>
      <description>An Access is a set of credentials and configuration in order to access the system of a Supplier.
GraphQL schema definition type Access {  code: ID!    accessData: AccessData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!):   accessData(AccessData):   error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!</description>
    </item>
    
    <item>
      <title>AccessConnection</title>
      <link>/travelgatex/reference/objects/accessconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/accessconnection/</guid>
      <description>GraphQL schema definition type AccessConnection {  edges: [AccessEdge]    pageInfo: PageInfo!   }   Fields edges([AccessEdge]):   pageInfo(PageInfo!):   
Required by OrganizationData:    GroupCommonData:    GroupData:    SupplierData:</description>
    </item>
    
    <item>
      <title>AccessData</title>
      <link>/travelgatex/reference/objects/accessdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/accessdata/</guid>
      <description>GraphQL schema definition type AccessData {  name: String!    isActive: Boolean!    code: ID!    supplier: Supplier!    isTest: Boolean!    user: String    password: String    urls: Urls    parameters: [Parameter]    markets: [String!]    rateRules: [RateRulesType!]    shared: Access   }   Fields name(String!</description>
    </item>
    
    <item>
      <title>AccessEdge</title>
      <link>/travelgatex/reference/objects/accessedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/accessedge/</guid>
      <description>GraphQL schema definition type AccessEdge {  cursor: String!    node: Access   }   Fields cursor(String!):   node(Access):   
Required by AccessConnection:</description>
    </item>
    
    <item>
      <title>AddOn</title>
      <link>/travelgatex/reference/objects/addon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/addon/</guid>
      <description>Additional information about the option
GraphQL schema definition type AddOn {  key: String!    value: JSON!   }   Fields key(String!): Contains keyword/ID to identify the AddOn.  value(JSON!): Contains AddOn values.</description>
    </item>
    
    <item>
      <title>AddOns</title>
      <link>/travelgatex/reference/objects/addons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/addons/</guid>
      <description>Additional information about the option
GraphQL schema definition type AddOns {  distribute: JSON    distribution: [AddOn!]   }   Fields distribute(JSON): Extra information from the distribution layer  distribution([AddOn!]): Extra information from the distribution layer  
Required by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description  HotelOptionQuote:  Contains information about quote(s)  HotelBookingDetail:  Contains information about booking</description>
    </item>
    
    <item>
      <title>AdminMutation</title>
      <link>/travelgatex/reference/objects/adminmutation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/adminmutation/</guid>
      <description>The admin query root of TravelgateX&amp;rsquo;s for implementing GraphQL mutations.
GraphQL schema definition type AdminMutation {  a: Boolean    createOrganization( organization: CreateOrganizationInput!, ): Organization!    createMember( member: CreateMemberInput!, ): Member!    createGroup( group: CreateGroupInput!, ): Group!    updateMember( member: UpdateMemberInput!, ): Member!    updateGroup( group: UpdateGroupInput!, method: Method!, ): Group!    deleteMember( member: [DeleteMemberInput!]!, ): Member!    deleteGroup( group: DeleteGroupInput!</description>
    </item>
    
    <item>
      <title>AdminQuery</title>
      <link>/travelgatex/reference/objects/adminquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/adminquery/</guid>
      <description>The admin query root of TravelgateX&amp;rsquo;s GraphQL interface.
GraphQL schema definition type AdminQuery {  jwt: JWT    organizations(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): OrganizationConnection!    products(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): ProductConnection!</description>
    </item>
    
    <item>
      <title>Amenity</title>
      <link>/travelgatex/reference/objects/amenity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/amenity/</guid>
      <description>An Amenity is defined as something intended to make life more pleasant or comfortable for people. Examples include: swimming pools, shopping centers, etc.
GraphQL schema definition type Amenity {  code: String!    type: ApplicationAreaType!    texts( languages: [Language!], ): [Text!]!   }   Fields code(String!): Code  type(ApplicationAreaType!): Indicates the type of Amenity.  texts([Text!]!): Contains the descriptive</description>
    </item>
    
    <item>
      <title>AuditData</title>
      <link>/travelgatex/reference/objects/auditdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/auditdata/</guid>
      <description>Data sent and received in the supplierâ€™s native format.
GraphQL schema definition type AuditData {  transactions: [Transactions!]!    timeStamp: DateTime!    processTime: Float!   }   Fields transactions([Transactions!]!): List of transactions data  timeStamp(DateTime!): TimeStamp  processTime(Float!): Process time in milliseconds (ms)  
Required by HotelSearch:  Results from Avail Hotel; contains all the available options for a given date and itinerary  Response:    HotelQuote:    HotelBooking:    HotelBookPayload:    HotelCancelPayload:</description>
    </item>
    
    <item>
      <title>Bed</title>
      <link>/travelgatex/reference/objects/bed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/bed/</guid>
      <description>Contains information about a bed.
GraphQL schema definition type Bed {  type: String    description: String    count: Int    shared: Boolean   }   Fields type(String): Specifies the bed type  description(String): Description about the bed  count(Int): Indicates number of beds in a room  shared(Boolean): Specifies if the bed is shared or not</description>
    </item>
    
    <item>
      <title>Board</title>
      <link>/travelgatex/reference/objects/board/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/board/</guid>
      <description>Board type.
GraphQL schema definition type Board {  code: ID!    boardData: BoardData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!): Board ID  boardData(BoardData): Board data  error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  
Required by BoardEdge:  BoardList Edge definition</description>
    </item>
    
    <item>
      <title>BoardConnection</title>
      <link>/travelgatex/reference/objects/boardconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/boardconnection/</guid>
      <description>BoardList definition
GraphQL schema definition type BoardConnection {  edges: [BoardEdge]    pageInfo: PageInfo!   }   Fields edges([BoardEdge]):   pageInfo(PageInfo!): Indicates info about page</description>
    </item>
    
    <item>
      <title>BoardData</title>
      <link>/travelgatex/reference/objects/boarddata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/boarddata/</guid>
      <description>Board data
GraphQL schema definition type BoardData {  code: ID!    boardCode: String!    texts( languages: [Language!], ): [Text!]   }   Fields code(ID!): Internal code for checking availability  boardCode(String!): Code of the hotel in the Supplier selected  texts([Text!]): Label  
Required by Board:  Board type.</description>
    </item>
    
    <item>
      <title>BoardEdge</title>
      <link>/travelgatex/reference/objects/boardedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/boardedge/</guid>
      <description>BoardList Edge definition
GraphQL schema definition type BoardEdge {  cursor: String!    node: Board   }   Fields cursor(String!):   node(Board):   
Required by BoardConnection:  BoardList definition</description>
    </item>
    
    <item>
      <title>Booking</title>
      <link>/travelgatex/reference/objects/booking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/booking/</guid>
      <description>Returns detailed information about books.
GraphQL schema definition type Booking {  hotel( criteria: HotelCriteriaBookingInput!, settings: HotelSettingsInput, ): HotelBooking   }   Fields hotel(HotelBooking): Returns detailed information about books, you can indicated a list of locators or a range date.  
Required by Query:  The query root of TravelgateX&amp;#39;s GraphQL interface.</description>
    </item>
    
    <item>
      <title>BookingHotel</title>
      <link>/travelgatex/reference/objects/bookinghotel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/bookinghotel/</guid>
      <description>GraphQL schema definition type BookingHotel {  creationDate: Date    checkIn: Date    checkOut: Date    hotelCode: String    hotelName: String    boardCode: String    occupancies: [Occupancy!]    rooms: [BookingRoom!]   }   Fields creationDate(Date): Creation date of the booking. Format: YYYY-MM-DD  checkIn(Date): Check-in date for booking Format: YYYY-MM-DD  checkOut(Date): Check-out date for the booking.</description>
    </item>
    
    <item>
      <title>BookingRoom</title>
      <link>/travelgatex/reference/objects/bookingroom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/bookingroom/</guid>
      <description>GraphQL schema definition type BookingRoom {  occupancyRefId: Int    code: String    description: String    price: Price   }   Fields occupancyRefId(Int): ID reference to the occupancy  code(String): Indicates the room code  description(String): Description about the room  price(Price): Total price for all days.</description>
    </item>
    
    <item>
      <title>BusinessRules</title>
      <link>/travelgatex/reference/objects/businessrules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/businessrules/</guid>
      <description>List of business rules for filtering options based on your interests.
GraphQL schema definition type BusinessRules {  optionsQuota: Int!    businessRulesType: BusinessRulesType!   }   Fields optionsQuota(Int!): Options quota per availability; numbers of options based on availability  businessRulesType(BusinessRulesType!): Different business rules for filtering options that you are interested in  
Required by DefaultSettings:</description>
    </item>
    
    <item>
      <title>CancelPenalty</title>
      <link>/travelgatex/reference/objects/cancelpenalty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/cancelpenalty/</guid>
      <description>Contains information for cancellation penalities..
GraphQL schema definition type CancelPenalty {  hoursBefore: Int!    penaltyType: CancelPenaltyType!    currency: Currency!    value: Float!   }   Fields hoursBefore(Int!): Cancellation fees applicable X number of hours before the check-in date  penaltyType(CancelPenaltyType!): Type of penalty; this can be Nights, Percent or Import  currency(Currency!): Currency used in the cancellation policy  value(Float!): Value of the cancellation policy</description>
    </item>
    
    <item>
      <title>CancelPolicy</title>
      <link>/travelgatex/reference/objects/cancelpolicy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/cancelpolicy/</guid>
      <description>Information about a policy cancellation.
GraphQL schema definition type CancelPolicy {  refundable: Boolean!    cancelPenalties: [CancelPenalty!]   }   Fields refundable(Boolean!): Indicates if the option is refundable or non-refundable  cancelPenalties([CancelPenalty!]): List of cancellation penalties  
Required by HotelOptionSearch:  An option includes hotel information, meal plan, total price, conditions and room description  HotelOptionQuote:  Contains information about quote(s)  HotelBookingDetail:  Contains information about booking</description>
    </item>
    
    <item>
      <title>Category</title>
      <link>/travelgatex/reference/objects/category/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/category/</guid>
      <description>Category Type
GraphQL schema definition type Category {  code: ID!    categoryData: CategoryData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!): Category ID  categoryData(CategoryData): Category data  error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  
Required by CategoryEdge:  CategoryList Edge definition</description>
    </item>
    
    <item>
      <title>CategoryConnection</title>
      <link>/travelgatex/reference/objects/categoryconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/categoryconnection/</guid>
      <description>CategoryList definition
GraphQL schema definition type CategoryConnection {  edges: [CategoryEdge]    pageInfo: PageInfo!   }   Fields edges([CategoryEdge]):   pageInfo(PageInfo!): Indicates info about page</description>
    </item>
    
    <item>
      <title>CategoryData</title>
      <link>/travelgatex/reference/objects/categorydata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/categorydata/</guid>
      <description>Category data
GraphQL schema definition type CategoryData {  code: ID!    categoryCode: String!    texts( languages: [Language!], ): [Text!]   }   Fields code(ID!): Internal code for checking availability  categoryCode(String!): Code of the hotel based on the Supplier selected  texts([Text!]): Label  
Required by Category:  Category Type</description>
    </item>
    
    <item>
      <title>CategoryEdge</title>
      <link>/travelgatex/reference/objects/categoryedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/categoryedge/</guid>
      <description>CategoryList Edge definition
GraphQL schema definition type CategoryEdge {  cursor: String!    node: Category   }   Fields cursor(String!):   node(Category):   
Required by CategoryConnection:  CategoryList definition</description>
    </item>
    
    <item>
      <title>Client</title>
      <link>/travelgatex/reference/objects/client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/client/</guid>
      <description>Client identifies who is making the request and holds the configuration assigned to it.
GraphQL schema definition type Client {  code: ID!    clientData: ClientData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!):   clientData(ClientData):   error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated</description>
    </item>
    
    <item>
      <title>ClientConnection</title>
      <link>/travelgatex/reference/objects/clientconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/clientconnection/</guid>
      <description>GraphQL schema definition type ClientConnection {  edges: [ClientEdge]    pageInfo: PageInfo!   }   Fields edges([ClientEdge]):   pageInfo(PageInfo!):   
Required by OrganizationData:    GroupCommonData:    GroupData:</description>
    </item>
    
    <item>
      <title>ClientData</title>
      <link>/travelgatex/reference/objects/clientdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/clientdata/</guid>
      <description>GraphQL schema definition type ClientData {  code: ID!    name: String!    isActive: Boolean!   }   Fields code(ID!): ID identifier of a Client  name(String!): Client complete name  isActive(Boolean!): Indicates whether a Client is active or inactive  
Required by Client:  Client identifies who is making the request and holds the configuration assigned to it.</description>
    </item>
    
    <item>
      <title>ClientEdge</title>
      <link>/travelgatex/reference/objects/clientedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/clientedge/</guid>
      <description>GraphQL schema definition type ClientEdge {  cursor: String!    node: Client   }   Fields cursor(String!):   node(Client):   
Required by ClientConnection:</description>
    </item>
    
    <item>
      <title>ConnectUser</title>
      <link>/travelgatex/reference/objects/connectuser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/connectuser/</guid>
      <description>Data related to a connected user and its groups
GraphQL schema definition type ConnectUser {  code: String!    isActive: Boolean!    connectUserGroups: [ConnectUserGroup!]   }   Fields code(String!): Unique connected user of a supplier  isActive(Boolean!): Indicates whether a connected user is active  connectUserGroups([ConnectUserGroup!]): Connected user&amp;#39;s related data based on its groups</description>
    </item>
    
    <item>
      <title>ConnectUserGroup</title>
      <link>/travelgatex/reference/objects/connectusergroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/connectusergroup/</guid>
      <description>group related to a connect user
GraphQL schema definition type ConnectUserGroup {  groupCode: String!    isActive: Boolean!   }   Fields groupCode(String!): Group code of the group related to this connected user  isActive(Boolean!): Indicates if the connect user is active for its connected user</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>/travelgatex/reference/objects/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/contact/</guid>
      <description>Contact Data.
GraphQL schema definition type Contact {  email: String    telephone: String    fax: String    web: URI   }   Fields email(String): Email  telephone(String): Telephone  fax(String): Fax  web(URI): Web  
Required by HotelData:  Hotel data</description>
    </item>
    
    <item>
      <title>Context</title>
      <link>/travelgatex/reference/objects/context/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/context/</guid>
      <description>Context type. Currently, only Code is necessary.
GraphQL schema definition type Context {  code: ID!    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!):   error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated</description>
    </item>
    
    <item>
      <title>Coordinates</title>
      <link>/travelgatex/reference/objects/coordinates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/coordinates/</guid>
      <description>Geographical coordinates corresponding to a location.
GraphQL schema definition type Coordinates {  latitude: Float!    longitude: Float!   }   Fields latitude(Float!): Latitude  longitude(Float!): Longitude  
Required by Location:  Indicates the location of the hotel</description>
    </item>
    
    <item>
      <title>CriteriaSearch</title>
      <link>/travelgatex/reference/objects/criteriasearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/criteriasearch/</guid>
      <description>Search criteria contains destination, travel dates and the number of pax in each room.
GraphQL schema definition type CriteriaSearch {  checkIn: Date!    checkOut: Date!    hotels: [String!]!    occupancies: [RoomCriteria!]!    language: Language    currency: Currency    nationality: Country    market: String!   }   Fields checkIn(Date!): Check-in date for booking Format: YYYY-MM-DD  checkOut(Date!</description>
    </item>
    
    <item>
      <title>DefaultSettings</title>
      <link>/travelgatex/reference/objects/defaultsettings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/defaultsettings/</guid>
      <description>GraphQL schema definition type DefaultSettings {  connectUser: String    context: String    language: Language!    currency: Currency!    nationality: Country!    market: String    timeouts: Timeout!    businessRules: BusinessRules!   }   Fields connectUser(String): This field is occurs only if the authorization header is of the type JWT.. It is used for to change the user that has been set by default in the preload.</description>
    </item>
    
    <item>
      <title>Description</title>
      <link>/travelgatex/reference/objects/description/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/description/</guid>
      <description>Object description indicates the type and the description about something.
GraphQL schema definition type Description {  type: DescriptionType!    texts: [Text!]   }   Fields type(DescriptionType!): Indicates type of description  texts([Text!]): Label</description>
    </item>
    
    <item>
      <title>Destination</title>
      <link>/travelgatex/reference/objects/destination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/destination/</guid>
      <description>Destination Type
GraphQL schema definition type Destination {  code: ID!    destinationData: DestinationData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!): Destination ID  destinationData(DestinationData): Destination data  error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  
Required by DestinationEdge:  DestinationList Edge definition</description>
    </item>
    
    <item>
      <title>DestinationConnection</title>
      <link>/travelgatex/reference/objects/destinationconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/destinationconnection/</guid>
      <description>DestinationList definition
GraphQL schema definition type DestinationConnection {  edges: [DestinationEdge]    token: String!    pageInfo: PageInfo!   }   Fields edges([DestinationEdge]):   token(String!):   pageInfo(PageInfo!): Indicates info about page</description>
    </item>
    
    <item>
      <title>DestinationData</title>
      <link>/travelgatex/reference/objects/destinationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/destinationdata/</guid>
      <description>Information about destinantion
GraphQL schema definition type DestinationData {  code: ID!    available: Boolean!    destinationLeaf: [String!]    texts( languages: [Language!], ): [Text!]!    closestDestinations: [String!]    parent: String    type: DestinationType   }   Fields code(ID!): Destination Code  available(Boolean!): Indicates if you can search by destination  destinationLeaf([String!]): Returns destination leafs of the destination.</description>
    </item>
    
    <item>
      <title>DestinationEdge</title>
      <link>/travelgatex/reference/objects/destinationedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/destinationedge/</guid>
      <description>DestinationList Edge definition
GraphQL schema definition type DestinationEdge {  cursor: String!    node: Destination   }   Fields cursor(String!):   node(Destination):   
Required by DestinationConnection:  DestinationList definition</description>
    </item>
    
    <item>
      <title>Entity</title>
      <link>/travelgatex/reference/objects/entity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/entity/</guid>
      <description>GraphQL schema definition type Entity {  code: ID!    entity: EntityData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!):   entity(EntityData):   adviseMessage([AdviseMessage!]): List of messages  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  
Required by EntityEdge:</description>
    </item>
    
    <item>
      <title>EntityConnection</title>
      <link>/travelgatex/reference/objects/entityconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/entityconnection/</guid>
      <description>GraphQL schema definition type EntityConnection {  edges: [EntityEdge]    pageInfo: PageInfo!   }   Fields edges([EntityEdge]):   pageInfo(PageInfo!):   
Required by ProfileData:  Profile data</description>
    </item>
    
    <item>
      <title>EntityEdge</title>
      <link>/travelgatex/reference/objects/entityedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/entityedge/</guid>
      <description>GraphQL schema definition type EntityEdge {  cursor: String!    node: Entity   }   Fields cursor(String!):   node(Entity):   
Required by EntityConnection:</description>
    </item>
    
    <item>
      <title>Error</title>
      <link>/travelgatex/reference/objects/error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/error/</guid>
      <description>Application errors
GraphQL schema definition type Error {  code: String!    type: String!    description: String!   }   Fields code(String!): Error code  type(String!): Error type  description(String!): Error description  
Required by GetUploadedFilesResponse:  ## GetUploadedFiles  GetMappeaStatsResponse:    OnlyStatusResponse:  ## Common Items  UploadFileResponse:</description>
    </item>
    
    <item>
      <title>Exchange</title>
      <link>/travelgatex/reference/objects/exchange/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/exchange/</guid>
      <description>Provides information about the currency of original, and its rate applied over the results returned by the Supplier.
GraphQL schema definition type Exchange {  currency: Currency!    rate: Float!   }   Fields currency(Currency!): Provide information about the currency of origin  rate(Float!): Provides information about the rate applied over results  
Required by Price:  Price indicates the value of the room/option. Supplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.</description>
    </item>
    
    <item>
      <title>ExpireDate</title>
      <link>/travelgatex/reference/objects/expiredate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/expiredate/</guid>
      <description>The card expiration date
GraphQL schema definition type ExpireDate {  month: Int!    year: Int!   }   Fields month(Int!): Month MM  year(Int!): Year yy  
Required by PaymentCard:  Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information</description>
    </item>
    
    <item>
      <title>ExternalMessage</title>
      <link>/travelgatex/reference/objects/externalmessage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/externalmessage/</guid>
      <description>GraphQL schema definition type ExternalMessage {  code: String    message: String!   }   Fields code(String): External Code  message(String!): External Message  
Required by AdviseMessage:</description>
    </item>
    
    <item>
      <title>File</title>
      <link>/travelgatex/reference/objects/file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/file/</guid>
      <description>GraphQL schema definition type File {  fileName: String!    fileId: Int!    uploadTime: String!   }   Fields fileName(String!):   fileId(Int!):   uploadTime(String!):   
Required by GetUploadedFilesData:</description>
    </item>
    
    <item>
      <title>GetMappeaStatsData</title>
      <link>/travelgatex/reference/objects/getmappeastatsdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/getmappeastatsdata/</guid>
      <description>GraphQL schema definition type GetMappeaStatsData {  supplierMapped: String    startTime: String    endTime: String    organizationHotels: Int    contextHotels: Int    suggestedHotels: Int   }   Fields supplierMapped(String):   startTime(String):   endTime(String):   organizationHotels(Int):   contextHotels(Int):   suggestedHotels(Int):   
Required by GetMappeaStatsResponse:</description>
    </item>
    
    <item>
      <title>GetMappeaStatsResponse</title>
      <link>/travelgatex/reference/objects/getmappeastatsresponse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/getmappeastatsresponse/</guid>
      <description>GraphQL schema definition type GetMappeaStatsResponse {  data: [GetMappeaStatsData]    error: Error    warnings: [Warning]   }   Fields data([GetMappeaStatsData]):   error(Error):   warnings([Warning]):   
Required by MappeaQuery:</description>
    </item>
    
    <item>
      <title>GetUploadedFilesData</title>
      <link>/travelgatex/reference/objects/getuploadedfilesdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/getuploadedfilesdata/</guid>
      <description> GraphQL schema definition type GetUploadedFilesData {  files: [File]   }   Fields files([File]):   
Required by GetUploadedFilesResponse:  ## GetUploadedFiles   </description>
    </item>
    
    <item>
      <title>GetUploadedFilesResponse</title>
      <link>/travelgatex/reference/objects/getuploadedfilesresponse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/getuploadedfilesresponse/</guid>
      <description>GetUploadedFiles GraphQL schema definition type GetUploadedFilesResponse {  data: GetUploadedFilesData    error: Error    warnings: [Warning]   }   Fields data(GetUploadedFilesData):   error(Error):   warnings([Warning]):   
Required by MappeaQuery:</description>
    </item>
    
    <item>
      <title>Group</title>
      <link>/travelgatex/reference/objects/group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/group/</guid>
      <description>Groups are organized hierarchically.
GraphQL schema definition type Group {  code: ID!    groupData: GroupData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!):   groupData(GroupData):   error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  
Required by GroupEdge:    GroupData:    AdminMutation:  The admin query root of TravelgateX&amp;#39;s for implementing GraphQL mutations.</description>
    </item>
    
    <item>
      <title>GroupAccess</title>
      <link>/travelgatex/reference/objects/groupaccess/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/groupaccess/</guid>
      <description>Pairs of Groups and Accesses. All Accesses returned will belong to all the Groups in groupCodes.
GraphQL schema definition type GroupAccess {  groupCodes: [String!]!    accesses: [Access!]   }   Fields groupCodes([String!]!): Group identifiers  accesses([Access!]):</description>
    </item>
    
    <item>
      <title>GroupConnection</title>
      <link>/travelgatex/reference/objects/groupconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/groupconnection/</guid>
      <description>GraphQL schema definition type GroupConnection {  edges: [GroupEdge]    pageInfo: PageInfo!   }   Fields edges([GroupEdge]):   pageInfo(PageInfo!):   
Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  OrganizationData:    GroupCommonData:    GroupData:    MemberData:    APIData:</description>
    </item>
    
    <item>
      <title>GroupData</title>
      <link>/travelgatex/reference/objects/groupdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/groupdata/</guid>
      <description>GraphQL schema definition type GroupData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    parent: Group    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    owner: Member    isEditable: Boolean!</description>
    </item>
    
    <item>
      <title>GroupEdge</title>
      <link>/travelgatex/reference/objects/groupedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/groupedge/</guid>
      <description>GraphQL schema definition type GroupEdge {  cursor: String!    node: Group   }   Fields cursor(String!):   node(Group):   
Required by GroupConnection:</description>
    </item>
    
    <item>
      <title>Holder</title>
      <link>/travelgatex/reference/objects/holder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/holder/</guid>
      <description>Holder object that contains the occupant&amp;rsquo;s (pax&amp;rsquo;s) name and surname.
GraphQL schema definition type Holder {  name: String!    surname: String!   }   Fields name(String!): Holder&amp;#39;s name  surname(String!): Holder&amp;#39;s surname  
Required by HotelBookingDetail:  Contains information about booking  PaymentCard:  Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information</description>
    </item>
    
    <item>
      <title>Hotel</title>
      <link>/travelgatex/reference/objects/hotel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotel/</guid>
      <description>Hotel Type
GraphQL schema definition type Hotel {  code: ID!    hotelData: HotelData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!): Hotel ID  hotelData(HotelData): Hotel data  error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  
Required by HotelEdge:  HotelList Edge definition</description>
    </item>
    
    <item>
      <title>HotelBookPayload</title>
      <link>/travelgatex/reference/objects/hotelbookpayload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelbookpayload/</guid>
      <description>GraphQL schema definition type HotelBookPayload {  stats( token: String!, ): StatsRequest    auditData: AuditData    booking: HotelBookingDetail    errors: [Error!]    warnings: [Warning!]   }   Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier&amp;#39;s native format.  booking(HotelBookingDetail): Information about booking  errors([Error!]): Errors that abort services  warnings([Warning!]): Potentially harmful situations or errors, but ones that will not forcibly abort the service</description>
    </item>
    
    <item>
      <title>HotelBooking</title>
      <link>/travelgatex/reference/objects/hotelbooking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelbooking/</guid>
      <description>GraphQL schema definition type HotelBooking {  stats( token: String!, ): StatsRequest    auditData: AuditData    bookings: [HotelBookingDetail!]    errors: [Error!]    warnings: [Warning!]   }   Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier&amp;#39;s native format.  bookings([HotelBookingDetail!]): Details about booking  errors([Error!]): Errors that abort services  warnings([Warning!]): Potentially harmful situations or errors, but ones that will not forcibly abort the service</description>
    </item>
    
    <item>
      <title>HotelBookingDetail</title>
      <link>/travelgatex/reference/objects/hotelbookingdetail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelbookingdetail/</guid>
      <description>Contains information about booking
GraphQL schema definition type HotelBookingDetail {  reference: Reference!    holder: Holder    hotel: BookingHotel    price: Price    cancelPolicy: CancelPolicy    remarks: String    status: BookStatusType!    payable: String    addOns: AddOns   }   Fields reference(Reference!): Booking ID in the Supplier&amp;#39;s system  holder(Holder): Holder&amp;#39;s name and surname  hotel(BookingHotel): Information about the hotel.</description>
    </item>
    
    <item>
      <title>HotelCancelDetail</title>
      <link>/travelgatex/reference/objects/hotelcanceldetail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelcanceldetail/</guid>
      <description>Contains information about cancel
GraphQL schema definition type HotelCancelDetail {  reference: Reference    cancelReference: String    status: BookStatusType    price: Price    booking: HotelBookingDetail   }   Fields reference(Reference): Booking ID in the Supplier&amp;#39;s system  cancelReference(String): Cancellation ID in the Supplier&amp;#39;s system  status(BookStatusType): Booking Status.  price(Price): Specifies the prices (Gross, Net and Amount) of the cancellation.</description>
    </item>
    
    <item>
      <title>HotelCancelPayload</title>
      <link>/travelgatex/reference/objects/hotelcancelpayload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelcancelpayload/</guid>
      <description>GraphQL schema definition type HotelCancelPayload {  stats( token: String!, ): StatsRequest    auditData: AuditData    cancellation: HotelCancelDetail    errors: [Error!]    warnings: [Warning!]   }   Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier&amp;#39;s native format.  cancellation(HotelCancelDetail): Information about cancel  errors([Error!]): Errors that abort services  warnings([Warning!]): Potentially harmful situations or errors, but ones that will not forcibly abort the service</description>
    </item>
    
    <item>
      <title>HotelConnection</title>
      <link>/travelgatex/reference/objects/hotelconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelconnection/</guid>
      <description>HotelList definition
GraphQL schema definition type HotelConnection {  edges: [HotelEdge]    token: String    pageInfo: PageInfo!   }   Fields edges([HotelEdge]):   token(String):   pageInfo(PageInfo!): Indicates info about page</description>
    </item>
    
    <item>
      <title>HotelData</title>
      <link>/travelgatex/reference/objects/hoteldata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hoteldata/</guid>
      <description>Hotel data
GraphQL schema definition type HotelData {  code: ID!    hotelCode: String!    hotelCodeSupplier: String    hotelName: String!    categoryCode: String!    property: Property    chainCode: String    exclusiveDeal: Boolean!    location: Location!    contact: Contact    rank: [Int!]!    cardTypes: [String!]    amenities: [Amenity!</description>
    </item>
    
    <item>
      <title>HotelEdge</title>
      <link>/travelgatex/reference/objects/hoteledge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hoteledge/</guid>
      <description>HotelList Edge definition
GraphQL schema definition type HotelEdge {  cursor: String!    node: Hotel   }   Fields cursor(String!):   node(Hotel):   
Required by HotelConnection:  HotelList definition</description>
    </item>
    
    <item>
      <title>HotelOptionQuote</title>
      <link>/travelgatex/reference/objects/hoteloptionquote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hoteloptionquote/</guid>
      <description>Contains information about quote(s)
GraphQL schema definition type HotelOptionQuote {  optionRefId: String!    status: StatusType!    price: Price!    cancelPolicy: CancelPolicy!    remarks: String    surcharges: [Surcharge!]    cardTypes: [String!]    addOns: AddOns   }   Fields optionRefId(String!): Indicates the valuation key  status(StatusType!): The possible values in status in response are Available (OK) or On Request (RQ).</description>
    </item>
    
    <item>
      <title>HotelOptionSearch</title>
      <link>/travelgatex/reference/objects/hoteloptionsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hoteloptionsearch/</guid>
      <description>An option includes hotel information, meal plan, total price, conditions and room description
GraphQL schema definition type HotelOptionSearch {  supplierCode: String!    accessCode: String!    market: String!    hotelCode: String!    hotelCodeSupplier: String!    hotelName: String    boardCode: String!    boardCodeSupplier: String!    paymentType: PaymentType!    status: StatusType!    occupancies: [Occupancy!</description>
    </item>
    
    <item>
      <title>HotelQuote</title>
      <link>/travelgatex/reference/objects/hotelquote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelquote/</guid>
      <description>GraphQL schema definition type HotelQuote {  stats( token: String!, ): StatsRequest    auditData: AuditData    optionQuote: HotelOptionQuote    errors: [Error!]    warnings: [Warning!]   }   Fields stats(StatsRequest): Application stats in string format  auditData(AuditData): Data sent and received in the supplier&amp;#39;s native format.  optionQuote(HotelOptionQuote): Information about quote.  errors([Error!]): Errors that abort services  warnings([Warning!]): Potentially harmful situations or errors, but ones that will not forcibly abort the service</description>
    </item>
    
    <item>
      <title>HotelSearch</title>
      <link>/travelgatex/reference/objects/hotelsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelsearch/</guid>
      <description>Results from Avail Hotel; contains all the available options for a given date and itinerary
GraphQL schema definition type HotelSearch {  context: String    stats( token: String!, ): StatsRequest    auditData: AuditData    requestCriteria: CriteriaSearch    options: [HotelOptionSearch!]    errors: [Error!]    warnings: [Warning!]   }   Fields context(String): Indicates the context of the response.</description>
    </item>
    
    <item>
      <title>HotelXMutation</title>
      <link>/travelgatex/reference/objects/hotelxmutation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxmutation/</guid>
      <description>GraphQL schema definition type HotelXMutation {  a: Boolean    book( input: HotelBookInput!, settings: HotelSettingsInput, ): HotelBookPayload    cancel( input: HotelCancelInput!, settings: HotelSettingsInput, ): HotelCancelPayload    loadFile( input: String!, ): String!   }   Fields a(Boolean):   book(HotelBookPayload): Creates a new hotel booking consisting of an option of 1 or more rooms.  cancel(HotelCancelPayload): Cancels an existing hotel booking consisting of an option of 1 or more rooms.</description>
    </item>
    
    <item>
      <title>HotelXQuery</title>
      <link>/travelgatex/reference/objects/hotelxquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxquery/</guid>
      <description>GraphQL schema definition type HotelXQuery {  a: Boolean    search(    token: String,     criteria: HotelCriteriaSearchInput,     settings: HotelSettingsInput,     filter: FilterInput,     ): HotelSearch    quote( criteria: HotelCriteriaQuoteInput!, settings: HotelSettingsInput, ): HotelQuote    booking( criteria: HotelCriteriaBookingInput!, settings: HotelSettingsInput, ): HotelBooking    searchStatusService: ServiceStatus!    quoteStatusService: ServiceStatus!</description>
    </item>
    
    <item>
      <title>Location</title>
      <link>/travelgatex/reference/objects/location/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/location/</guid>
      <description>Indicates the location of the hotel
GraphQL schema definition type Location {  address: String    city: String    zipCode: String    country: Country!    coordinates: Coordinates    closestDestination: DestinationData!   }   Fields address(String): Contains Hotel Address  city(String): Contains the city  zipCode(String): Contains the zipCode.  country(Country!): Country where is the Hotel.  coordinates(Coordinates): Geographical coordinates corresponding to a location.</description>
    </item>
    
    <item>
      <title>Map</title>
      <link>/travelgatex/reference/objects/map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/map/</guid>
      <description>Map codes.
GraphQL schema definition type Map {  code: String!    maps: [String!]   }   Fields code(String!): Context code.  maps([String!]): Equivalences of the supplier for the client code.</description>
    </item>
    
    <item>
      <title>MappeaMutation</title>
      <link>/travelgatex/reference/objects/mappeamutation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/mappeamutation/</guid>
      <description>GraphQL schema definition type MappeaMutation {  a: Boolean    confirmUpload( input: MappeaConfirmUploadInput!, ): OnlyStatusResponse!    uploadFile( input: MappeaUploadFileInput!, ): UploadFileResponse!    mapSupplier( input: MappeaMapSupplierInput!, ): OnlyStatusResponse!   }   Fields a(Boolean):   confirmUpload(OnlyStatusResponse!):   uploadFile(UploadFileResponse!):   mapSupplier(OnlyStatusResponse!):   
Required by Mutation:  The root query for implementing GraphQL mutations. Mutations are operations that change or update data on the server</description>
    </item>
    
    <item>
      <title>MappeaQuery</title>
      <link>/travelgatex/reference/objects/mappeaquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/mappeaquery/</guid>
      <description>GraphQL schema definition type MappeaQuery {  a: Boolean    getUploadedFiles: GetUploadedFilesResponse!    getMappeaStats( input: MappeaGetMappeaStatsInput!, ): GetMappeaStatsResponse!   }   Fields a(Boolean):   getUploadedFiles(GetUploadedFilesResponse!):   getMappeaStats(GetMappeaStatsResponse!):   
Required by Query:  The query root of TravelgateX&amp;#39;s GraphQL interface.</description>
    </item>
    
    <item>
      <title>Mapping</title>
      <link>/travelgatex/reference/objects/mapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/mapping/</guid>
      <description>Returns the mapping for a group.
GraphQL schema definition type Mapping {  contexts( codes: [String!], ): [MappingContext!]    errors: [Error!]    warnings: [Warning!]   }   Fields contexts([MappingContext!]): Returns the differents group contexts, you can filter by some contexts.  errors([Error!]): Errors that abort services  warnings([Warning!]): Potentially harmful situations or errors that won&amp;#39;t force the service to abort  
Required by Query:  The query root of TravelgateX&amp;#39;s GraphQL interface.</description>
    </item>
    
    <item>
      <title>MappingContext</title>
      <link>/travelgatex/reference/objects/mappingcontext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/mappingcontext/</guid>
      <description>Returns the differents group contexts
GraphQL schema definition type MappingContext {  code: String!    hotels( codes: [String!], ): [MappingEntity!]    rooms( codes: [String!], ): [MappingEntity!]    boards( codes: [String!], ): [MappingEntity!]   }   Fields code(String!): Code of the context  hotels([MappingEntity!]): Mapping of hotels, you can filter by hotel code.  rooms([MappingEntity!]): Mapping of rooms, you can filter by room code.</description>
    </item>
    
    <item>
      <title>MappingEntity</title>
      <link>/travelgatex/reference/objects/mappingentity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/mappingentity/</guid>
      <description>Mapping about client codes with the equivalence per supplier.
GraphQL schema definition type MappingEntity {  code: String!    contexts( codes: [String!], ): [Map!]   }   Fields code(String!): Client code  contexts([Map!]): You can filter by output context.</description>
    </item>
    
    <item>
      <title>Markup</title>
      <link>/travelgatex/reference/objects/markup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/markup/</guid>
      <description>Informs markup applied over supplier price.
GraphQL schema definition type Markup {  channel: String    currency: Currency!    binding: Boolean!    net: Float!    gross: Float    exchange: Exchange!    rules: [Rule!]!   }   Fields channel(String): channel of markup application.  currency(Currency!): Currency code indicating which currency should be paid. This information is mandatory.</description>
    </item>
    
    <item>
      <title>Media</title>
      <link>/travelgatex/reference/objects/media/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/media/</guid>
      <description>Contains media information.
GraphQL schema definition type Media {  code: String    order: String    type: ApplicationAreaType!    updatedAt: DateTime!    url: URI!    texts( languages: [Language!], ): [Text!]   }   Fields code(String): Code.  order(String): Indicates the order priority.  type(ApplicationAreaType!): Indicates the type of the media.  updatedAt(DateTime!): Date updated.  url(URI!): Url.  texts([Text!</description>
    </item>
    
    <item>
      <title>Member</title>
      <link>/travelgatex/reference/objects/member/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/member/</guid>
      <description>You grant access to members which can be either: Users: A developer, administrator or any other person from your Organization who interacts with the TravelgateX Platform. An email address can be used as the identity of a User. Service Accounts: An application (Client) instead of an individual User. If you prefer, you can create as many Service Accounts as needed to represent different logical components of your application.
GraphQL schema definition type Member {  code: ID!</description>
    </item>
    
    <item>
      <title>MemberConnection</title>
      <link>/travelgatex/reference/objects/memberconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/memberconnection/</guid>
      <description>GraphQL schema definition type MemberConnection {  edges: [MemberEdge]    pageInfo: PageInfo!   }   Fields edges([MemberEdge]):   pageInfo(PageInfo!):   
Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  OrganizationData:    GroupCommonData:    GroupData:</description>
    </item>
    
    <item>
      <title>MemberData</title>
      <link>/travelgatex/reference/objects/memberdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/memberdata/</guid>
      <description>GraphQL schema definition type MemberData {  id: ID!    code: ID!    label: String    type: MemberType!    groups(    codes: [ID!],     type: GroupType,     first: Int,     last: Int,     before: String,     after: String,     ): GroupConnection    roles(    codes: [ID!</description>
    </item>
    
    <item>
      <title>MemberEdge</title>
      <link>/travelgatex/reference/objects/memberedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/memberedge/</guid>
      <description>GraphQL schema definition type MemberEdge {  cursor: String!    node: Member   }   Fields cursor(String!):   node(Member):   
Required by MemberConnection:</description>
    </item>
    
    <item>
      <title>Occupancy</title>
      <link>/travelgatex/reference/objects/occupancy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/occupancy/</guid>
      <description>Information about occupancy.
GraphQL schema definition type Occupancy {  id: Int!    paxes: [Pax!]!   }   Fields id(Int!): Unique ID room in this option.  paxes([Pax!]!): List of pax of this occupancy.</description>
    </item>
    
    <item>
      <title>OnlyStatusResponse</title>
      <link>/travelgatex/reference/objects/onlystatusresponse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/onlystatusresponse/</guid>
      <description>Common Items GraphQL schema definition type OnlyStatusResponse {  error: Error    warnings: [Warning]   }   Fields error(Error):   warnings([Warning]):   
Required by MappeaMutation:</description>
    </item>
    
    <item>
      <title>Operation</title>
      <link>/travelgatex/reference/objects/operation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/operation/</guid>
      <description>GraphQL schema definition type Operation {  code: ID!    operationData: OperationData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!):   operationData(OperationData):   error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  
Required by OperationEdge:    OperationDetailed:  Stats information per operation</description>
    </item>
    
    <item>
      <title>OperationConnection</title>
      <link>/travelgatex/reference/objects/operationconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/operationconnection/</guid>
      <description>GraphQL schema definition type OperationConnection {  edges: [OperationEdge]    pageInfo: PageInfo!   }   Fields edges([OperationEdge]):   pageInfo(PageInfo!):   
Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  APIData:</description>
    </item>
    
    <item>
      <title>OperationData</title>
      <link>/travelgatex/reference/objects/operationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/operationdata/</guid>
      <description>GraphQL schema definition type OperationData {  id: ID!    code: ID!    label: String    types: [OperationType!]!    api: API   }   Fields id(ID!):   code(ID!):   label(String):   types([OperationType!]!):   api(API):   
Required by Operation:</description>
    </item>
    
    <item>
      <title>OperationDetailed</title>
      <link>/travelgatex/reference/objects/operationdetailed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/operationdetailed/</guid>
      <description>Stats information per operation
GraphQL schema definition type OperationDetailed {  operation: Operation!    totalHits: Int!    detailedHits( type: [StatsInfoTypes!], code: [Int!], ): [StatsInfo!]    cache: Boolean!   }   Fields operation(Operation!): Operation information  totalHits(Int!): Total hits.  detailedHits([StatsInfo!]): Hits grouped depending on their status  cache(Boolean!): Responsible for the execution of the this stats. If TRUE then cache, else client</description>
    </item>
    
    <item>
      <title>OperationEdge</title>
      <link>/travelgatex/reference/objects/operationedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/operationedge/</guid>
      <description>GraphQL schema definition type OperationEdge {  cursor: String!    node: Operation   }   Fields cursor(String!):   node(Operation):   
Required by OperationConnection:</description>
    </item>
    
    <item>
      <title>Organization</title>
      <link>/travelgatex/reference/objects/organization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/organization/</guid>
      <description>Organization node is the root node in the hierarachy, the folders are the children of the organization and the products are the children of the folders.
GraphQL schema definition type Organization {  code: ID!    organizationData: OrganizationData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!):   organizationData(OrganizationData):   error([Error!]): Errors that abort services  createdAt(DateTime!</description>
    </item>
    
    <item>
      <title>OrganizationConnection</title>
      <link>/travelgatex/reference/objects/organizationconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/organizationconnection/</guid>
      <description>GraphQL schema definition type OrganizationConnection {  edges: [OrganizationEdge]    pageInfo: PageInfo!   }   Fields edges([OrganizationEdge]):   pageInfo(PageInfo!):   
Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.</description>
    </item>
    
    <item>
      <title>OrganizationData</title>
      <link>/travelgatex/reference/objects/organizationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/organizationdata/</guid>
      <description>GraphQL schema definition type OrganizationData {  id: ID!    code: ID!    label: String    type: GroupType!    info: String    children(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     type: GroupType,     codeStartsWith: String,     ): GroupConnection    owner: Member    isEditable: Boolean!</description>
    </item>
    
    <item>
      <title>OrganizationEdge</title>
      <link>/travelgatex/reference/objects/organizationedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/organizationedge/</guid>
      <description>GraphQL schema definition type OrganizationEdge {  cursor: String!    node: Organization   }   Fields cursor(String!):   node(Organization):   
Required by OrganizationConnection:</description>
    </item>
    
    <item>
      <title>PageInfo</title>
      <link>/travelgatex/reference/objects/pageinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/pageinfo/</guid>
      <description>GraphQL schema definition type PageInfo {  hasNextPage: Boolean!    hasPreviousPage: Boolean!    startCursor: String!    endCursor: String!   }   Fields hasNextPage(Boolean!):   hasPreviousPage(Boolean!):   startCursor(String!):   endCursor(String!):   
Required by OrganizationConnection:    GroupConnection:    RoleConnection:    ResourceConnection:    APIConnection:    OperationConnection:    MemberConnection:    AccessConnection:    SupplierConnection:    ClientConnection:    ProductConnection:    StoredCardConnection:    StatsConnection:    EntityConnection:    PointOfSaleConnection:    ProfileConnection:    BoardConnection:  BoardList definition  CategoryConnection:  CategoryList definition  DestinationConnection:  DestinationList definition  HotelConnection:  HotelList definition  RoomConnection:  RoomList definition</description>
    </item>
    
    <item>
      <title>Parameter</title>
      <link>/travelgatex/reference/objects/parameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/parameter/</guid>
      <description>Parameters for additional information for the supplier&amp;rsquo;s configuration.
GraphQL schema definition type Parameter {  key: ID!    value: String!   }   Fields key(ID!): Contains the keyword/Id to identify a parameter. This information is mandatory.  value(String!): Contains the parameter values. This information is mandatory.  
Required by AccessData:</description>
    </item>
    
    <item>
      <title>Pax</title>
      <link>/travelgatex/reference/objects/pax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/pax/</guid>
      <description>Specifies the age pax. The range of what is considered an adult, infant or baby is particular to each supplier.
GraphQL schema definition type Pax {  age: Int!   }   Fields age(Int!): Specifies the age pax.</description>
    </item>
    
    <item>
      <title>PaymentCard</title>
      <link>/travelgatex/reference/objects/paymentcard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/paymentcard/</guid>
      <description>Input PaymentCard, if the payment is done by credit card, is it mandatory to specify the payment type and the credit card information
GraphQL schema definition type PaymentCard {  cardType: String!    holder: Holder!    number: CardNumber!    CVC: CVC!    expire: ExpireDate!   }   Fields cardType(String!): Indicates the card type.  holder(Holder!): Contains owner&amp;#39;s name  number(CardNumber!</description>
    </item>
    
    <item>
      <title>PaymentXBookingInfo</title>
      <link>/travelgatex/reference/objects/paymentxbookinginfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/paymentxbookinginfo/</guid>
      <description>GraphQL schema definition type PaymentXBookingInfo {  organization: String!    pointOfSale: PointOfSale!    bookingReference: String!    checkOut: Date!    checkIn: Date!   }   Fields organization(String!): Responsible organization of the booked property.  pointOfSale(PointOfSale!):   bookingReference(String!): Indicates the referece of the booking  checkOut(Date!): Check-out, booking date Format: YYYY-MM-DD  checkIn(Date!): Check-in, booking date Format: YYYY-MM-DD</description>
    </item>
    
    <item>
      <title>PaymentXMutation</title>
      <link>/travelgatex/reference/objects/paymentxmutation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/paymentxmutation/</guid>
      <description>GraphQL schema definition type PaymentXMutation {  a: Boolean    storeCard( input: PaymentXStoreCardInput!, ): StoredCard!    deleteCard( input: PaymentXBookingInfoDeleteInput!, ): StoredCard!   }   Fields a(Boolean):   storeCard(StoredCard!): Store Card  deleteCard(StoredCard!): Delete Card  
Required by Mutation:  The root query for implementing GraphQL mutations. Mutations are operations that change or update data on the server</description>
    </item>
    
    <item>
      <title>PaymentXQuery</title>
      <link>/travelgatex/reference/objects/paymentxquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/paymentxquery/</guid>
      <description>GraphQL schema definition type PaymentXQuery {  a: Boolean    vaultStatusService: ServiceStatus!    cards( bookingInfo: PaymentXBookingInfoFilterInput!, ): StoredCardConnection!   }   Fields a(Boolean):   vaultStatusService(ServiceStatus!): Returns status of the search service.  cards(StoredCardConnection!):   
Required by Query:  The query root of TravelgateX&amp;#39;s GraphQL interface.</description>
    </item>
    
    <item>
      <title>PointOfSale</title>
      <link>/travelgatex/reference/objects/pointofsale/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/pointofsale/</guid>
      <description>GraphQL schema definition type PointOfSale {  code: ID!    pointOfSaleData: PointOfSaleData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   }   Fields code(ID!):   pointOfSaleData(PointOfSaleData):   createdAt(DateTime!): Create date  updatedAt(DateTime!): Update date  adviseMessage([AdviseMessage!]): List of messages  
Required by PaymentXBookingInfo:    PointOfSaleEdge:</description>
    </item>
    
    <item>
      <title>PointOfSaleConnection</title>
      <link>/travelgatex/reference/objects/pointofsaleconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/pointofsaleconnection/</guid>
      <description>GraphQL schema definition type PointOfSaleConnection {  edges: [PointOfSaleEdge]    pageInfo: PageInfo!   }   Fields edges([PointOfSaleEdge]):   pageInfo(PageInfo!):</description>
    </item>
    
    <item>
      <title>PointOfSaleData</title>
      <link>/travelgatex/reference/objects/pointofsaledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/pointofsaledata/</guid>
      <description>GraphQL schema definition type PointOfSaleData {  code: ID!    name: String   }   Fields code(ID!): POS Identifier  name(String): POS Name  
Required by PointOfSale:</description>
    </item>
    
    <item>
      <title>PointOfSaleEdge</title>
      <link>/travelgatex/reference/objects/pointofsaleedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/pointofsaleedge/</guid>
      <description>GraphQL schema definition type PointOfSaleEdge {  cursor: String!    node: PointOfSale   }   Fields cursor(String!):   node(PointOfSale):   
Required by PointOfSaleConnection:</description>
    </item>
    
    <item>
      <title>Price</title>
      <link>/travelgatex/reference/objects/price/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/price/</guid>
      <description>Price indicates the value of the room/option. Supplements and/or surcharges can be included into the price, and will be verified with nodes Supplements/Surcharges.
GraphQL schema definition type Price {  currency: Currency!    binding: Boolean!    net: Float!    gross: Float    exchange: Exchange!    markups: [Markup!]   }   Fields currency(Currency!): Currency code indicating which currency should be paid.</description>
    </item>
    
    <item>
      <title>PriceBreakdown</title>
      <link>/travelgatex/reference/objects/pricebreakdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/pricebreakdown/</guid>
      <description>Information about daily price.
GraphQL schema definition type PriceBreakdown {  effectiveDate: Date!    expireDate: Date!    price: Price!   }   Fields effectiveDate(Date!): Start date in which the price becomes effective.  expireDate(Date!): Expire date of price.  price(Price!): Specifies the daily price.</description>
    </item>
    
    <item>
      <title>Product</title>
      <link>/travelgatex/reference/objects/product/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/product/</guid>
      <description>An APIs collection.
GraphQL schema definition type Product {  code: ID!    productData: ProductData!    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!):   productData(ProductData!):   error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  
Required by ProductEdge:</description>
    </item>
    
    <item>
      <title>ProductConnection</title>
      <link>/travelgatex/reference/objects/productconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/productconnection/</guid>
      <description>GraphQL schema definition type ProductConnection {  edges: [ProductEdge]    pageInfo: PageInfo!   }   Fields edges([ProductEdge]):   pageInfo(PageInfo!):   
Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  OrganizationData:</description>
    </item>
    
    <item>
      <title>ProductData</title>
      <link>/travelgatex/reference/objects/productdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/productdata/</guid>
      <description>GraphQL schema definition type ProductData {  id: ID!    code: ID!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection   }   Fields id(ID!):   code(ID!):   label(String):   apis(APIConnection): A Product has many APIs</description>
    </item>
    
    <item>
      <title>ProductEdge</title>
      <link>/travelgatex/reference/objects/productedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/productedge/</guid>
      <description>GraphQL schema definition type ProductEdge {  cursor: String!    node: Product   }   Fields cursor(String!):   node(Product):   
Required by ProductConnection:</description>
    </item>
    
    <item>
      <title>Profile</title>
      <link>/travelgatex/reference/objects/profile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/profile/</guid>
      <description>GraphQL schema definition type Profile {  code: ID!    profileData: ProfileData    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!):   profileData(ProfileData):   adviseMessage([AdviseMessage!]): List of messages  createdAt(DateTime!): Create date  updatedAt(DateTime!): Update date  
Required by ProfileEdge:</description>
    </item>
    
    <item>
      <title>ProfileConnection</title>
      <link>/travelgatex/reference/objects/profileconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/profileconnection/</guid>
      <description>GraphQL schema definition type ProfileConnection {  edges: [ProfileEdge]    pageInfo: PageInfo!   }   Fields edges([ProfileEdge]):   pageInfo(PageInfo!):</description>
    </item>
    
    <item>
      <title>ProfileData</title>
      <link>/travelgatex/reference/objects/profiledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/profiledata/</guid>
      <description>Profile data
GraphQL schema definition type ProfileData {  code: ID!    label: String    entities: EntityConnection   }   Fields code(ID!): Profile Identifier  label(String): Profile label  entities(EntityConnection): Profile Entities (suppliers/clients)  
Required by Profile:</description>
    </item>
    
    <item>
      <title>ProfileEdge</title>
      <link>/travelgatex/reference/objects/profileedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/profileedge/</guid>
      <description>GraphQL schema definition type ProfileEdge {  cursor: String!    node: Profile   }   Fields cursor(String!):   node(Profile):   
Required by ProfileConnection:</description>
    </item>
    
    <item>
      <title>Promotion</title>
      <link>/travelgatex/reference/objects/promotion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/promotion/</guid>
      <description>Information about room promotions(offers).
GraphQL schema definition type Promotion {  code: String!    name: String    effectiveDate: Date    expireDate: Date   }   Fields code(String!): Specifies the promotion code.  name(String): Specifies the promotion name.  effectiveDate(Date): Promotion effective date.  expireDate(Date): Promotion expire date.</description>
    </item>
    
    <item>
      <title>Property</title>
      <link>/travelgatex/reference/objects/property/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/property/</guid>
      <description>Indicates Property type
GraphQL schema definition type Property {  name: String    code: String   }   Fields name(String): Indicates property type  code(String): Indicates property type code  
Required by HotelData:  Hotel data</description>
    </item>
    
    <item>
      <title>Provider</title>
      <link>/travelgatex/reference/objects/provider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/provider/</guid>
      <description>Temporary type to use only during SQL server&amp;rsquo;s lifetime
GraphQL schema definition type Provider {  code: ID!    name: String!    isActive: Boolean    isPublic: Boolean   }   Fields code(ID!):   name(String!):   isActive(Boolean):   isPublic(Boolean):   
Required by SupplierData:</description>
    </item>
    
    <item>
      <title>Quote</title>
      <link>/travelgatex/reference/objects/quote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/quote/</guid>
      <description> Returns the total price and cancellation policies of the Option selected in the previous step (Search).
GraphQL schema definition type Quote {  hotel( criteria: HotelCriteriaQuoteInput!, settings: HotelSettingsInput, ): HotelQuote   }   Fields hotel(HotelQuote): Returns the total price and cancellation policies of the Option selected in the previous step (Search).  
Required by Query:  The query root of TravelgateX&amp;#39;s GraphQL interface.   </description>
    </item>
    
    <item>
      <title>RatePlan</title>
      <link>/travelgatex/reference/objects/rateplan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/rateplan/</guid>
      <description>Information about the rate of the option returned.
GraphQL schema definition type RatePlan {  code: String!    name: String    effectiveDate: Date    expireDate: Date   }   Fields code(String!): Specifies the rate code.  name(String): Specifies the rate name.  effectiveDate(Date): Start date in which the rate becomes effective.  expireDate(Date): Expire date of the rate.</description>
    </item>
    
    <item>
      <title>Ratios</title>
      <link>/travelgatex/reference/objects/ratios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/ratios/</guid>
      <description>Ratios details
GraphQL schema definition type Ratios {  lookToQuote: Int!    lookToBook: Int!    quoteToBook: Int!   }   Fields lookToQuote(Int!): Searches needed to do a quote  lookToBook(Int!): Searches needed to do a booking  quoteToBook(Int!): Quotes needed to do a booking  
Required by StatsData:</description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>/travelgatex/reference/objects/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/reference/</guid>
      <description>Contains reference codes.
GraphQL schema definition type Reference {  client: String    supplier: String   }   Fields client(String): Client reference booking  supplier(String): Supplier reference booking  
Required by HotelBookingDetail:  Contains information about booking  HotelCancelDetail:  Contains information about cancel</description>
    </item>
    
    <item>
      <title>Resort</title>
      <link>/travelgatex/reference/objects/resort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/resort/</guid>
      <description>Contains information about the Resort.
GraphQL schema definition type Resort {  code: String!    name: String    description: String   }   Fields code(String!): Specifies the resort code.  name(String): Specifies the resort name.  description(String): Specifies the resort description.  
Required by Supplement:  Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.</description>
    </item>
    
    <item>
      <title>Resource</title>
      <link>/travelgatex/reference/objects/resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/resource/</guid>
      <description>Resources are those used in APIs and Products.
GraphQL schema definition type Resource {  code: ID!    resourceData: ResourceData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!):   resourceData(ResourceData):   error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  
Required by ResourceEdge:</description>
    </item>
    
    <item>
      <title>ResourceConnection</title>
      <link>/travelgatex/reference/objects/resourceconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/resourceconnection/</guid>
      <description>GraphQL schema definition type ResourceConnection {  edges: [ResourceEdge]    pageInfo: PageInfo!   }   Fields edges([ResourceEdge]):   pageInfo(PageInfo!):   
Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  RoleData:    APIData:</description>
    </item>
    
    <item>
      <title>ResourceData</title>
      <link>/travelgatex/reference/objects/resourcedata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/resourcedata/</guid>
      <description>GraphQL schema definition type ResourceData {  id: ID!    code: ID!    isEditable: Boolean!    label: String    apis(    codes: [ID!],     first: Int,     last: Int,     before: String,     after: String,     ): APIConnection    roles(    codes: [ID!</description>
    </item>
    
    <item>
      <title>ResourceEdge</title>
      <link>/travelgatex/reference/objects/resourceedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/resourceedge/</guid>
      <description>GraphQL schema definition type ResourceEdge {  cursor: String!    node: Resource   }   Fields cursor(String!):   node(Resource):   
Required by ResourceConnection:</description>
    </item>
    
    <item>
      <title>Role</title>
      <link>/travelgatex/reference/objects/role/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/role/</guid>
      <description>Permissions determine what operations are allowed on a resource
GraphQL schema definition type Role {  code: ID!    roleData: RoleData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!):   roleData(RoleData):   error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  
Required by RoleEdge:</description>
    </item>
    
    <item>
      <title>RoleConnection</title>
      <link>/travelgatex/reference/objects/roleconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roleconnection/</guid>
      <description>GraphQL schema definition type RoleConnection {  edges: [RoleEdge]    pageInfo: PageInfo!   }   Fields edges([RoleEdge]):   pageInfo(PageInfo!):   
Required by AdminQuery:  The admin query root of TravelgateX&amp;#39;s GraphQL interface.  GroupData:    MemberData:    ResourceData:</description>
    </item>
    
    <item>
      <title>RoleData</title>
      <link>/travelgatex/reference/objects/roledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roledata/</guid>
      <description>GraphQL schema definition type RoleData {  id: ID!    code: ID!    type: RoleType!    isEditable: Boolean!    label: String    isCreate: Boolean!    isRead: Boolean!    isUpdate: Boolean!    isDelete: Boolean!    isEnable: Boolean!    isExecutable: Boolean!    isSpecial: Boolean!    special: String    resources(    codes: [ID!</description>
    </item>
    
    <item>
      <title>RoleEdge</title>
      <link>/travelgatex/reference/objects/roleedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roleedge/</guid>
      <description>GraphQL schema definition type RoleEdge {  cursor: String!    node: Role   }   Fields cursor(String!):   node(Role):   
Required by RoleConnection:</description>
    </item>
    
    <item>
      <title>Room</title>
      <link>/travelgatex/reference/objects/room/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/room/</guid>
      <description>Contains the room information of the option returned.
GraphQL schema definition type Room {  occupancyRefId: Int!    code: String!    description: String    refundable: Boolean    units: Int    roomPrice: RoomPrice!    beds: [Bed!]    ratePlans: [RatePlan!]    promotions: [Promotion!]   }   Fields occupancyRefId(Int!): ID reference to the occupancy  code(String!</description>
    </item>
    
    <item>
      <title>RoomConnection</title>
      <link>/travelgatex/reference/objects/roomconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roomconnection/</guid>
      <description>RoomList definition
GraphQL schema definition type RoomConnection {  edges: [RoomEdge]    pageInfo: PageInfo!   }   Fields edges([RoomEdge]):   pageInfo(PageInfo!): Indicates info about page</description>
    </item>
    
    <item>
      <title>RoomCriteria</title>
      <link>/travelgatex/reference/objects/roomcriteria/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roomcriteria/</guid>
      <description>Occupancy for a room. It contains a list of pax ages.
GraphQL schema definition type RoomCriteria {  paxes: [Pax!]!   }   Fields paxes([Pax!]!): Array of pax ages. The number of items in the array will indicate the pax occupancy.</description>
    </item>
    
    <item>
      <title>RoomData</title>
      <link>/travelgatex/reference/objects/roomdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roomdata/</guid>
      <description>Room data
GraphQL schema definition type RoomData {  code: ID!    roomCode: String!    texts( languages: [Language!], ): [Text!]   }   Fields code(ID!): Internal code for checking availability  roomCode(String!): Code of the hotel in the Supplier selected  texts([Text!]): Label  
Required by RoomStatic:  Room Type</description>
    </item>
    
    <item>
      <title>RoomEdge</title>
      <link>/travelgatex/reference/objects/roomedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roomedge/</guid>
      <description>RoomList Edge definition
GraphQL schema definition type RoomEdge {  cursor: String!    node: RoomStatic   }   Fields cursor(String!):   node(RoomStatic):   
Required by RoomConnection:  RoomList definition</description>
    </item>
    
    <item>
      <title>RoomPrice</title>
      <link>/travelgatex/reference/objects/roomprice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roomprice/</guid>
      <description>Specifies the room price.
GraphQL schema definition type RoomPrice {  price: Price!    breakdown: [PriceBreakdown!]   }   Fields price(Price!): Total price for all days.  breakdown([PriceBreakdown!]): Daily break downs price.  
Required by Room:  Contains the room information of the option returned.</description>
    </item>
    
    <item>
      <title>RoomStatic</title>
      <link>/travelgatex/reference/objects/roomstatic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roomstatic/</guid>
      <description>Room Type
GraphQL schema definition type RoomStatic {  code: ID!    roomData: RoomData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!): Room ID  roomData(RoomData): Room data  error([Error!]): Errors that abort services  createdAt(DateTime!): Date created  updatedAt(DateTime!): Date updated  
Required by RoomEdge:  RoomList Edge definition</description>
    </item>
    
    <item>
      <title>Rule</title>
      <link>/travelgatex/reference/objects/rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/rule/</guid>
      <description>GraphQL schema definition type Rule {  id: String!    name: String    type: MarkupRuleType!    value: Float!   }   Fields id(String!): rule identifier  name(String): rule name  type(MarkupRuleType!): type of the value  value(Float!): value applied by this rule</description>
    </item>
    
    <item>
      <title>Search</title>
      <link>/travelgatex/reference/objects/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/search/</guid>
      <description>Available options for a given date and itinerary. It does not filter different classes, times or fares. It will always retrieve all results returned by the suppliers. The availability request is very straight forward.
GraphQL schema definition type Search {  hotel(    token: String,     criteria: HotelCriteriaSearchInput,     settings: HotelSettingsInput,     filter: FilterInput,     ): HotelSearch   }   Fields hotel(HotelSearch): Available options of an hotel for a given date and itinerary.</description>
    </item>
    
    <item>
      <title>ServiceApi</title>
      <link>/travelgatex/reference/objects/serviceapi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/serviceapi/</guid>
      <description>Information related to a Service API
GraphQL schema definition type ServiceApi {  code: ID!    name: String!    operations: [ServiceOperation]    error: [Error!]   }   Fields code(ID!): Service API ID  name(String!): Service API Name  operations([ServiceOperation]): Operations that a Service Api has  error([Error!]): Errors</description>
    </item>
    
    <item>
      <title>ServiceOperation</title>
      <link>/travelgatex/reference/objects/serviceoperation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/serviceoperation/</guid>
      <description>Information related to an API operation
GraphQL schema definition type ServiceOperation {  code: ID!    name: String!    type: String!    travelOperation: Int!   }   Fields code(ID!): Service Operation ID  name(String!): Service Operation name  type(String!): Service Operation type  travelOperation(Int!): Service Operation Travel Operation ID (1: avail) (2: reservation) (3: batch) (4: batchLongRun)  
Required by ServiceApi:  Information related to a Service API</description>
    </item>
    
    <item>
      <title>ServiceStatus</title>
      <link>/travelgatex/reference/objects/servicestatus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/servicestatus/</guid>
      <description>Indicates the status of the service
GraphQL schema definition type ServiceStatus {  code: String    type: String    description: String   }   Fields code(String): Status code  type(String): Status type  description(String): Status description  
Required by HotelXQuery:    PaymentXQuery:</description>
    </item>
    
    <item>
      <title>Stat</title>
      <link>/travelgatex/reference/objects/stat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/stat/</guid>
      <description>GraphQL schema definition type Stat {  start: DateTime!    end: DateTime!    duration: Float   }   Fields start(DateTime!): Start UTC  end(DateTime!): End UTC  duration(Float): Difference between start and end in miliseconds  
Required by StatsRequest:  Contains internal information.  StatPlugin:    StatAccess:    StatTransaction:</description>
    </item>
    
    <item>
      <title>StatAccess</title>
      <link>/travelgatex/reference/objects/stataccess/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/stataccess/</guid>
      <description>GraphQL schema definition type StatAccess {  name: String!    total: Stat!    staticConfiguration: Stat    hotels: Int!    zones: Int!    cities: Int!    requestAccess: StatPlugin    responseAccess: StatPlugin    transactions: [StatTransaction!]!    plugins: [StatPlugin!]   }   Fields name(String!): Access name  total(Stat!): Total access time  staticConfiguration(Stat): Static configuration time  hotels(Int!</description>
    </item>
    
    <item>
      <title>StatPlugin</title>
      <link>/travelgatex/reference/objects/statplugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statplugin/</guid>
      <description>GraphQL schema definition type StatPlugin {  name: String!    total: Stat!   }   Fields name(String!): Plugin name  total(Stat!): total plugin time  
Required by StatsRequest:  Contains internal information.  StatAccess:</description>
    </item>
    
    <item>
      <title>StatTransaction</title>
      <link>/travelgatex/reference/objects/stattransaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/stattransaction/</guid>
      <description>GraphQL schema definition type StatTransaction {  reference: String!    total: Stat!    buildRequest: Stat!    workerCommunication: Stat!    parseResponse: Stat!   }   Fields reference(String!): Extra information about transaction.  total(Stat!): Total transaction time  buildRequest(Stat!): Build request time  workerCommunication(Stat!): Worker connection time  parseResponse(Stat!): Parse response time</description>
    </item>
    
    <item>
      <title>Stats</title>
      <link>/travelgatex/reference/objects/stats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/stats/</guid>
      <description>The service used to access the stats of every connection that uses the HUB
GraphQL schema definition type Stats {  code: ID!    statsData: StatsData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!):   statsData(StatsData): The data returned by a Stats query.  error([Error!]): Errors that will lead the service to abort  createdAt(DateTime!</description>
    </item>
    
    <item>
      <title>StatsAssert</title>
      <link>/travelgatex/reference/objects/statsassert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statsassert/</guid>
      <description>Assert of an specific error
GraphQL schema definition type StatsAssert {  startTime: DateTime!    execTime: Int!    url: URI!   }   Fields startTime(DateTime!): Start time of the request  execTime(Int!): Execution time of the request  url(URI!): Endpoint to download the full XML of the request with its response</description>
    </item>
    
    <item>
      <title>StatsConnection</title>
      <link>/travelgatex/reference/objects/statsconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statsconnection/</guid>
      <description>GraphQL schema definition type StatsConnection {  edges: [StatsEdge]    pageInfo: PageInfo!   }   Fields edges([StatsEdge]):   pageInfo(PageInfo!):   
Required by StatsQuery:</description>
    </item>
    
    <item>
      <title>StatsData</title>
      <link>/travelgatex/reference/objects/statsdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statsdata/</guid>
      <description>GraphQL schema definition type StatsData {  access: Access!    client: Client!    from: DateTime!    to: DateTime!    ratios: Ratios!    operations( type: [ServiceOperationType!], ): [OperationDetailed!]   }   Fields access(Access!): Owner access  client(Client!): Owner client  from(DateTime!): From date of search  to(DateTime!): To date of search  ratios(Ratios!): Ratios details  operations([OperationDetailed!]): Stats information per operation</description>
    </item>
    
    <item>
      <title>StatsEdge</title>
      <link>/travelgatex/reference/objects/statsedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statsedge/</guid>
      <description>GraphQL schema definition type StatsEdge {  cursor: String!    node: Stats   }   Fields cursor(String!):   node(Stats):   
Required by StatsConnection:</description>
    </item>
    
    <item>
      <title>StatsInfo</title>
      <link>/travelgatex/reference/objects/statsinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statsinfo/</guid>
      <description>Details of an specific error
GraphQL schema definition type StatsInfo {  code: ID!    type: StatsInfoTypes!    hits: Int!    time: Int!    asserts: [StatsAssert!]   }   Fields code(ID!):   type(StatsInfoTypes!): Stats type  hits(Int!): Total hits  time(Int!): Average time (ms)  asserts([StatsAssert!]): Details about errors.</description>
    </item>
    
    <item>
      <title>StatsQuery</title>
      <link>/travelgatex/reference/objects/statsquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statsquery/</guid>
      <description>GraphQL schema definition type StatsQuery {  a: Boolean    report(    filter: StatsFilterInput!,     first: Int,     last: Int,     before: String,     after: String,     ): StatsConnection!   }   Fields a(Boolean):   report(StatsConnection!): The report query, represents all of the entry points into our object graph</description>
    </item>
    
    <item>
      <title>StatsRequest</title>
      <link>/travelgatex/reference/objects/statsrequest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statsrequest/</guid>
      <description>Contains internal information.
GraphQL schema definition type StatsRequest {  total: Stat!    validation: Stat!    process: Stat!    configuration: Stat!    request: Stat!    response: Stat!    requestPlugin: StatPlugin    responsePlugin: StatPlugin    hotels: Int!    zones: Int!    cities: Int!    dockerID: String!    Accesses: [StatAccess!</description>
    </item>
    
    <item>
      <title>StoredCard</title>
      <link>/travelgatex/reference/objects/storedcard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/storedcard/</guid>
      <description>GraphQL schema definition type StoredCard {  code: ID!    storedCardData: StoredCardData    createdAt: DateTime!    updatedAt: DateTime!    adviseMessage( level: [AdviseMessageLevel], ): [AdviseMessage!]   }   Fields code(ID!):   storedCardData(StoredCardData):   createdAt(DateTime!): Create date  updatedAt(DateTime!): Update date  adviseMessage([AdviseMessage!]): List of messages  
Required by StoredCardEdge:    PaymentXMutation:</description>
    </item>
    
    <item>
      <title>StoredCardConnection</title>
      <link>/travelgatex/reference/objects/storedcardconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/storedcardconnection/</guid>
      <description>GraphQL schema definition type StoredCardConnection {  edges: [StoredCardEdge]    pageInfo: PageInfo!   }   Fields edges([StoredCardEdge]):   pageInfo(PageInfo!):   
Required by PaymentXQuery:</description>
    </item>
    
    <item>
      <title>StoredCardData</title>
      <link>/travelgatex/reference/objects/storedcarddata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/storedcarddata/</guid>
      <description>GraphQL schema definition type StoredCardData {  bookingInfo: PaymentXBookingInfo!    card: PaymentCard!   }   Fields bookingInfo(PaymentXBookingInfo!):   card(PaymentCard!):   
Required by StoredCard:</description>
    </item>
    
    <item>
      <title>StoredCardEdge</title>
      <link>/travelgatex/reference/objects/storedcardedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/storedcardedge/</guid>
      <description>GraphQL schema definition type StoredCardEdge {  cursor: String!    node: StoredCard   }   Fields cursor(String!):   node(StoredCard):   
Required by StoredCardConnection:</description>
    </item>
    
    <item>
      <title>Supplement</title>
      <link>/travelgatex/reference/objects/supplement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/supplement/</guid>
      <description>Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.
GraphQL schema definition type Supplement {  code: String!    name: String    description: String    supplementType: SupplementType!    chargeType: ChargeType!    mandatory: Boolean!    durationType: DurationType    quantity: Int    unit: UnitTimeType    effectiveDate: Date    expireDate: Date    resort: Resort    price: Price   }   Fields code(String!</description>
    </item>
    
    <item>
      <title>Supplier</title>
      <link>/travelgatex/reference/objects/supplier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/supplier/</guid>
      <description>A Supplier is a Partner who is connected to TravelgateX on the supply side in order to sell their product to connected Buyers
GraphQL schema definition type Supplier {  code: ID!    supplierData: SupplierData    error: [Error!]    createdAt: DateTime!    updatedAt: DateTime!   }   Fields code(ID!):   supplierData(SupplierData):   error([Error!]): Errors that abort services  createdAt(DateTime!</description>
    </item>
    
    <item>
      <title>SupplierConnection</title>
      <link>/travelgatex/reference/objects/supplierconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/supplierconnection/</guid>
      <description>GraphQL schema definition type SupplierConnection {  edges: [SupplierEdge]    pageInfo: PageInfo!   }   Fields edges([SupplierEdge]):   pageInfo(PageInfo!):   
Required by OrganizationData:    GroupCommonData:    GroupData:</description>
    </item>
    
    <item>
      <title>SupplierData</title>
      <link>/travelgatex/reference/objects/supplierdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/supplierdata/</guid>
      <description>GraphQL schema definition type SupplierData {  code: ID!    name: String!    isActive: Boolean!    provider: Provider!    context: String!    serviceApi: Int!    supplierGroup: ID    accesses: AccessConnection   }   Fields code(ID!): unique identifier of a supplier  name(String!): Supplier complete name  isActive(Boolean!): indicates whether a supplier is active  provider(Provider!</description>
    </item>
    
    <item>
      <title>SupplierDetected</title>
      <link>/travelgatex/reference/objects/supplierdetected/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/supplierdetected/</guid>
      <description>GraphQL schema definition type SupplierDetected {  code: ID!    supplier: Supplier    numberOfHotels: Int!   }   Fields code(ID!):   supplier(Supplier):   numberOfHotels(Int!):</description>
    </item>
    
    <item>
      <title>SupplierEdge</title>
      <link>/travelgatex/reference/objects/supplieredge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/supplieredge/</guid>
      <description>GraphQL schema definition type SupplierEdge {  cursor: String!    node: Supplier   }   Fields cursor(String!):   node(Supplier):   
Required by SupplierConnection:</description>
    </item>
    
    <item>
      <title>SupplierGroup</title>
      <link>/travelgatex/reference/objects/suppliergroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/suppliergroup/</guid>
      <description>group related to a supplier
GraphQL schema definition type SupplierGroup {  groupCode: String!    isActive: Boolean!   }   Fields groupCode(String!): group code of the group related to this supplier  isActive(Boolean!): Indicates if the supplier is active for its supplier</description>
    </item>
    
    <item>
      <title>Surcharge</title>
      <link>/travelgatex/reference/objects/surcharge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/surcharge/</guid>
      <description>Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.
GraphQL schema definition type Surcharge {  chargeType: ChargeType!    mandatory: Boolean!    price: Price!    description: String   }   Fields chargeType(ChargeType!): Indicates the charge types. We need to know whether the supplements have to be paid when the consumer gets to the hotel or beforehand.</description>
    </item>
    
    <item>
      <title>Timeout</title>
      <link>/travelgatex/reference/objects/timeout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/timeout/</guid>
      <description>GraphQL schema definition type Timeout {  search: Int!    quote: Int!    book: Int!   }   Fields search(Int!): Milliseconds before the search connection is closed.  quote(Int!): Milliseconds before the quote connection is closed.  book(Int!): Milliseconds before the book connection is closed.  
Required by DefaultSettings:</description>
    </item>
    
    <item>
      <title>Transactions</title>
      <link>/travelgatex/reference/objects/transactions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/transactions/</guid>
      <description>Supplier transaction
GraphQL schema definition type Transactions {  request: String!    response: String!    timeStamp: DateTime!   }   Fields request(String!): Transaction Request.  response(String!): Transaction Response.  timeStamp(DateTime!): Time when the request has been processed.</description>
    </item>
    
    <item>
      <title>UploadFileData</title>
      <link>/travelgatex/reference/objects/uploadfiledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/uploadfiledata/</guid>
      <description>GraphQL schema definition type UploadFileData {  fileId: String!    suppliers: [SupplierDetected!]    numberOfLines: Int    numberOfHotels: Int   }   Fields fileId(String!):   suppliers([SupplierDetected!]):   numberOfLines(Int):   numberOfHotels(Int):   
Required by UploadFileResponse:</description>
    </item>
    
    <item>
      <title>UploadFileResponse</title>
      <link>/travelgatex/reference/objects/uploadfileresponse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/uploadfileresponse/</guid>
      <description>GraphQL schema definition type UploadFileResponse {  data: UploadFileData    error: Error    warnings: [Warning]   }   Fields data(UploadFileData):   error(Error):   warnings([Warning]):   
Required by MappeaMutation:</description>
    </item>
    
    <item>
      <title>Urls</title>
      <link>/travelgatex/reference/objects/urls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/urls/</guid>
      <description>Url&amp;rsquo;s
GraphQL schema definition type Urls {  search: URI    quote: URI    book: URI    generic: URI   }   Fields search(URI): Specific URL for Availability method.  quote(URI): Specific URL for Reservation method.  book(URI): Specific URL for Valuation method.  generic(URI): Supplier URL used for multiple methods.  
Required by AccessData:</description>
    </item>
    
    <item>
      <title>Warning</title>
      <link>/travelgatex/reference/objects/warning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/warning/</guid>
      <description>Application warnings
GraphQL schema definition type Warning {  code: String!    type: String!    description: String!   }   Fields code(String!): Warning code  type(String!): Warning type  description(String!): Warning description  
Required by GetUploadedFilesResponse:  ## GetUploadedFiles  GetMappeaStatsResponse:    OnlyStatusResponse:  ## Common Items  UploadFileResponse:</description>
    </item>
    
  </channel>
</rss>