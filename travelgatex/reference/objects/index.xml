<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Objects on TravelgateX Documentation</title>
    <link>/travelgatex/reference/objects/</link>
    <description>Recent content in Objects on TravelgateX Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/travelgatex/reference/objects/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>API</title>
      <link>/travelgatex/reference/objects/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/api/</guid>
      <description>GraphQL Schema definition type API {code: ID! error: [Error!] apiData: APIData createdAt: DateTime! updatedAt: DateTime! }Fields code(ID!):error([Error!]):apiData(APIData):createdAt(DateTime!):updatedAt(DateTime!):
Require by APIEdge:</description>
    </item>
    
    <item>
      <title>APIConnection</title>
      <link>/travelgatex/reference/objects/apiconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/apiconnection/</guid>
      <description>GraphQL Schema definition type APIConnection {edges: [APIEdge] pageInfo: PageInfo! }Fields edges([APIEdge]):pageInfo(PageInfo!):
Require by AdminQuery: OrganizationData: GroupCommonData: GroupData: ResourceData: ProductData:</description>
    </item>
    
    <item>
      <title>APIData</title>
      <link>/travelgatex/reference/objects/apidata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/apidata/</guid>
      <description>GraphQL Schema definition type APIData {id: ID! code: ID! groups(first: Int,last: Int,before: String,after: String,codes: [ID!],): GroupConnection resources(first: Int,last: Int,before: String,after: String,codes: [ID!</description>
    </item>
    
    <item>
      <title>APIEdge</title>
      <link>/travelgatex/reference/objects/apiedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/apiedge/</guid>
      <description>GraphQL Schema definition type APIEdge {cursor: String! node: API }Fields cursor(String!):node(API):
Require by APIConnection:</description>
    </item>
    
    <item>
      <title>Access</title>
      <link>/travelgatex/reference/objects/access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/access/</guid>
      <description>GraphQL Schema definition type Access {code: ID! accessData: AccessData error: [Error!] createdAt: DateTime! updatedAt: DateTime! }Fields code(ID!):accessData(AccessData):error([Error!]):Errors that will lead the service to abortcreatedAt(DateTime!):Create dateupdatedAt(DateTime!):Update date
Require by AccessEdge: AccessData: AdminMutation:</description>
    </item>
    
    <item>
      <title>AccessConnection</title>
      <link>/travelgatex/reference/objects/accessconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/accessconnection/</guid>
      <description>GraphQL Schema definition type AccessConnection {edges: [AccessEdge] pageInfo: PageInfo! }Fields edges([AccessEdge]):pageInfo(PageInfo!):
Require by AdminQuery: SupplierData:</description>
    </item>
    
    <item>
      <title>AccessData</title>
      <link>/travelgatex/reference/objects/accessdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/accessdata/</guid>
      <description>GraphQL Schema definition type AccessData {name: String! isActive: Boolean! code: ID! supplier: Supplier! isTest: Boolean! user: String password: String urls: Urls parameters: [Parameter] markets: [String!] rateRules: [RateRulesType!] shared: Access }Fields name(String!</description>
    </item>
    
    <item>
      <title>AccessEdge</title>
      <link>/travelgatex/reference/objects/accessedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/accessedge/</guid>
      <description>GraphQL Schema definition type AccessEdge {cursor: String! node: Access }Fields cursor(String!):node(Access):
Require by AccessConnection:</description>
    </item>
    
    <item>
      <title>AddOn</title>
      <link>/travelgatex/reference/objects/addon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/addon/</guid>
      <description>Extra information about the option.
GraphQL Schema definition type AddOn {key: String! value: JSON! }Fields key(String!):Contains the keyword/Id to identify the AddOn.value(JSON!):Contains the AddOn values.</description>
    </item>
    
    <item>
      <title>AddOns</title>
      <link>/travelgatex/reference/objects/addons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/addons/</guid>
      <description>Extra information about the option.
GraphQL Schema definition type AddOns {distribution: [AddOn!] Show deprecated fieldsdistribute: : JSON // }Fields distribution([AddOn!]):Extra information from the distribution layer
Require by HotelOptionSearch: An option includes hotel information, meal plan, total price, conditions and room description.HotelOptionQuote: Contains information about quote.HotelBookingDetail: Contains information about booking.</description>
    </item>
    
    <item>
      <title>AdminMutation</title>
      <link>/travelgatex/reference/objects/adminmutation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/adminmutation/</guid>
      <description>GraphQL Schema definition type AdminMutation {createAccess(input: AccessInput!,): Access updateAccess(input: AccessInput!,): Access grantAccessToGroup(input: GroupInput!,): Access deleteAccessFromGroup(input: GroupInput!,): Access grantSupplierToGroup(input: GroupInput!,): Supplier deleteSupplierFromGroup(input: GroupInput!,): Supplier createClient(input: ClientInput!,): Client updateClient(input: ClientInput!,): Client createMember(member: CreateMemberInput!</description>
    </item>
    
    <item>
      <title>AdminQuery</title>
      <link>/travelgatex/reference/objects/adminquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/adminquery/</guid>
      <description>GraphQL Schema definition type AdminQuery {accesses(first: Int,Last: Int,before: String,after: String,filter: AccessFilter,): AccessConnection suppliers(first: Int,Last: Int,before: String,after: String,filter: SupplierFilter,): SupplierConnection clients(first: Int,Last: Int,before: String,after: String,filter: ClientFilter,): ClientConnection serviceApi(filter: ServiceApiFilter,): ServiceApi organizations(codes: [ID!</description>
    </item>
    
    <item>
      <title>Amenity</title>
      <link>/travelgatex/reference/objects/amenity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/amenity/</guid>
      <description>Something, such as a swimming pool or shopping centre, that is intended to make life more pleasant or comfortable for the people.
GraphQL Schema definition type Amenity {code: String! type: ApplicationAreaType! texts(languages: [Language!],): [Text!]! }Fields code(String!):Codetype(ApplicationAreaType!):Indicates the type of the amenity.texts([Text!]!):Contains the descriptive</description>
    </item>
    
    <item>
      <title>AuditData</title>
      <link>/travelgatex/reference/objects/auditdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/auditdata/</guid>
      <description>Data sent &amp;amp; received in the supplierâ€™s native format.
GraphQL Schema definition type AuditData {transactions: [Transactions!]! timeStamp: DateTime! processTime: Float! }Fields transactions([Transactions!]!):List of transactions data.timeStamp(DateTime!):TimeStampprocessTime(Float!):Process time in milliseconds (ms)
Require by HotelSearch: Results of Avail Hotel. Contains all the available options for a given date and itinerary.</description>
    </item>
    
    <item>
      <title>Bed</title>
      <link>/travelgatex/reference/objects/bed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/bed/</guid>
      <description>Contains information about a bed.
GraphQL Schema definition type Bed {type: String description: String count: Int shared: Boolean }Fields type(String):Specifies the bed type.description(String):Description about the bed.count(Int):Indicates number of beds in the room.shared(Boolean):Specifies if the bed is shared or not.</description>
    </item>
    
    <item>
      <title>Board</title>
      <link>/travelgatex/reference/objects/board/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/board/</guid>
      <description>Board Type
GraphQL Schema definition type Board {code: ID! boardData: BoardData error: [Error!] createdAt: DateTime! updatedAt: DateTime! }Fields code(ID!):Board IDboardData(BoardData):Board dataerror([Error!]):Errors that will lead the service to abortcreatedAt(DateTime!):Create dateupdatedAt(DateTime!):Update date
Require by BoardEdge: BoardList Edge definition</description>
    </item>
    
    <item>
      <title>BoardConnection</title>
      <link>/travelgatex/reference/objects/boardconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/boardconnection/</guid>
      <description>BoardList definition
GraphQL Schema definition type BoardConnection {edges: [BoardEdge] pageInfo: PageInfo! }Fields edges([BoardEdge]):pageInfo(PageInfo!):
Require by HotelXQuery:</description>
    </item>
    
    <item>
      <title>BoardData</title>
      <link>/travelgatex/reference/objects/boarddata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/boarddata/</guid>
      <description>Board data
GraphQL Schema definition type BoardData {code: ID! boardCode: String! texts(languages: [Language!],): [Text!] }Fields code(ID!):Internal code to perform availability.boardCode(String!):Code of the hotel in the Supplier selected.texts([Text!]):Label
Require by Board: Board Type</description>
    </item>
    
    <item>
      <title>BoardEdge</title>
      <link>/travelgatex/reference/objects/boardedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/boardedge/</guid>
      <description>BoardList Edge definition
GraphQL Schema definition type BoardEdge {cursor: String! node: Board }Fields cursor(String!):node(Board):
Require by BoardConnection: BoardList definition</description>
    </item>
    
    <item>
      <title>Booking</title>
      <link>/travelgatex/reference/objects/booking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/booking/</guid>
      <description>Returns detailed information about books.
GraphQL Schema definition type Booking {Show deprecated fieldshotel(criteria: HotelCriteriaBookingInput!,settings: HotelSettingsInput,): HotelBooking // deprecated from 2017-11-21. You can find it in query at HotelX}Require by Query:</description>
    </item>
    
    <item>
      <title>BookingHotel</title>
      <link>/travelgatex/reference/objects/bookinghotel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/bookinghotel/</guid>
      <description>GraphQL Schema definition type BookingHotel {creationDate: Date checkIn: Date checkOut: Date hotelCode: String hotelName: String boardCode: String occupancies: [Occupancy!] rooms: [BookingRoom!] }Fields creationDate(Date):Creation date of the booking. Format: yyyy-MM-ddcheckIn(Date):Check-in date for the booking. Format: yyyy-MM-ddcheckOut(Date):Check-out date for the booking.</description>
    </item>
    
    <item>
      <title>BookingRoom</title>
      <link>/travelgatex/reference/objects/bookingroom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/bookingroom/</guid>
      <description>GraphQL Schema definition type BookingRoom {occupancyRefId: Int code: String description: String price: Price }Fields occupancyRefId(Int):ID reference to the occupancy.code(String):Indicates the room code.description(String):Description about the room.price(Price):Total price for all days.</description>
    </item>
    
    <item>
      <title>BusinessRules</title>
      <link>/travelgatex/reference/objects/businessrules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/businessrules/</guid>
      <description>List of business rules to filter the options that you are interested.
GraphQL Schema definition type BusinessRules {optionsQuota: Int! businessRulesType: BusinessRulesType! }Fields optionsQuota(Int!):Options quota per avail. Numbers of options wanted by avail.businessRulesType(BusinessRulesType!):Different business rules to filter the options that you are interested.
Require by DefaultSettings:</description>
    </item>
    
    <item>
      <title>CancelPenalty</title>
      <link>/travelgatex/reference/objects/cancelpenalty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/cancelpenalty/</guid>
      <description>Contains information about a cancel penalty.
GraphQL Schema definition type CancelPenalty {hoursBefore: Int! penaltyType: CancelPenaltyType! currency: Currency! value: Float! }Fields hoursBefore(Int!):Cancellation fees applicable x number of hours before the check in date.penaltyType(CancelPenaltyType!):Type of penalty. This can be Nights, Percent or Import.currency(Currency!):Currency used in the cancel policy.value(Float!</description>
    </item>
    
    <item>
      <title>CancelPolicy</title>
      <link>/travelgatex/reference/objects/cancelpolicy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/cancelpolicy/</guid>
      <description>Contains information about a cancel policy.
GraphQL Schema definition type CancelPolicy {refundable: Boolean! cancelPenalties: [CancelPenalty!] }Fields refundable(Boolean!):Indicates if the option is refundable or not.cancelPenalties([CancelPenalty!]):List of cancel penalties.
Require by HotelOptionSearch: An option includes hotel information, meal plan, total price, conditions and room description.HotelOptionQuote: Contains information about quote.HotelBookingDetail: Contains information about booking.</description>
    </item>
    
    <item>
      <title>Category</title>
      <link>/travelgatex/reference/objects/category/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/category/</guid>
      <description>Category Type
GraphQL Schema definition type Category {code: ID! categoryData: CategoryData error: [Error!] createdAt: DateTime! updatedAt: DateTime! }Fields code(ID!):Category IDcategoryData(CategoryData):Category dataerror([Error!]):Errors that will lead the service to abortcreatedAt(DateTime!):Create dateupdatedAt(DateTime!):Update date
Require by CategoryEdge: CategoryList Edge definition</description>
    </item>
    
    <item>
      <title>CategoryConnection</title>
      <link>/travelgatex/reference/objects/categoryconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/categoryconnection/</guid>
      <description>CategoryList definition
GraphQL Schema definition type CategoryConnection {edges: [CategoryEdge] pageInfo: PageInfo! }Fields edges([CategoryEdge]):pageInfo(PageInfo!):
Require by HotelXQuery:</description>
    </item>
    
    <item>
      <title>CategoryData</title>
      <link>/travelgatex/reference/objects/categorydata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/categorydata/</guid>
      <description>Category data
GraphQL Schema definition type CategoryData {code: ID! categoryCode: String! texts(languages: [Language!],): [Text!] }Fields code(ID!):Internal code to perform availability.categoryCode(String!):Code of the hotel in the Supplier selected.texts([Text!]):Label
Require by Category: Category Type</description>
    </item>
    
    <item>
      <title>CategoryEdge</title>
      <link>/travelgatex/reference/objects/categoryedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/categoryedge/</guid>
      <description>CategoryList Edge definition
GraphQL Schema definition type CategoryEdge {cursor: String! node: Category }Fields cursor(String!):node(Category):
Require by CategoryConnection: CategoryList definition</description>
    </item>
    
    <item>
      <title>Client</title>
      <link>/travelgatex/reference/objects/client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/client/</guid>
      <description>GraphQL Schema definition type Client {code: ID! clientData: ClientData error: [Error!] createdAt: DateTime! updatedAt: DateTime! }Fields code(ID!):clientData(ClientData):error([Error!]):Errors that will lead the service to abortcreatedAt(DateTime!):Create dateupdatedAt(DateTime!):Update date
Require by ClientEdge: AdminMutation:</description>
    </item>
    
    <item>
      <title>ClientConnection</title>
      <link>/travelgatex/reference/objects/clientconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/clientconnection/</guid>
      <description>GraphQL Schema definition type ClientConnection {edges: [ClientEdge] pageInfo: PageInfo! }Fields edges([ClientEdge]):pageInfo(PageInfo!):
Require by AdminQuery:</description>
    </item>
    
    <item>
      <title>ClientData</title>
      <link>/travelgatex/reference/objects/clientdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/clientdata/</guid>
      <description>GraphQL Schema definition type ClientData {code: ID! name: String! isActive: Boolean! }Fields code(ID!):ID identifier of a Clientname(String!):Client complete nameisActive(Boolean!):Indicates whether a Client is active
Require by Client:</description>
    </item>
    
    <item>
      <title>ClientEdge</title>
      <link>/travelgatex/reference/objects/clientedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/clientedge/</guid>
      <description>GraphQL Schema definition type ClientEdge {cursor: String! node: Client }Fields cursor(String!):node(Client):
Require by ClientConnection:</description>
    </item>
    
    <item>
      <title>ConnectUser</title>
      <link>/travelgatex/reference/objects/connectuser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/connectuser/</guid>
      <description>data related to a connect user and its groups
GraphQL Schema definition type ConnectUser {code: String! isActive: Boolean! connectUserGroups: [ConnectUserGroup!] }Fields code(String!):unique connect user of a supplierisActive(Boolean!):indicates whether a connect user is activeconnectUserGroups([ConnectUserGroup!]):connect user&amp;#39;s related data of its groups</description>
    </item>
    
    <item>
      <title>ConnectUserGroup</title>
      <link>/travelgatex/reference/objects/connectusergroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/connectusergroup/</guid>
      <description>group related to a connect user
GraphQL Schema definition type ConnectUserGroup {groupCode: String! isActive: Boolean! }Fields groupCode(String!):group code of the group related to this connect userisActive(Boolean!):Indicates if the connect user is active for its connect user</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>/travelgatex/reference/objects/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/contact/</guid>
      <description>Contact Data.
GraphQL Schema definition type Contact {email: String telephone: String fax: String web: URI }Fields email(String):Emailtelephone(String):Telephonefax(String):Faxweb(URI):Web
Require by HotelData: Hotel data</description>
    </item>
    
    <item>
      <title>Context</title>
      <link>/travelgatex/reference/objects/context/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/context/</guid>
      <description>Context type, for now only Code is necessary
GraphQL Schema definition type Context {code: ID! error: [Error!] createdAt: DateTime! updatedAt: DateTime! }Fields code(ID!):error([Error!]):Errors that will lead the service to abortcreatedAt(DateTime!):Create dateupdatedAt(DateTime!):Update date</description>
    </item>
    
    <item>
      <title>Coordinates</title>
      <link>/travelgatex/reference/objects/coordinates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/coordinates/</guid>
      <description>Geographical coordinates corresponding to a location.
GraphQL Schema definition type Coordinates {latitude: Float! longitude: Float! }Fields latitude(Float!):Latitudelongitude(Float!):Longitude
Require by Location: Indicates the location of the hotel.</description>
    </item>
    
    <item>
      <title>CriteriaSearch</title>
      <link>/travelgatex/reference/objects/criteriasearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/criteriasearch/</guid>
      <description>Criteria of search contains destination, travel dates and the number of pax in each room.
GraphQL Schema definition type CriteriaSearch {checkIn: Date! checkOut: Date! hotels: [String!]! occupancies: [RoomCriteria!]! language: Language currency: Currency nationality: Country market: String! }Fields checkIn(Date!):Check-in date for the booking.</description>
    </item>
    
    <item>
      <title>DefaultSettings</title>
      <link>/travelgatex/reference/objects/defaultsettings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/defaultsettings/</guid>
      <description>GraphQL Schema definition type DefaultSettings {connectUser: String context: String language: Language! currency: Currency! nationality: Country! market: String timeouts: Timeout! businessRules: BusinessRules! }Fields connectUser(String):This field is got only if the authorization header is of the type JWT. It is used for to change the user that has been set by default in the preload.</description>
    </item>
    
    <item>
      <title>Description</title>
      <link>/travelgatex/reference/objects/description/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/description/</guid>
      <description>Object description indicates the type and the description about something.
GraphQL Schema definition type Description {type: DescriptionType! texts: [Text!] }Fields type(DescriptionType!):Indicates type of descriptiontexts([Text!]):Label</description>
    </item>
    
    <item>
      <title>Destination</title>
      <link>/travelgatex/reference/objects/destination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/destination/</guid>
      <description>Destination Type
GraphQL Schema definition type Destination {code: ID! destinationData: DestinationData error: [Error!] createdAt: DateTime! updatedAt: DateTime! }Fields code(ID!):Destination IDdestinationData(DestinationData):Destination dataerror([Error!]):Errors that will lead the service to abortcreatedAt(DateTime!):Create dateupdatedAt(DateTime!):Update date
Require by DestinationEdge: DestinationList Edge definition</description>
    </item>
    
    <item>
      <title>DestinationConnection</title>
      <link>/travelgatex/reference/objects/destinationconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/destinationconnection/</guid>
      <description>DestinationList definition
GraphQL Schema definition type DestinationConnection {edges: [DestinationEdge] token: String! pageInfo: PageInfo! }Fields edges([DestinationEdge]):token(String!):pageInfo(PageInfo!):
Require by HotelXQuery:</description>
    </item>
    
    <item>
      <title>DestinationData</title>
      <link>/travelgatex/reference/objects/destinationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/destinationdata/</guid>
      <description>Information about destinantion
GraphQL Schema definition type DestinationData {code: ID! available: Boolean! destinationLeaf: [String!] texts(languages: [Language!],): [Text!]! closestDestinations: [String!] parent: String type: DestinationType! }Fields code(ID!):Destination Codeavailable(Boolean!):Indicates if you can search by destination.destinationLeaf([String!]):Returns destination leafs of the destination.</description>
    </item>
    
    <item>
      <title>DestinationEdge</title>
      <link>/travelgatex/reference/objects/destinationedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/destinationedge/</guid>
      <description>DestinationList Edge definition
GraphQL Schema definition type DestinationEdge {cursor: String! node: Destination }Fields cursor(String!):node(Destination):
Require by DestinationConnection: DestinationList definition</description>
    </item>
    
    <item>
      <title>Error</title>
      <link>/travelgatex/reference/objects/error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/error/</guid>
      <description>Application errors
GraphQL Schema definition type Error {code: String! type: String! description: String! }Fields code(String!):Error codetype(String!):Error typedescription(String!):Error description</description>
    </item>
    
    <item>
      <title>Exchange</title>
      <link>/travelgatex/reference/objects/exchange/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/exchange/</guid>
      <description>Informs about the currency of origin, and the rate applied over result returned by the supplier.
GraphQL Schema definition type Exchange {currency: Currency! rate: Float! }Fields currency(Currency!):Informs about the currency of origin.rate(Float!):Informs about the rate applied over result.
Require by Price: Price indicates the value of the room/option. Supplements and/or surcharges could be or not included into the price, will be verified with the nodes Supplements/Surcharges.</description>
    </item>
    
    <item>
      <title>Group</title>
      <link>/travelgatex/reference/objects/group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/group/</guid>
      <description>GraphQL Schema definition type Group {code: ID! error: [Error!] groupData: GroupData createdAt: DateTime! updatedAt: DateTime! }Fields code(ID!):error([Error!]):groupData(GroupData):createdAt(DateTime!):updatedAt(DateTime!):
Require by GroupEdge: GroupData: AdminMutation:</description>
    </item>
    
    <item>
      <title>GroupAccess</title>
      <link>/travelgatex/reference/objects/groupaccess/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/groupaccess/</guid>
      <description>Pair of groups and accesses. All accesses returned will belong to all the groups in groupCodes
GraphQL Schema definition type GroupAccess {groupCodes: [String!]! accesses: [Access!] }Fields groupCodes([String!]!):group identifiersaccesses([Access!]):</description>
    </item>
    
    <item>
      <title>GroupConnection</title>
      <link>/travelgatex/reference/objects/groupconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/groupconnection/</guid>
      <description>GraphQL Schema definition type GroupConnection {edges: [GroupEdge] pageInfo: PageInfo! }Fields edges([GroupEdge]):pageInfo(PageInfo!):
Require by AdminQuery: MemberData: APIData:</description>
    </item>
    
    <item>
      <title>GroupData</title>
      <link>/travelgatex/reference/objects/groupdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/groupdata/</guid>
      <description>GraphQL Schema definition type GroupData {id: ID! code: ID! type: GroupType! info: String parent: Group owner: Member isEditable: Boolean! productId: Int resourceId: Int members(codes: [ID!],first: Int,last: Int,before: String,after: String,): MemberConnection apis(codes: [ID!</description>
    </item>
    
    <item>
      <title>GroupEdge</title>
      <link>/travelgatex/reference/objects/groupedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/groupedge/</guid>
      <description>GraphQL Schema definition type GroupEdge {cursor: String! node: Group }Fields cursor(String!):node(Group):
Require by GroupConnection:</description>
    </item>
    
    <item>
      <title>Holder</title>
      <link>/travelgatex/reference/objects/holder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/holder/</guid>
      <description>Holder object that contains the pax name and surname.
GraphQL Schema definition type Holder {name: String! surname: String! }Fields name(String!):Holder&amp;#39;s namesurname(String!):Holder&amp;#39;s surname
Require by HotelBookingDetail: Contains information about booking.</description>
    </item>
    
    <item>
      <title>Hotel</title>
      <link>/travelgatex/reference/objects/hotel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotel/</guid>
      <description>Hotel Type
GraphQL Schema definition type Hotel {code: ID! hotelData: HotelData error: [Error!] createdAt: DateTime! updatedAt: DateTime! }Fields code(ID!):Hotel IDhotelData(HotelData):Hotel dataerror([Error!]):Errors that will lead the service to abortcreatedAt(DateTime!):Create dateupdatedAt(DateTime!):Update date
Require by HotelEdge: HotelList Edge definition</description>
    </item>
    
    <item>
      <title>HotelBookPayload</title>
      <link>/travelgatex/reference/objects/hotelbookpayload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelbookpayload/</guid>
      <description>GraphQL Schema definition type HotelBookPayload {stats(token: String!,): StatsRequest auditData: AuditData booking: HotelBookingDetail errors: [Error!] warnings: [Warning!] }Fields stats(StatsRequest):Application stats in string formatauditData(AuditData):Data sent &amp;amp; received in the supplier&amp;#39;s native format.booking(HotelBookingDetail):Information about bookingerrors([Error!]):Errors that will lead the service to abortwarnings([Warning!</description>
    </item>
    
    <item>
      <title>HotelBooking</title>
      <link>/travelgatex/reference/objects/hotelbooking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelbooking/</guid>
      <description>GraphQL Schema definition type HotelBooking {stats(token: String!,): StatsRequest auditData: AuditData bookings: [HotelBookingDetail!] errors: [Error!] warnings: [Warning!] }Fields stats(StatsRequest):Application stats in string formatauditData(AuditData):Data sent &amp;amp; received in the supplier&amp;#39;s native format.bookings([HotelBookingDetail!]):Details about bookingerrors([Error!]):Errors that will lead the service to abortwarnings([Warning!</description>
    </item>
    
    <item>
      <title>HotelBookingDetail</title>
      <link>/travelgatex/reference/objects/hotelbookingdetail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelbookingdetail/</guid>
      <description>Contains information about booking.
GraphQL Schema definition type HotelBookingDetail {reference: Reference! holder: Holder hotel: BookingHotel price: Price cancelPolicy: CancelPolicy remarks: String status: BookStatusType! payable: String addOns: AddOns }Fields reference(Reference!):Booking ID in the Supplier&amp;#39;s systemholder(Holder):Holder&amp;#39;s name and surnamehotel(BookingHotel):Information about the hotel.</description>
    </item>
    
    <item>
      <title>HotelCancelDetail</title>
      <link>/travelgatex/reference/objects/hotelcanceldetail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelcanceldetail/</guid>
      <description>Contains information about cancel
GraphQL Schema definition type HotelCancelDetail {reference: Reference cancelReference: String status: BookStatusType price: Price booking: HotelBookingDetail }Fields reference(Reference):Booking ID in the Supplier&amp;#39;s systemcancelReference(String):Cancellation ID in the Supplier&amp;#39;s systemstatus(BookStatusType):Booking Status.price(Price):Specifies the prices (Gross, Net and Amount) of the cancellation.</description>
    </item>
    
    <item>
      <title>HotelCancelPayload</title>
      <link>/travelgatex/reference/objects/hotelcancelpayload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelcancelpayload/</guid>
      <description>GraphQL Schema definition type HotelCancelPayload {stats(token: String!,): StatsRequest auditData: AuditData cancellation: HotelCancelDetail errors: [Error!] warnings: [Warning!] }Fields stats(StatsRequest):Application stats in string formatauditData(AuditData):Data sent &amp;amp; received in the supplier&amp;#39;s native format.cancellation(HotelCancelDetail):Information about cancelerrors([Error!]):Errors that will lead the service to abortwarnings([Warning!</description>
    </item>
    
    <item>
      <title>HotelConnection</title>
      <link>/travelgatex/reference/objects/hotelconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelconnection/</guid>
      <description>HotelList definition
GraphQL Schema definition type HotelConnection {edges: [HotelEdge] token: String pageInfo: PageInfo! }Fields edges([HotelEdge]):token(String):pageInfo(PageInfo!):
Require by HotelXQuery:</description>
    </item>
    
    <item>
      <title>HotelData</title>
      <link>/travelgatex/reference/objects/hoteldata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hoteldata/</guid>
      <description>Hotel data
GraphQL Schema definition type HotelData {code: ID! hotelCode: String! hotelCodeSupplier: String hotelName: String! categoryCode: String! property: Property chainCode: String exclusiveDeal: Boolean! location: Location! contact: Contact rank: [Int!]! cardTypes: [String!] amenities: [Amenity!</description>
    </item>
    
    <item>
      <title>HotelEdge</title>
      <link>/travelgatex/reference/objects/hoteledge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hoteledge/</guid>
      <description>HotelList Edge definition
GraphQL Schema definition type HotelEdge {cursor: String! node: Hotel }Fields cursor(String!):node(Hotel):
Require by HotelConnection: HotelList definition</description>
    </item>
    
    <item>
      <title>HotelOptionQuote</title>
      <link>/travelgatex/reference/objects/hoteloptionquote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hoteloptionquote/</guid>
      <description>Contains information about quote.
GraphQL Schema definition type HotelOptionQuote {optionRefId: String! status: StatusType! price: Price! cancelPolicy: CancelPolicy! remarks: String surcharges: [Surcharge!] cardTypes: [String!] addOns: AddOns }Fields optionRefId(String!):Indicates the valuation keystatus(StatusType!):The possible values in status in response are Available (OK) or On Request (RQ).</description>
    </item>
    
    <item>
      <title>HotelOptionSearch</title>
      <link>/travelgatex/reference/objects/hoteloptionsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hoteloptionsearch/</guid>
      <description>An option includes hotel information, meal plan, total price, conditions and room description.
GraphQL Schema definition type HotelOptionSearch {supplierCode: String! accessCode: String! market: String! hotelCode: String! hotelCodeSupplier: String! hotelName: String boardCode: String! boardCodeSupplier: String! paymentType: PaymentType! status: StatusType! occupancies: [Occupancy!</description>
    </item>
    
    <item>
      <title>HotelQuote</title>
      <link>/travelgatex/reference/objects/hotelquote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelquote/</guid>
      <description>GraphQL Schema definition type HotelQuote {stats(token: String!,): StatsRequest auditData: AuditData optionQuote: HotelOptionQuote errors: [Error!] warnings: [Warning!] }Fields stats(StatsRequest):Application stats in string formatauditData(AuditData):Data sent &amp;amp; received in the supplier&amp;#39;s native format.optionQuote(HotelOptionQuote):Information about quote.errors([Error!]):Errors that will lead the service to abortwarnings([Warning!</description>
    </item>
    
    <item>
      <title>HotelSearch</title>
      <link>/travelgatex/reference/objects/hotelsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelsearch/</guid>
      <description>Results of Avail Hotel. Contains all the available options for a given date and itinerary.
GraphQL Schema definition type HotelSearch {context: String stats(token: String!,): StatsRequest auditData: AuditData requestCriteria: CriteriaSearch options: [HotelOptionSearch!] errors: [Error!] warnings: [Warning!] }Fields context(String):Indicates the context of the response.</description>
    </item>
    
    <item>
      <title>HotelXMutation</title>
      <link>/travelgatex/reference/objects/hotelxmutation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxmutation/</guid>
      <description>GraphQL Schema definition type HotelXMutation {book(input: HotelBookInput!,settings: HotelSettingsInput,): HotelBookPayload cancel(input: HotelCancelInput!,settings: HotelSettingsInput,): HotelCancelPayload loadFile(input: String!,): String! }Fields book(HotelBookPayload):Creates a new hotel booking consisting of an option of 1 or more rooms.cancel(HotelCancelPayload):Cancels an existing hotel booking consisting of an option of 1 or more rooms.loadFile(String!</description>
    </item>
    
    <item>
      <title>HotelXQuery</title>
      <link>/travelgatex/reference/objects/hotelxquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/hotelxquery/</guid>
      <description>GraphQL Schema definition type HotelXQuery {boards(criteria: HotelXBoardQueryInput!,relay: RelayInput!,): BoardConnection! categories(criteria: HotelXCategoryQueryInput!,relay: RelayInput!,): CategoryConnection! rooms(criteria: HotelXRoomQueryInput!,relay: RelayInput!,): RoomConnection! hotels(criteria: HotelXHotelListInput!,relay: RelayInput!,token: String,): HotelConnection! destinations(criteria: HotelXDestinationListInput!</description>
    </item>
    
    <item>
      <title>Location</title>
      <link>/travelgatex/reference/objects/location/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/location/</guid>
      <description>Indicates the location of the hotel.
GraphQL Schema definition type Location {address: String city: String zipCode: String country: Country! coordinates: Coordinates closestDestination: DestinationData! }Fields address(String):Contains Hotel Addresscity(String):Contains the cityzipCode(String):Contains the zipCode.country(Country!):Country where is the Hotel.coordinates(Coordinates):Geographical coordinates corresponding to a location.</description>
    </item>
    
    <item>
      <title>Map</title>
      <link>/travelgatex/reference/objects/map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/map/</guid>
      <description>Map codes.
GraphQL Schema definition type Map {code: String! maps: [String!] }Fields code(String!):Context code.maps([String!]):Equivalences of the supplier for the client code.</description>
    </item>
    
    <item>
      <title>Mapping</title>
      <link>/travelgatex/reference/objects/mapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/mapping/</guid>
      <description>Returns the mapping for a group.
GraphQL Schema definition type Mapping {contexts(codes: [String!],): [MappingContext!] errors: [Error!] warnings: [Warning!] }Fields contexts([MappingContext!]):Returns the differents group contexts, you can filter by some contexts.errors([Error!]):Errors that will lead the service to abortwarnings([Warning!]):Potentially harmful situations or errors that won&amp;#39;t force the service to abort</description>
    </item>
    
    <item>
      <title>MappingContext</title>
      <link>/travelgatex/reference/objects/mappingcontext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/mappingcontext/</guid>
      <description>Returns the differents group contexts
GraphQL Schema definition type MappingContext {code: String! hotels(codes: [String!],): [MappingEntity!] rooms(codes: [String!],): [MappingEntity!] boards(codes: [String!],): [MappingEntity!] }Fields code(String!):Code of the contexthotels([MappingEntity!]):Mapping of hotels, you can filter by hotel code.rooms([MappingEntity!]):Mapping of rooms, you can filter by room code.</description>
    </item>
    
    <item>
      <title>MappingEntity</title>
      <link>/travelgatex/reference/objects/mappingentity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/mappingentity/</guid>
      <description>Mapping about client codes with the equivalence per supplier.
GraphQL Schema definition type MappingEntity {code: String! contexts(codes: [String!],): [Map!] }Fields code(String!):Client codecontexts([Map!]):You can filter by output context.</description>
    </item>
    
    <item>
      <title>Markup</title>
      <link>/travelgatex/reference/objects/markup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/markup/</guid>
      <description>Informs markup applied over supplier price.
GraphQL Schema definition type Markup {channel: String currency: Currency! binding: Boolean! net: Float! gross: Float exchange: Exchange! rules: [Rule!]! }Fields channel(String):channel of markup application.currency(Currency!):Currency code indicating which currency should be paid. This information is mandatory.</description>
    </item>
    
    <item>
      <title>Media</title>
      <link>/travelgatex/reference/objects/media/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/media/</guid>
      <description>Contains media information.
GraphQL Schema definition type Media {code: String order: String type: ApplicationAreaType! updatedAt: DateTime! url: URI! texts(languages: [Language!],): [Text!] }Fields code(String):Code.order(String):Indicates the order priority.type(ApplicationAreaType!):Indicates the type of the media.updatedAt(DateTime!):Update date.url(URI!):Url.texts([Text!</description>
    </item>
    
    <item>
      <title>Member</title>
      <link>/travelgatex/reference/objects/member/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/member/</guid>
      <description>GraphQL Schema definition type Member {code: ID! memberData: MemberData error: [Error!] isActive: Boolean! createdAt: DateTime! updatedAt: DateTime! }Fields code(ID!):memberData(MemberData):error([Error!]):isActive(Boolean!):createdAt(DateTime!):updatedAt(DateTime!):
Require by OrganizationData: GroupCommonData: GroupData: MemberEdge: AdminMutation:</description>
    </item>
    
    <item>
      <title>MemberConnection</title>
      <link>/travelgatex/reference/objects/memberconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/memberconnection/</guid>
      <description>GraphQL Schema definition type MemberConnection {edges: [MemberEdge] pageInfo: PageInfo! }Fields edges([MemberEdge]):pageInfo(PageInfo!):
Require by AdminQuery: OrganizationData: GroupCommonData: GroupData:</description>
    </item>
    
    <item>
      <title>MemberData</title>
      <link>/travelgatex/reference/objects/memberdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/memberdata/</guid>
      <description>GraphQL Schema definition type MemberData {id: ID! code: ID! roles: String memberType: String groups(first: Int,last: Int,before: String,after: String,codes: [ID!],): GroupConnection }Fields id(ID!</description>
    </item>
    
    <item>
      <title>MemberEdge</title>
      <link>/travelgatex/reference/objects/memberedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/memberedge/</guid>
      <description>GraphQL Schema definition type MemberEdge {cursor: String! node: Member }Fields cursor(String!):node(Member):
Require by MemberConnection:</description>
    </item>
    
    <item>
      <title>Occupancy</title>
      <link>/travelgatex/reference/objects/occupancy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/occupancy/</guid>
      <description>Information about occupancy.
GraphQL Schema definition type Occupancy {id: Int! paxes: [Pax!]! }Fields id(Int!):Unique ID room in this option.paxes([Pax!]!):List of pax of this occupancy.</description>
    </item>
    
    <item>
      <title>Organization</title>
      <link>/travelgatex/reference/objects/organization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/organization/</guid>
      <description>GraphQL Schema definition type Organization {code: ID! organizationData: OrganizationData error: [Error!] createdAt: DateTime! updatedAt: DateTime! }Fields code(ID!):organizationData(OrganizationData):error([Error!]):createdAt(DateTime!):updatedAt(DateTime!):
Require by OrganizationEdge:</description>
    </item>
    
    <item>
      <title>OrganizationConnection</title>
      <link>/travelgatex/reference/objects/organizationconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/organizationconnection/</guid>
      <description>GraphQL Schema definition type OrganizationConnection {edges: [OrganizationEdge] pageInfo: PageInfo! }Fields edges([OrganizationEdge]):pageInfo(PageInfo!):
Require by AdminQuery:</description>
    </item>
    
    <item>
      <title>OrganizationData</title>
      <link>/travelgatex/reference/objects/organizationdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/organizationdata/</guid>
      <description>GraphQL Schema definition type OrganizationData {id: ID! code: ID! type: GroupType! info: String owner: Member isEditable: Boolean! members(codes: [ID!],first: Int,last: Int,before: String,after: String,): MemberConnection apis(codes: [ID!</description>
    </item>
    
    <item>
      <title>OrganizationEdge</title>
      <link>/travelgatex/reference/objects/organizationedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/organizationedge/</guid>
      <description>GraphQL Schema definition type OrganizationEdge {cursor: String! node: Organization }Fields cursor(String!):node(Organization):
Require by OrganizationConnection:</description>
    </item>
    
    <item>
      <title>PageInfo</title>
      <link>/travelgatex/reference/objects/pageinfo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/pageinfo/</guid>
      <description>GraphQL Schema definition type PageInfo {hasNextPage: Boolean! hasPreviousPage: Boolean! startCursor: String! endCursor: String! }Fields hasNextPage(Boolean!):hasPreviousPage(Boolean!):startCursor(String!):endCursor(String!):
Require by BoardConnection: BoardList definitionCategoryConnection: CategoryList definitionRoomConnection: RoomList definitionHotelConnection: HotelList definitionDestinationConnection: DestinationList definitionAccessConnection: SupplierConnection: ClientConnection: OrganizationConnection: GroupConnection: MemberConnection: APIConnection: ResourceConnection: RoleConnection: ProductConnection:</description>
    </item>
    
    <item>
      <title>Parameter</title>
      <link>/travelgatex/reference/objects/parameter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/parameter/</guid>
      <description>Parameters for additional information for the supplier&amp;rsquo;s configuration.
GraphQL Schema definition type Parameter {key: ID! value: String! }Fields key(ID!):Contains the keyword/Id to identify a parameter. This information is mandatory.value(String!):Contains the parameter values. This information is mandatory.
Require by AccessData:</description>
    </item>
    
    <item>
      <title>Pax</title>
      <link>/travelgatex/reference/objects/pax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/pax/</guid>
      <description>Specifies the age pax. The range of what is considered an adult, infant or baby is particular to each supplier.
GraphQL Schema definition type Pax {age: Int! }Fields age(Int!):Specifies the age pax.</description>
    </item>
    
    <item>
      <title>Price</title>
      <link>/travelgatex/reference/objects/price/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/price/</guid>
      <description>Price indicates the value of the room/option. Supplements and/or surcharges could be or not included into the price, will be verified with the nodes Supplements/Surcharges.
GraphQL Schema definition type Price {currency: Currency! binding: Boolean! net: Float! gross: Float exchange: Exchange! markups: [Markup!] }Fields currency(Currency!):Currency code indicating which currency should be paid.</description>
    </item>
    
    <item>
      <title>PriceBreakdown</title>
      <link>/travelgatex/reference/objects/pricebreakdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/pricebreakdown/</guid>
      <description>Information about daily price.
GraphQL Schema definition type PriceBreakdown {effectiveDate: Date! expireDate: Date! price: Price! }Fields effectiveDate(Date!):Start date in which the price becomes effective.expireDate(Date!):Expire date of price.price(Price!):Specifies the daily price.</description>
    </item>
    
    <item>
      <title>Product</title>
      <link>/travelgatex/reference/objects/product/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/product/</guid>
      <description>GraphQL Schema definition type Product {code: ID! productData: ProductData! error: [Error!] createdAt: DateTime! updatedAt: DateTime! }Fields code(ID!):productData(ProductData!):error([Error!]):createdAt(DateTime!):updatedAt(DateTime!):
Require by ProductEdge:</description>
    </item>
    
    <item>
      <title>ProductConnection</title>
      <link>/travelgatex/reference/objects/productconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/productconnection/</guid>
      <description>GraphQL Schema definition type ProductConnection {edges: [ProductEdge] pageInfo: PageInfo! }Fields edges([ProductEdge]):pageInfo(PageInfo!):
Require by AdminQuery: OrganizationData:</description>
    </item>
    
    <item>
      <title>ProductData</title>
      <link>/travelgatex/reference/objects/productdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/productdata/</guid>
      <description>GraphQL Schema definition type ProductData {id: ID! code: ID! apis(codes: [ID!],first: Int,last: Int,before: String,after: String,): APIConnection }Fields id(ID!):code(ID!):apis(APIConnection):</description>
    </item>
    
    <item>
      <title>ProductEdge</title>
      <link>/travelgatex/reference/objects/productedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/productedge/</guid>
      <description>GraphQL Schema definition type ProductEdge {cursor: String! node: Product }Fields cursor(String!):node(Product):
Require by ProductConnection:</description>
    </item>
    
    <item>
      <title>Promotion</title>
      <link>/travelgatex/reference/objects/promotion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/promotion/</guid>
      <description>Information about room promotions(offers).
GraphQL Schema definition type Promotion {code: String! name: String effectiveDate: Date expireDate: Date }Fields code(String!):Specifies the promotion code.name(String):Specifies the promotion name.effectiveDate(Date):Promotion effective date.expireDate(Date):Promotion expire date.</description>
    </item>
    
    <item>
      <title>Property</title>
      <link>/travelgatex/reference/objects/property/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/property/</guid>
      <description>Indicates Property type
GraphQL Schema definition type Property {name: String code: String }Fields name(String):Indicates property typecode(String):Indicates property type code
Require by HotelData: Hotel data</description>
    </item>
    
    <item>
      <title>Provider</title>
      <link>/travelgatex/reference/objects/provider/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/provider/</guid>
      <description>Temporary type to use only during SQL server&amp;rsquo;s lifetime
GraphQL Schema definition type Provider {code: ID! name: String! isActive: Boolean isPublic: Boolean }Fields code(ID!):name(String!):isActive(Boolean):isPublic(Boolean):
Require by SupplierData:</description>
    </item>
    
    <item>
      <title>Quote</title>
      <link>/travelgatex/reference/objects/quote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/quote/</guid>
      <description>Returns the total price and cancellation policies of the Option selected in the previous step (Search).
GraphQL Schema definition type Quote {Show deprecated fieldshotel(criteria: HotelCriteriaQuoteInput!,settings: HotelSettingsInput,): HotelQuote // deprecated from 2017-11-21. You can find it in query at HotelX}Require by Query:</description>
    </item>
    
    <item>
      <title>RatePlan</title>
      <link>/travelgatex/reference/objects/rateplan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/rateplan/</guid>
      <description>Information about the rate of the option returned.
GraphQL Schema definition type RatePlan {code: String! name: String effectiveDate: Date expireDate: Date }Fields code(String!):Specifies the rate code.name(String):Specifies the rate name.effectiveDate(Date):Start date in which the rate becomes effective.expireDate(Date):Expire date of the rate.</description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>/travelgatex/reference/objects/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/reference/</guid>
      <description>Contains reference codes.
GraphQL Schema definition type Reference {client: String supplier: String }Fields client(String):Client reference bookingsupplier(String):Supplier reference booking
Require by HotelBookingDetail: Contains information about booking.HotelCancelDetail: Contains information about cancel</description>
    </item>
    
    <item>
      <title>Resort</title>
      <link>/travelgatex/reference/objects/resort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/resort/</guid>
      <description>Contains information about the Resort.
GraphQL Schema definition type Resort {code: String! name: String description: String }Fields code(String!):Specifies the resort code.name(String):Specifies the resort name.description(String):Specifies the resort description.
Require by Supplement: Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.</description>
    </item>
    
    <item>
      <title>Resource</title>
      <link>/travelgatex/reference/objects/resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/resource/</guid>
      <description>GraphQL Schema definition type Resource {code: ID! error: [Error!] resourceData: ResourceData createdAt: DateTime! updatedAt: DateTime! }Fields code(ID!):error([Error!]):resourceData(ResourceData):createdAt(DateTime!):updatedAt(DateTime!):
Require by ResourceEdge:</description>
    </item>
    
    <item>
      <title>ResourceConnection</title>
      <link>/travelgatex/reference/objects/resourceconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/resourceconnection/</guid>
      <description>GraphQL Schema definition type ResourceConnection {edges: [ResourceEdge] pageInfo: PageInfo! }Fields edges([ResourceEdge]):pageInfo(PageInfo!):
Require by AdminQuery: APIData: RoleData:</description>
    </item>
    
    <item>
      <title>ResourceData</title>
      <link>/travelgatex/reference/objects/resourcedata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/resourcedata/</guid>
      <description>GraphQL Schema definition type ResourceData {id: ID! code: ID! apis(first: Int,last: Int,before: String,after: String,codes: [ID!],): APIConnection roles(first: Int,last: Int,before: String,after: String,codes: [ID!</description>
    </item>
    
    <item>
      <title>ResourceEdge</title>
      <link>/travelgatex/reference/objects/resourceedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/resourceedge/</guid>
      <description>GraphQL Schema definition type ResourceEdge {cursor: String! node: Resource }Fields cursor(String!):node(Resource):
Require by ResourceConnection:</description>
    </item>
    
    <item>
      <title>Role</title>
      <link>/travelgatex/reference/objects/role/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/role/</guid>
      <description>GraphQL Schema definition type Role {code: ID! error: [Error!] roleData: RoleData createdAt: DateTime! updatedAt: DateTime! }Fields code(ID!):error([Error!]):roleData(RoleData):createdAt(DateTime!):updatedAt(DateTime!):
Require by RoleEdge:</description>
    </item>
    
    <item>
      <title>RoleConnection</title>
      <link>/travelgatex/reference/objects/roleconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roleconnection/</guid>
      <description>GraphQL Schema definition type RoleConnection {edges: [RoleEdge] pageInfo: PageInfo! }Fields edges([RoleEdge]):pageInfo(PageInfo!):
Require by AdminQuery: ResourceData:</description>
    </item>
    
    <item>
      <title>RoleData</title>
      <link>/travelgatex/reference/objects/roledata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roledata/</guid>
      <description>GraphQL Schema definition type RoleData {id: ID! code: ID! label: String! isCreate: Boolean! isRead: Boolean! isUpdate: Boolean! isDelete: Boolean! isEnable: Boolean! isExecutable: Boolean! isSpecial: Boolean! special: String resources(first: Int,last: Int,before: String,after: String,codes: [ID!</description>
    </item>
    
    <item>
      <title>RoleEdge</title>
      <link>/travelgatex/reference/objects/roleedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roleedge/</guid>
      <description>GraphQL Schema definition type RoleEdge {cursor: String! node: Role }Fields cursor(String!):node(Role):
Require by RoleConnection:</description>
    </item>
    
    <item>
      <title>Room</title>
      <link>/travelgatex/reference/objects/room/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/room/</guid>
      <description>Contains the room information of the option returned.
GraphQL Schema definition type Room {occupancyRefId: Int! code: String! description: String refundable: Boolean units: Int roomPrice: RoomPrice! beds: [Bed!] ratePlans: [RatePlan!] promotions: [Promotion!] }Fields occupancyRefId(Int!):ID reference to the occupancy.code(String!</description>
    </item>
    
    <item>
      <title>RoomConnection</title>
      <link>/travelgatex/reference/objects/roomconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roomconnection/</guid>
      <description>RoomList definition
GraphQL Schema definition type RoomConnection {edges: [RoomEdge] pageInfo: PageInfo! }Fields edges([RoomEdge]):pageInfo(PageInfo!):
Require by HotelXQuery:</description>
    </item>
    
    <item>
      <title>RoomCriteria</title>
      <link>/travelgatex/reference/objects/roomcriteria/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roomcriteria/</guid>
      <description>Occupancy for a room. It contains a list of pax ages.
GraphQL Schema definition type RoomCriteria {paxes: [Pax!]! }Fields paxes([Pax!]!):Array of pax ages. The number of items in the array will indicate the pax occupancy.</description>
    </item>
    
    <item>
      <title>RoomData</title>
      <link>/travelgatex/reference/objects/roomdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roomdata/</guid>
      <description>Room data
GraphQL Schema definition type RoomData {code: ID! roomCode: String! texts(languages: [Language!],): [Text!] }Fields code(ID!):Internal code to perform availability.roomCode(String!):Code of the hotel in the Supplier selected.texts([Text!]):Label
Require by RoomStatic: Room Type</description>
    </item>
    
    <item>
      <title>RoomEdge</title>
      <link>/travelgatex/reference/objects/roomedge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roomedge/</guid>
      <description>RoomList Edge definition
GraphQL Schema definition type RoomEdge {cursor: String! node: RoomStatic }Fields cursor(String!):node(RoomStatic):
Require by RoomConnection: RoomList definition</description>
    </item>
    
    <item>
      <title>RoomPrice</title>
      <link>/travelgatex/reference/objects/roomprice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roomprice/</guid>
      <description>Specifies the room price.
GraphQL Schema definition type RoomPrice {price: Price! breakdown: [PriceBreakdown!] }Fields price(Price!):Total price for all days.breakdown([PriceBreakdown!]):Daily break downs price.
Require by Room: Contains the room information of the option returned.</description>
    </item>
    
    <item>
      <title>RoomStatic</title>
      <link>/travelgatex/reference/objects/roomstatic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/roomstatic/</guid>
      <description>Room Type
GraphQL Schema definition type RoomStatic {code: ID! roomData: RoomData error: [Error!] createdAt: DateTime! updatedAt: DateTime! }Fields code(ID!):Room IDroomData(RoomData):Room dataerror([Error!]):Errors that will lead the service to abortcreatedAt(DateTime!):Create dateupdatedAt(DateTime!):Update date
Require by RoomEdge: RoomList Edge definition</description>
    </item>
    
    <item>
      <title>Rule</title>
      <link>/travelgatex/reference/objects/rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/rule/</guid>
      <description>GraphQL Schema definition type Rule {id: String! name: String type: MarkupRuleType! value: Float! }Fields id(String!):rule identifiername(String):rule nametype(MarkupRuleType!):type of the valuevalue(Float!):value applied by this rule</description>
    </item>
    
    <item>
      <title>Search</title>
      <link>/travelgatex/reference/objects/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/search/</guid>
      <description>Available options for a given date and itinerary. It does not filter different classes, times or fares. It will always retrieve all results returned by the suppliers. The availability request is very straight forward.
GraphQL Schema definition type Search {Show deprecated fieldshotel(token: String,criteria: HotelCriteriaSearchInput,settings: HotelSettingsInput,filter: FilterInput,): HotelSearch // deprecated from 2017-11-21.</description>
    </item>
    
    <item>
      <title>ServiceApi</title>
      <link>/travelgatex/reference/objects/serviceapi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/serviceapi/</guid>
      <description>Information related to a Service API
GraphQL Schema definition type ServiceApi {code: ID! name: String! operations: [ServiceOperation] }Fields code(ID!):Service API IDname(String!):Service API Nameoperations([ServiceOperation]):Operations that a Service Api has
Require by AdminQuery:</description>
    </item>
    
    <item>
      <title>ServiceOperation</title>
      <link>/travelgatex/reference/objects/serviceoperation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/serviceoperation/</guid>
      <description>Information related to an API operation
GraphQL Schema definition type ServiceOperation {code: ID! name: String! type: String! }Fields code(ID!):Service Operation IDname(String!):Service Operation nametype(String!):Service Operation type
Require by ServiceApi: Information related to a Service API</description>
    </item>
    
    <item>
      <title>ServiceStatus</title>
      <link>/travelgatex/reference/objects/servicestatus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/servicestatus/</guid>
      <description>Indicates the status of the service
GraphQL Schema definition type ServiceStatus {code: String type: String description: String }Fields code(String):Status codetype(String):Status typedescription(String):Status description
Require by HotelXQuery:</description>
    </item>
    
    <item>
      <title>Stat</title>
      <link>/travelgatex/reference/objects/stat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/stat/</guid>
      <description>GraphQL Schema definition type Stat {start: DateTime! end: DateTime! duration: Float }Fields start(DateTime!):Start UTCend(DateTime!):End UTCduration(Float):Difference between start and end in miliseconds
Require by StatsRequest: Contains internal information.StatPlugin: StatAccess: StatTransaction:</description>
    </item>
    
    <item>
      <title>StatAccess</title>
      <link>/travelgatex/reference/objects/stataccess/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/stataccess/</guid>
      <description>GraphQL Schema definition type StatAccess {name: String! total: Stat! staticConfiguration: Stat hotels: Int! zones: Int! cities: Int! requestAccess: StatPlugin responseAccess: StatPlugin transactions: [StatTransaction!]! plugins: [StatPlugin!] }Fields name(String!):Access nametotal(Stat!):Total access timestaticConfiguration(Stat):Static configuration timehotels(Int!</description>
    </item>
    
    <item>
      <title>StatPlugin</title>
      <link>/travelgatex/reference/objects/statplugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statplugin/</guid>
      <description>GraphQL Schema definition type StatPlugin {name: String! total: Stat! }Fields name(String!):Plugin nametotal(Stat!):total plugin time
Require by StatsRequest: Contains internal information.StatAccess:</description>
    </item>
    
    <item>
      <title>StatTransaction</title>
      <link>/travelgatex/reference/objects/stattransaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/stattransaction/</guid>
      <description>GraphQL Schema definition type StatTransaction {reference: String! total: Stat! buildRequest: Stat! workerCommunication: Stat! parseResponse: Stat! }Fields reference(String!):Extra information about transaction.total(Stat!):Total transaction timebuildRequest(Stat!):Build request timeworkerCommunication(Stat!):Worker connection timeparseResponse(Stat!):Parse response time</description>
    </item>
    
    <item>
      <title>StatsRequest</title>
      <link>/travelgatex/reference/objects/statsrequest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/statsrequest/</guid>
      <description>Contains internal information.
GraphQL Schema definition type StatsRequest {total: Stat! validation: Stat! process: Stat! configuration: Stat! request: Stat! response: Stat! requestPlugin: StatPlugin responsePlugin: StatPlugin hotels: Int! zones: Int! cities: Int! dockerID: String! Accesses: [StatAccess!</description>
    </item>
    
    <item>
      <title>Supplement</title>
      <link>/travelgatex/reference/objects/supplement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/supplement/</guid>
      <description>Supplement that it can be or its already added to the option returned. Contains all the information about the supplement.
GraphQL Schema definition type Supplement {code: String! name: String description: String supplementType: SupplementType! chargeType: ChargeType! mandatory: Boolean! durationType: DurationType quantity: Int unit: UnitTimeType effectiveDate: Date expireDate: Date resort: Resort price: Price }Fields code(String!</description>
    </item>
    
    <item>
      <title>Supplier</title>
      <link>/travelgatex/reference/objects/supplier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/supplier/</guid>
      <description>GraphQL Schema definition type Supplier {code: ID! supplierData: SupplierData error: [Error!] createdAt: DateTime! updatedAt: DateTime! }Fields code(ID!):supplierData(SupplierData):error([Error!]):Errors that will lead the service to abortcreatedAt(DateTime!):Create dateupdatedAt(DateTime!):Update date
Require by AccessData: SupplierEdge: AdminMutation:</description>
    </item>
    
    <item>
      <title>SupplierConnection</title>
      <link>/travelgatex/reference/objects/supplierconnection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/supplierconnection/</guid>
      <description>GraphQL Schema definition type SupplierConnection {edges: [SupplierEdge] pageInfo: PageInfo! }Fields edges([SupplierEdge]):pageInfo(PageInfo!):
Require by AdminQuery:</description>
    </item>
    
    <item>
      <title>SupplierData</title>
      <link>/travelgatex/reference/objects/supplierdata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/supplierdata/</guid>
      <description>GraphQL Schema definition type SupplierData {code: ID! name: String! isActive: Boolean! provider: Provider! context: String! serviceApi: Int! supplierGroup: ID accesses: AccessConnection }Fields code(ID!):unique identifier of a suppliername(String!):Supplier complete nameisActive(Boolean!):indicates whether a supplier is activeprovider(Provider!</description>
    </item>
    
    <item>
      <title>SupplierEdge</title>
      <link>/travelgatex/reference/objects/supplieredge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/supplieredge/</guid>
      <description>GraphQL Schema definition type SupplierEdge {cursor: String! node: Supplier }Fields cursor(String!):node(Supplier):
Require by SupplierConnection:</description>
    </item>
    
    <item>
      <title>SupplierGroup</title>
      <link>/travelgatex/reference/objects/suppliergroup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/suppliergroup/</guid>
      <description>group related to a supplier
GraphQL Schema definition type SupplierGroup {groupCode: String! isActive: Boolean! }Fields groupCode(String!):group code of the group related to this supplierisActive(Boolean!):Indicates if the supplier is active for its supplier</description>
    </item>
    
    <item>
      <title>Surcharge</title>
      <link>/travelgatex/reference/objects/surcharge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/surcharge/</guid>
      <description>Surcharge that it can be or it is already added to the option returned. Contains all the information about the surcharge.
GraphQL Schema definition type Surcharge {chargeType: ChargeType! mandatory: Boolean! price: Price! description: String }Fields chargeType(ChargeType!):Indicates the charge types. We need to know whether the supplements have to be paid when the consumer gets to the hotel or beforehand.</description>
    </item>
    
    <item>
      <title>Timeout</title>
      <link>/travelgatex/reference/objects/timeout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/timeout/</guid>
      <description>GraphQL Schema definition type Timeout {search: Int! quote: Int! book: Int! }Fields search(Int!):Milliseconds before the search connection is closed.quote(Int!):Milliseconds before the quote connection is closed.book(Int!):Milliseconds before the book connection is closed.
Require by DefaultSettings:</description>
    </item>
    
    <item>
      <title>Transactions</title>
      <link>/travelgatex/reference/objects/transactions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/transactions/</guid>
      <description>Supplier transaction
GraphQL Schema definition type Transactions {request: String! response: String! timeStamp: DateTime! }Fields request(String!):Transaction Request.response(String!):Transaction Response.timeStamp(DateTime!):Time when the request has been processed.</description>
    </item>
    
    <item>
      <title>Urls</title>
      <link>/travelgatex/reference/objects/urls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/urls/</guid>
      <description>Url&amp;rsquo;s
GraphQL Schema definition type Urls {search: URI quote: URI book: URI generic: URI }Fields search(URI):Specific Url for Availability method.quote(URI):Specific Url for Reservation method.book(URI):Specific Url for Valuation method.generic(URI):Supplier URL used for multiple methods.
Require by AccessData:</description>
    </item>
    
    <item>
      <title>Warning</title>
      <link>/travelgatex/reference/objects/warning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/travelgatex/reference/objects/warning/</guid>
      <description>Application warnings
GraphQL Schema definition type Warning {code: String! type: String! description: String! }Fields code(String!):Warning codetype(String!):Warning typedescription(String!):Warning description</description>
    </item>
    
  </channel>
</rss>